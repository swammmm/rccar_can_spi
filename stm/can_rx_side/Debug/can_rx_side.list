
can_rx_side.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000438c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08004498  08004498  00014498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004598  08004598  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004598  08004598  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004598  08004598  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004598  08004598  00014598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800459c  0800459c  0001459c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080045a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  20000070  08004610  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000244  08004610  00020244  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bb40  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e60  00000000  00000000  0002bbd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab8  00000000  00000000  0002da40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a00  00000000  00000000  0002e4f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018148  00000000  00000000  0002eef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b9d3  00000000  00000000  00047040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087db2  00000000  00000000  00052a13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000da7c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000355c  00000000  00000000  000da818  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004480 	.word	0x08004480

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004480 	.word	0x08004480

0800014c <_write>:
CAN_TxHeaderTypeDef canTxHeader;
volatile uint8_t can1_rx0_flag = 0;
uint8_t can1Rx0Data;
int spiflag = 0;

int _write(int file, char *ptr, int len){
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, 100);
 8000158:	687b      	ldr	r3, [r7, #4]
 800015a:	b29a      	uxth	r2, r3
 800015c:	2364      	movs	r3, #100	; 0x64
 800015e:	68b9      	ldr	r1, [r7, #8]
 8000160:	4803      	ldr	r0, [pc, #12]	; (8000170 <_write+0x24>)
 8000162:	f002 fdf5 	bl	8002d50 <HAL_UART_Transmit>
    return len;
 8000166:	687b      	ldr	r3, [r7, #4]
}
 8000168:	4618      	mov	r0, r3
 800016a:	3710      	adds	r7, #16
 800016c:	46bd      	mov	sp, r7
 800016e:	bd80      	pop	{r7, pc}
 8000170:	20000194 	.word	0x20000194

08000174 <HAL_DMA_STATE_CHANGE>:

void HAL_DMA_STATE_CHANGE(SPI_HandleTypeDef *hspi)
{
 8000174:	b480      	push	{r7}
 8000176:	b083      	sub	sp, #12
 8000178:	af00      	add	r7, sp, #0
 800017a:	6078      	str	r0, [r7, #4]
  hspi->State = HAL_SPI_STATE_READY;
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	2201      	movs	r2, #1
 8000180:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
}
 8000184:	bf00      	nop
 8000186:	370c      	adds	r7, #12
 8000188:	46bd      	mov	sp, r7
 800018a:	bc80      	pop	{r7}
 800018c:	4770      	bx	lr
	...

08000190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b086      	sub	sp, #24
 8000194:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000196:	f000 fc95 	bl	8000ac4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800019a:	f000 f885 	bl	80002a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800019e:	f000 f97d 	bl	800049c <MX_GPIO_Init>
  MX_DMA_Init();
 80001a2:	f000 f955 	bl	8000450 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80001a6:	f000 f929 	bl	80003fc <MX_USART2_UART_Init>
  MX_CAN_Init();
 80001aa:	f000 f8bf 	bl	800032c <MX_CAN_Init>
  MX_SPI1_Init();
 80001ae:	f000 f8f3 	bl	8000398 <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  canFilter1.FilterMaskIdHigh = 0x7F3 << 5;
 80001b2:	4b32      	ldr	r3, [pc, #200]	; (800027c <main+0xec>)
 80001b4:	f64f 6260 	movw	r2, #65120	; 0xfe60
 80001b8:	609a      	str	r2, [r3, #8]
  canFilter1.FilterIdHigh = 0x106 << 5;
 80001ba:	4b30      	ldr	r3, [pc, #192]	; (800027c <main+0xec>)
 80001bc:	f44f 5203 	mov.w	r2, #8384	; 0x20c0
 80001c0:	601a      	str	r2, [r3, #0]

  canFilter1.FilterMaskIdLow = 0x7F3 << 5;
 80001c2:	4b2e      	ldr	r3, [pc, #184]	; (800027c <main+0xec>)
 80001c4:	f64f 6260 	movw	r2, #65120	; 0xfe60
 80001c8:	60da      	str	r2, [r3, #12]
  canFilter1.FilterIdLow = 0x106 << 5;
 80001ca:	4b2c      	ldr	r3, [pc, #176]	; (800027c <main+0xec>)
 80001cc:	f44f 5203 	mov.w	r2, #8384	; 0x20c0
 80001d0:	605a      	str	r2, [r3, #4]

  canFilter1.FilterMode = CAN_FILTERMODE_IDMASK;
 80001d2:	4b2a      	ldr	r3, [pc, #168]	; (800027c <main+0xec>)
 80001d4:	2200      	movs	r2, #0
 80001d6:	619a      	str	r2, [r3, #24]
  canFilter1.FilterScale = CAN_FILTERSCALE_16BIT;
 80001d8:	4b28      	ldr	r3, [pc, #160]	; (800027c <main+0xec>)
 80001da:	2200      	movs	r2, #0
 80001dc:	61da      	str	r2, [r3, #28]

  canFilter1.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80001de:	4b27      	ldr	r3, [pc, #156]	; (800027c <main+0xec>)
 80001e0:	2200      	movs	r2, #0
 80001e2:	611a      	str	r2, [r3, #16]
  canFilter1.FilterBank = 0;
 80001e4:	4b25      	ldr	r3, [pc, #148]	; (800027c <main+0xec>)
 80001e6:	2200      	movs	r2, #0
 80001e8:	615a      	str	r2, [r3, #20]
  canFilter1.FilterActivation = CAN_FILTER_ENABLE;
 80001ea:	4b24      	ldr	r3, [pc, #144]	; (800027c <main+0xec>)
 80001ec:	2201      	movs	r2, #1
 80001ee:	621a      	str	r2, [r3, #32]

  HAL_CAN_ConfigFilter(&hcan, &canFilter1);
 80001f0:	4922      	ldr	r1, [pc, #136]	; (800027c <main+0xec>)
 80001f2:	4823      	ldr	r0, [pc, #140]	; (8000280 <main+0xf0>)
 80001f4:	f000 fdc3 	bl	8000d7e <HAL_CAN_ConfigFilter>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80001f8:	2102      	movs	r1, #2
 80001fa:	4821      	ldr	r0, [pc, #132]	; (8000280 <main+0xf0>)
 80001fc:	f000 ffed 	bl	80011da <HAL_CAN_ActivateNotification>

  HAL_CAN_Start(&hcan);
 8000200:	481f      	ldr	r0, [pc, #124]	; (8000280 <main+0xf0>)
 8000202:	f000 fe85 	bl	8000f10 <HAL_CAN_Start>
  uint8_t str[20];
  while (1)
  {
      if(can1_rx0_flag == 1){
 8000206:	4b1f      	ldr	r3, [pc, #124]	; (8000284 <main+0xf4>)
 8000208:	781b      	ldrb	r3, [r3, #0]
 800020a:	b2db      	uxtb	r3, r3
 800020c:	2b01      	cmp	r3, #1
 800020e:	d1fa      	bne.n	8000206 <main+0x76>
	can1_rx0_flag = 0;
 8000210:	4b1c      	ldr	r3, [pc, #112]	; (8000284 <main+0xf4>)
 8000212:	2200      	movs	r2, #0
 8000214:	701a      	strb	r2, [r3, #0]
	sprintf((char*)str, "Rx ID : 0x%3X", canRxHeader.StdId);
 8000216:	4b1c      	ldr	r3, [pc, #112]	; (8000288 <main+0xf8>)
 8000218:	681a      	ldr	r2, [r3, #0]
 800021a:	1d3b      	adds	r3, r7, #4
 800021c:	491b      	ldr	r1, [pc, #108]	; (800028c <main+0xfc>)
 800021e:	4618      	mov	r0, r3
 8000220:	f002 ffd6 	bl	80031d0 <siprintf>
	printf("%s\r\n", str);
 8000224:	1d3b      	adds	r3, r7, #4
 8000226:	4619      	mov	r1, r3
 8000228:	4819      	ldr	r0, [pc, #100]	; (8000290 <main+0x100>)
 800022a:	f002 ff43 	bl	80030b4 <iprintf>
	sprintf((char*)str, "Rx Data : %d", can1Rx0Data);
 800022e:	4b19      	ldr	r3, [pc, #100]	; (8000294 <main+0x104>)
 8000230:	781b      	ldrb	r3, [r3, #0]
 8000232:	461a      	mov	r2, r3
 8000234:	1d3b      	adds	r3, r7, #4
 8000236:	4918      	ldr	r1, [pc, #96]	; (8000298 <main+0x108>)
 8000238:	4618      	mov	r0, r3
 800023a:	f002 ffc9 	bl	80031d0 <siprintf>
	printf("%s\r\n", str);
 800023e:	1d3b      	adds	r3, r7, #4
 8000240:	4619      	mov	r1, r3
 8000242:	4813      	ldr	r0, [pc, #76]	; (8000290 <main+0x100>)
 8000244:	f002 ff36 	bl	80030b4 <iprintf>
	if(can1Rx0Data <= 0 || can1Rx0Data > 6) continue;
 8000248:	4b12      	ldr	r3, [pc, #72]	; (8000294 <main+0x104>)
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	2b00      	cmp	r3, #0
 800024e:	d013      	beq.n	8000278 <main+0xe8>
 8000250:	4b10      	ldr	r3, [pc, #64]	; (8000294 <main+0x104>)
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	2b06      	cmp	r3, #6
 8000256:	d80f      	bhi.n	8000278 <main+0xe8>
	HAL_SPI_Transmit_DMA(&hspi1, &can1Rx0Data, 1);
 8000258:	2201      	movs	r2, #1
 800025a:	490e      	ldr	r1, [pc, #56]	; (8000294 <main+0x104>)
 800025c:	480f      	ldr	r0, [pc, #60]	; (800029c <main+0x10c>)
 800025e:	f002 fb3b 	bl	80028d8 <HAL_SPI_Transmit_DMA>
	if(spiflag == 1)
 8000262:	4b0f      	ldr	r3, [pc, #60]	; (80002a0 <main+0x110>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	2b01      	cmp	r3, #1
 8000268:	d1cd      	bne.n	8000206 <main+0x76>
	  {
	    printf("send\r\n");
 800026a:	480e      	ldr	r0, [pc, #56]	; (80002a4 <main+0x114>)
 800026c:	f002 ffa8 	bl	80031c0 <puts>
	    spiflag = 0;
 8000270:	4b0b      	ldr	r3, [pc, #44]	; (80002a0 <main+0x110>)
 8000272:	2200      	movs	r2, #0
 8000274:	601a      	str	r2, [r3, #0]
 8000276:	e7c6      	b.n	8000206 <main+0x76>
	if(can1Rx0Data <= 0 || can1Rx0Data > 6) continue;
 8000278:	bf00      	nop
      if(can1_rx0_flag == 1){
 800027a:	e7c4      	b.n	8000206 <main+0x76>
 800027c:	200001dc 	.word	0x200001dc
 8000280:	2000008c 	.word	0x2000008c
 8000284:	20000220 	.word	0x20000220
 8000288:	20000204 	.word	0x20000204
 800028c:	08004498 	.word	0x08004498
 8000290:	080044a8 	.word	0x080044a8
 8000294:	20000221 	.word	0x20000221
 8000298:	080044b0 	.word	0x080044b0
 800029c:	200000b4 	.word	0x200000b4
 80002a0:	20000224 	.word	0x20000224
 80002a4:	080044c0 	.word	0x080044c0

080002a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b090      	sub	sp, #64	; 0x40
 80002ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ae:	f107 0318 	add.w	r3, r7, #24
 80002b2:	2228      	movs	r2, #40	; 0x28
 80002b4:	2100      	movs	r1, #0
 80002b6:	4618      	mov	r0, r3
 80002b8:	f002 fef4 	bl	80030a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002bc:	1d3b      	adds	r3, r7, #4
 80002be:	2200      	movs	r2, #0
 80002c0:	601a      	str	r2, [r3, #0]
 80002c2:	605a      	str	r2, [r3, #4]
 80002c4:	609a      	str	r2, [r3, #8]
 80002c6:	60da      	str	r2, [r3, #12]
 80002c8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ca:	2302      	movs	r3, #2
 80002cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ce:	2301      	movs	r3, #1
 80002d0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002d2:	2310      	movs	r3, #16
 80002d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002d6:	2302      	movs	r3, #2
 80002d8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80002da:	2300      	movs	r3, #0
 80002dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80002de:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80002e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e4:	f107 0318 	add.w	r3, r7, #24
 80002e8:	4618      	mov	r0, r3
 80002ea:	f001 fe61 	bl	8001fb0 <HAL_RCC_OscConfig>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d001      	beq.n	80002f8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80002f4:	f000 f960 	bl	80005b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f8:	230f      	movs	r3, #15
 80002fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002fc:	2302      	movs	r3, #2
 80002fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000300:	2300      	movs	r3, #0
 8000302:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000304:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000308:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800030a:	2300      	movs	r3, #0
 800030c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800030e:	1d3b      	adds	r3, r7, #4
 8000310:	2102      	movs	r1, #2
 8000312:	4618      	mov	r0, r3
 8000314:	f002 f8ce 	bl	80024b4 <HAL_RCC_ClockConfig>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800031e:	f000 f94b 	bl	80005b8 <Error_Handler>
  }
}
 8000322:	bf00      	nop
 8000324:	3740      	adds	r7, #64	; 0x40
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
	...

0800032c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000330:	4b17      	ldr	r3, [pc, #92]	; (8000390 <MX_CAN_Init+0x64>)
 8000332:	4a18      	ldr	r2, [pc, #96]	; (8000394 <MX_CAN_Init+0x68>)
 8000334:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8000336:	4b16      	ldr	r3, [pc, #88]	; (8000390 <MX_CAN_Init+0x64>)
 8000338:	2210      	movs	r2, #16
 800033a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800033c:	4b14      	ldr	r3, [pc, #80]	; (8000390 <MX_CAN_Init+0x64>)
 800033e:	2200      	movs	r2, #0
 8000340:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000342:	4b13      	ldr	r3, [pc, #76]	; (8000390 <MX_CAN_Init+0x64>)
 8000344:	2200      	movs	r2, #0
 8000346:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_14TQ;
 8000348:	4b11      	ldr	r3, [pc, #68]	; (8000390 <MX_CAN_Init+0x64>)
 800034a:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 800034e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_5TQ;
 8000350:	4b0f      	ldr	r3, [pc, #60]	; (8000390 <MX_CAN_Init+0x64>)
 8000352:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000356:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000358:	4b0d      	ldr	r3, [pc, #52]	; (8000390 <MX_CAN_Init+0x64>)
 800035a:	2200      	movs	r2, #0
 800035c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800035e:	4b0c      	ldr	r3, [pc, #48]	; (8000390 <MX_CAN_Init+0x64>)
 8000360:	2200      	movs	r2, #0
 8000362:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000364:	4b0a      	ldr	r3, [pc, #40]	; (8000390 <MX_CAN_Init+0x64>)
 8000366:	2200      	movs	r2, #0
 8000368:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800036a:	4b09      	ldr	r3, [pc, #36]	; (8000390 <MX_CAN_Init+0x64>)
 800036c:	2200      	movs	r2, #0
 800036e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000370:	4b07      	ldr	r3, [pc, #28]	; (8000390 <MX_CAN_Init+0x64>)
 8000372:	2200      	movs	r2, #0
 8000374:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000376:	4b06      	ldr	r3, [pc, #24]	; (8000390 <MX_CAN_Init+0x64>)
 8000378:	2200      	movs	r2, #0
 800037a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800037c:	4804      	ldr	r0, [pc, #16]	; (8000390 <MX_CAN_Init+0x64>)
 800037e:	f000 fc03 	bl	8000b88 <HAL_CAN_Init>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	d001      	beq.n	800038c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000388:	f000 f916 	bl	80005b8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800038c:	bf00      	nop
 800038e:	bd80      	pop	{r7, pc}
 8000390:	2000008c 	.word	0x2000008c
 8000394:	40006400 	.word	0x40006400

08000398 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800039c:	4b15      	ldr	r3, [pc, #84]	; (80003f4 <MX_SPI1_Init+0x5c>)
 800039e:	4a16      	ldr	r2, [pc, #88]	; (80003f8 <MX_SPI1_Init+0x60>)
 80003a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80003a2:	4b14      	ldr	r3, [pc, #80]	; (80003f4 <MX_SPI1_Init+0x5c>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003a8:	4b12      	ldr	r3, [pc, #72]	; (80003f4 <MX_SPI1_Init+0x5c>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80003ae:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <MX_SPI1_Init+0x5c>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003b4:	4b0f      	ldr	r3, [pc, #60]	; (80003f4 <MX_SPI1_Init+0x5c>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003ba:	4b0e      	ldr	r3, [pc, #56]	; (80003f4 <MX_SPI1_Init+0x5c>)
 80003bc:	2200      	movs	r2, #0
 80003be:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80003c0:	4b0c      	ldr	r3, [pc, #48]	; (80003f4 <MX_SPI1_Init+0x5c>)
 80003c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003c6:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003c8:	4b0a      	ldr	r3, [pc, #40]	; (80003f4 <MX_SPI1_Init+0x5c>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003ce:	4b09      	ldr	r3, [pc, #36]	; (80003f4 <MX_SPI1_Init+0x5c>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003d4:	4b07      	ldr	r3, [pc, #28]	; (80003f4 <MX_SPI1_Init+0x5c>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80003da:	4b06      	ldr	r3, [pc, #24]	; (80003f4 <MX_SPI1_Init+0x5c>)
 80003dc:	220a      	movs	r2, #10
 80003de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003e0:	4804      	ldr	r0, [pc, #16]	; (80003f4 <MX_SPI1_Init+0x5c>)
 80003e2:	f002 f9f5 	bl	80027d0 <HAL_SPI_Init>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d001      	beq.n	80003f0 <MX_SPI1_Init+0x58>
  {
    Error_Handler();
 80003ec:	f000 f8e4 	bl	80005b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003f0:	bf00      	nop
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	200000b4 	.word	0x200000b4
 80003f8:	40013000 	.word	0x40013000

080003fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000400:	4b11      	ldr	r3, [pc, #68]	; (8000448 <MX_USART2_UART_Init+0x4c>)
 8000402:	4a12      	ldr	r2, [pc, #72]	; (800044c <MX_USART2_UART_Init+0x50>)
 8000404:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000406:	4b10      	ldr	r3, [pc, #64]	; (8000448 <MX_USART2_UART_Init+0x4c>)
 8000408:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800040c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800040e:	4b0e      	ldr	r3, [pc, #56]	; (8000448 <MX_USART2_UART_Init+0x4c>)
 8000410:	2200      	movs	r2, #0
 8000412:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000414:	4b0c      	ldr	r3, [pc, #48]	; (8000448 <MX_USART2_UART_Init+0x4c>)
 8000416:	2200      	movs	r2, #0
 8000418:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800041a:	4b0b      	ldr	r3, [pc, #44]	; (8000448 <MX_USART2_UART_Init+0x4c>)
 800041c:	2200      	movs	r2, #0
 800041e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000420:	4b09      	ldr	r3, [pc, #36]	; (8000448 <MX_USART2_UART_Init+0x4c>)
 8000422:	220c      	movs	r2, #12
 8000424:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000426:	4b08      	ldr	r3, [pc, #32]	; (8000448 <MX_USART2_UART_Init+0x4c>)
 8000428:	2200      	movs	r2, #0
 800042a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800042c:	4b06      	ldr	r3, [pc, #24]	; (8000448 <MX_USART2_UART_Init+0x4c>)
 800042e:	2200      	movs	r2, #0
 8000430:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000432:	4805      	ldr	r0, [pc, #20]	; (8000448 <MX_USART2_UART_Init+0x4c>)
 8000434:	f002 fc3c 	bl	8002cb0 <HAL_UART_Init>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d001      	beq.n	8000442 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800043e:	f000 f8bb 	bl	80005b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000442:	bf00      	nop
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	20000194 	.word	0x20000194
 800044c:	40004400 	.word	0x40004400

08000450 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000456:	4b10      	ldr	r3, [pc, #64]	; (8000498 <MX_DMA_Init+0x48>)
 8000458:	695b      	ldr	r3, [r3, #20]
 800045a:	4a0f      	ldr	r2, [pc, #60]	; (8000498 <MX_DMA_Init+0x48>)
 800045c:	f043 0301 	orr.w	r3, r3, #1
 8000460:	6153      	str	r3, [r2, #20]
 8000462:	4b0d      	ldr	r3, [pc, #52]	; (8000498 <MX_DMA_Init+0x48>)
 8000464:	695b      	ldr	r3, [r3, #20]
 8000466:	f003 0301 	and.w	r3, r3, #1
 800046a:	607b      	str	r3, [r7, #4]
 800046c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800046e:	2200      	movs	r2, #0
 8000470:	2100      	movs	r1, #0
 8000472:	200c      	movs	r0, #12
 8000474:	f001 f9d1 	bl	800181a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000478:	200c      	movs	r0, #12
 800047a:	f001 f9ea 	bl	8001852 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800047e:	2200      	movs	r2, #0
 8000480:	2100      	movs	r1, #0
 8000482:	200d      	movs	r0, #13
 8000484:	f001 f9c9 	bl	800181a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000488:	200d      	movs	r0, #13
 800048a:	f001 f9e2 	bl	8001852 <HAL_NVIC_EnableIRQ>

}
 800048e:	bf00      	nop
 8000490:	3708      	adds	r7, #8
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	40021000 	.word	0x40021000

0800049c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b088      	sub	sp, #32
 80004a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a2:	f107 0310 	add.w	r3, r7, #16
 80004a6:	2200      	movs	r2, #0
 80004a8:	601a      	str	r2, [r3, #0]
 80004aa:	605a      	str	r2, [r3, #4]
 80004ac:	609a      	str	r2, [r3, #8]
 80004ae:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004b0:	4b24      	ldr	r3, [pc, #144]	; (8000544 <MX_GPIO_Init+0xa8>)
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	4a23      	ldr	r2, [pc, #140]	; (8000544 <MX_GPIO_Init+0xa8>)
 80004b6:	f043 0310 	orr.w	r3, r3, #16
 80004ba:	6193      	str	r3, [r2, #24]
 80004bc:	4b21      	ldr	r3, [pc, #132]	; (8000544 <MX_GPIO_Init+0xa8>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	f003 0310 	and.w	r3, r3, #16
 80004c4:	60fb      	str	r3, [r7, #12]
 80004c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004c8:	4b1e      	ldr	r3, [pc, #120]	; (8000544 <MX_GPIO_Init+0xa8>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	4a1d      	ldr	r2, [pc, #116]	; (8000544 <MX_GPIO_Init+0xa8>)
 80004ce:	f043 0320 	orr.w	r3, r3, #32
 80004d2:	6193      	str	r3, [r2, #24]
 80004d4:	4b1b      	ldr	r3, [pc, #108]	; (8000544 <MX_GPIO_Init+0xa8>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	f003 0320 	and.w	r3, r3, #32
 80004dc:	60bb      	str	r3, [r7, #8]
 80004de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e0:	4b18      	ldr	r3, [pc, #96]	; (8000544 <MX_GPIO_Init+0xa8>)
 80004e2:	699b      	ldr	r3, [r3, #24]
 80004e4:	4a17      	ldr	r2, [pc, #92]	; (8000544 <MX_GPIO_Init+0xa8>)
 80004e6:	f043 0304 	orr.w	r3, r3, #4
 80004ea:	6193      	str	r3, [r2, #24]
 80004ec:	4b15      	ldr	r3, [pc, #84]	; (8000544 <MX_GPIO_Init+0xa8>)
 80004ee:	699b      	ldr	r3, [r3, #24]
 80004f0:	f003 0304 	and.w	r3, r3, #4
 80004f4:	607b      	str	r3, [r7, #4]
 80004f6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004f8:	4b12      	ldr	r3, [pc, #72]	; (8000544 <MX_GPIO_Init+0xa8>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	4a11      	ldr	r2, [pc, #68]	; (8000544 <MX_GPIO_Init+0xa8>)
 80004fe:	f043 0308 	orr.w	r3, r3, #8
 8000502:	6193      	str	r3, [r2, #24]
 8000504:	4b0f      	ldr	r3, [pc, #60]	; (8000544 <MX_GPIO_Init+0xa8>)
 8000506:	699b      	ldr	r3, [r3, #24]
 8000508:	f003 0308 	and.w	r3, r3, #8
 800050c:	603b      	str	r3, [r7, #0]
 800050e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000510:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000514:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000516:	4b0c      	ldr	r3, [pc, #48]	; (8000548 <MX_GPIO_Init+0xac>)
 8000518:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051a:	2300      	movs	r3, #0
 800051c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800051e:	f107 0310 	add.w	r3, r7, #16
 8000522:	4619      	mov	r1, r3
 8000524:	4809      	ldr	r0, [pc, #36]	; (800054c <MX_GPIO_Init+0xb0>)
 8000526:	f001 fb9d 	bl	8001c64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800052a:	2200      	movs	r2, #0
 800052c:	2100      	movs	r1, #0
 800052e:	2028      	movs	r0, #40	; 0x28
 8000530:	f001 f973 	bl	800181a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000534:	2028      	movs	r0, #40	; 0x28
 8000536:	f001 f98c 	bl	8001852 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800053a:	bf00      	nop
 800053c:	3720      	adds	r7, #32
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40021000 	.word	0x40021000
 8000548:	10110000 	.word	0x10110000
 800054c:	40011000 	.word	0x40011000

08000550 <HAL_SPI_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  spiflag = 1;
 8000558:	4b05      	ldr	r3, [pc, #20]	; (8000570 <HAL_SPI_TxCpltCallback+0x20>)
 800055a:	2201      	movs	r2, #1
 800055c:	601a      	str	r2, [r3, #0]
  HAL_DMA_STATE_CHANGE(&hspi);
 800055e:	1d3b      	adds	r3, r7, #4
 8000560:	4618      	mov	r0, r3
 8000562:	f7ff fe07 	bl	8000174 <HAL_DMA_STATE_CHANGE>
}
 8000566:	bf00      	nop
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	20000224 	.word	0x20000224

08000574 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  // UNUSED(hcan);
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxHeader, &can1Rx0Data) != HAL_OK)
 800057c:	4b0a      	ldr	r3, [pc, #40]	; (80005a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 800057e:	4a0b      	ldr	r2, [pc, #44]	; (80005ac <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000580:	2100      	movs	r1, #0
 8000582:	6878      	ldr	r0, [r7, #4]
 8000584:	f000 fd08 	bl	8000f98 <HAL_CAN_GetRxMessage>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
      Error_Handler();
 800058e:	f000 f813 	bl	80005b8 <Error_Handler>
  }
  can1_rx0_flag = 1;
 8000592:	4b07      	ldr	r3, [pc, #28]	; (80005b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8000594:	2201      	movs	r2, #1
 8000596:	701a      	strb	r2, [r3, #0]
  printf("received\r\n");
 8000598:	4806      	ldr	r0, [pc, #24]	; (80005b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 800059a:	f002 fe11 	bl	80031c0 <puts>
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800059e:	bf00      	nop
 80005a0:	3708      	adds	r7, #8
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	20000221 	.word	0x20000221
 80005ac:	20000204 	.word	0x20000204
 80005b0:	20000220 	.word	0x20000220
 80005b4:	080044c8 	.word	0x080044c8

080005b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005bc:	b672      	cpsid	i
}
 80005be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005c0:	e7fe      	b.n	80005c0 <Error_Handler+0x8>
	...

080005c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005ca:	4b15      	ldr	r3, [pc, #84]	; (8000620 <HAL_MspInit+0x5c>)
 80005cc:	699b      	ldr	r3, [r3, #24]
 80005ce:	4a14      	ldr	r2, [pc, #80]	; (8000620 <HAL_MspInit+0x5c>)
 80005d0:	f043 0301 	orr.w	r3, r3, #1
 80005d4:	6193      	str	r3, [r2, #24]
 80005d6:	4b12      	ldr	r3, [pc, #72]	; (8000620 <HAL_MspInit+0x5c>)
 80005d8:	699b      	ldr	r3, [r3, #24]
 80005da:	f003 0301 	and.w	r3, r3, #1
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e2:	4b0f      	ldr	r3, [pc, #60]	; (8000620 <HAL_MspInit+0x5c>)
 80005e4:	69db      	ldr	r3, [r3, #28]
 80005e6:	4a0e      	ldr	r2, [pc, #56]	; (8000620 <HAL_MspInit+0x5c>)
 80005e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ec:	61d3      	str	r3, [r2, #28]
 80005ee:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <HAL_MspInit+0x5c>)
 80005f0:	69db      	ldr	r3, [r3, #28]
 80005f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005fa:	4b0a      	ldr	r3, [pc, #40]	; (8000624 <HAL_MspInit+0x60>)
 80005fc:	685b      	ldr	r3, [r3, #4]
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800060e:	60fb      	str	r3, [r7, #12]
 8000610:	4a04      	ldr	r2, [pc, #16]	; (8000624 <HAL_MspInit+0x60>)
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000616:	bf00      	nop
 8000618:	3714      	adds	r7, #20
 800061a:	46bd      	mov	sp, r7
 800061c:	bc80      	pop	{r7}
 800061e:	4770      	bx	lr
 8000620:	40021000 	.word	0x40021000
 8000624:	40010000 	.word	0x40010000

08000628 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b08a      	sub	sp, #40	; 0x28
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000630:	f107 0314 	add.w	r3, r7, #20
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4a29      	ldr	r2, [pc, #164]	; (80006e8 <HAL_CAN_MspInit+0xc0>)
 8000644:	4293      	cmp	r3, r2
 8000646:	d14b      	bne.n	80006e0 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000648:	4b28      	ldr	r3, [pc, #160]	; (80006ec <HAL_CAN_MspInit+0xc4>)
 800064a:	69db      	ldr	r3, [r3, #28]
 800064c:	4a27      	ldr	r2, [pc, #156]	; (80006ec <HAL_CAN_MspInit+0xc4>)
 800064e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000652:	61d3      	str	r3, [r2, #28]
 8000654:	4b25      	ldr	r3, [pc, #148]	; (80006ec <HAL_CAN_MspInit+0xc4>)
 8000656:	69db      	ldr	r3, [r3, #28]
 8000658:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800065c:	613b      	str	r3, [r7, #16]
 800065e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000660:	4b22      	ldr	r3, [pc, #136]	; (80006ec <HAL_CAN_MspInit+0xc4>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	4a21      	ldr	r2, [pc, #132]	; (80006ec <HAL_CAN_MspInit+0xc4>)
 8000666:	f043 0308 	orr.w	r3, r3, #8
 800066a:	6193      	str	r3, [r2, #24]
 800066c:	4b1f      	ldr	r3, [pc, #124]	; (80006ec <HAL_CAN_MspInit+0xc4>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	f003 0308 	and.w	r3, r3, #8
 8000674:	60fb      	str	r3, [r7, #12]
 8000676:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000678:	f44f 7380 	mov.w	r3, #256	; 0x100
 800067c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800067e:	2300      	movs	r3, #0
 8000680:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000682:	2300      	movs	r3, #0
 8000684:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000686:	f107 0314 	add.w	r3, r7, #20
 800068a:	4619      	mov	r1, r3
 800068c:	4818      	ldr	r0, [pc, #96]	; (80006f0 <HAL_CAN_MspInit+0xc8>)
 800068e:	f001 fae9 	bl	8001c64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000692:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000696:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000698:	2302      	movs	r3, #2
 800069a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800069c:	2303      	movs	r3, #3
 800069e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a0:	f107 0314 	add.w	r3, r7, #20
 80006a4:	4619      	mov	r1, r3
 80006a6:	4812      	ldr	r0, [pc, #72]	; (80006f0 <HAL_CAN_MspInit+0xc8>)
 80006a8:	f001 fadc 	bl	8001c64 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 80006ac:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <HAL_CAN_MspInit+0xcc>)
 80006ae:	685b      	ldr	r3, [r3, #4]
 80006b0:	627b      	str	r3, [r7, #36]	; 0x24
 80006b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006b4:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80006b8:	627b      	str	r3, [r7, #36]	; 0x24
 80006ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006bc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80006c0:	627b      	str	r3, [r7, #36]	; 0x24
 80006c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c8:	627b      	str	r3, [r7, #36]	; 0x24
 80006ca:	4a0a      	ldr	r2, [pc, #40]	; (80006f4 <HAL_CAN_MspInit+0xcc>)
 80006cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ce:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 1, 0);
 80006d0:	2200      	movs	r2, #0
 80006d2:	2101      	movs	r1, #1
 80006d4:	2014      	movs	r0, #20
 80006d6:	f001 f8a0 	bl	800181a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80006da:	2014      	movs	r0, #20
 80006dc:	f001 f8b9 	bl	8001852 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80006e0:	bf00      	nop
 80006e2:	3728      	adds	r7, #40	; 0x28
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	40006400 	.word	0x40006400
 80006ec:	40021000 	.word	0x40021000
 80006f0:	40010c00 	.word	0x40010c00
 80006f4:	40010000 	.word	0x40010000

080006f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b088      	sub	sp, #32
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000700:	f107 0310 	add.w	r3, r7, #16
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4a41      	ldr	r2, [pc, #260]	; (8000818 <HAL_SPI_MspInit+0x120>)
 8000714:	4293      	cmp	r3, r2
 8000716:	d17b      	bne.n	8000810 <HAL_SPI_MspInit+0x118>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000718:	4b40      	ldr	r3, [pc, #256]	; (800081c <HAL_SPI_MspInit+0x124>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	4a3f      	ldr	r2, [pc, #252]	; (800081c <HAL_SPI_MspInit+0x124>)
 800071e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000722:	6193      	str	r3, [r2, #24]
 8000724:	4b3d      	ldr	r3, [pc, #244]	; (800081c <HAL_SPI_MspInit+0x124>)
 8000726:	699b      	ldr	r3, [r3, #24]
 8000728:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800072c:	60fb      	str	r3, [r7, #12]
 800072e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000730:	4b3a      	ldr	r3, [pc, #232]	; (800081c <HAL_SPI_MspInit+0x124>)
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	4a39      	ldr	r2, [pc, #228]	; (800081c <HAL_SPI_MspInit+0x124>)
 8000736:	f043 0304 	orr.w	r3, r3, #4
 800073a:	6193      	str	r3, [r2, #24]
 800073c:	4b37      	ldr	r3, [pc, #220]	; (800081c <HAL_SPI_MspInit+0x124>)
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	f003 0304 	and.w	r3, r3, #4
 8000744:	60bb      	str	r3, [r7, #8]
 8000746:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000748:	23a0      	movs	r3, #160	; 0xa0
 800074a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800074c:	2300      	movs	r3, #0
 800074e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000750:	2300      	movs	r3, #0
 8000752:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000754:	f107 0310 	add.w	r3, r7, #16
 8000758:	4619      	mov	r1, r3
 800075a:	4831      	ldr	r0, [pc, #196]	; (8000820 <HAL_SPI_MspInit+0x128>)
 800075c:	f001 fa82 	bl	8001c64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000760:	2340      	movs	r3, #64	; 0x40
 8000762:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000764:	2302      	movs	r3, #2
 8000766:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000768:	2303      	movs	r3, #3
 800076a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076c:	f107 0310 	add.w	r3, r7, #16
 8000770:	4619      	mov	r1, r3
 8000772:	482b      	ldr	r0, [pc, #172]	; (8000820 <HAL_SPI_MspInit+0x128>)
 8000774:	f001 fa76 	bl	8001c64 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8000778:	4b2a      	ldr	r3, [pc, #168]	; (8000824 <HAL_SPI_MspInit+0x12c>)
 800077a:	4a2b      	ldr	r2, [pc, #172]	; (8000828 <HAL_SPI_MspInit+0x130>)
 800077c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800077e:	4b29      	ldr	r3, [pc, #164]	; (8000824 <HAL_SPI_MspInit+0x12c>)
 8000780:	2200      	movs	r2, #0
 8000782:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000784:	4b27      	ldr	r3, [pc, #156]	; (8000824 <HAL_SPI_MspInit+0x12c>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800078a:	4b26      	ldr	r3, [pc, #152]	; (8000824 <HAL_SPI_MspInit+0x12c>)
 800078c:	2280      	movs	r2, #128	; 0x80
 800078e:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000790:	4b24      	ldr	r3, [pc, #144]	; (8000824 <HAL_SPI_MspInit+0x12c>)
 8000792:	2200      	movs	r2, #0
 8000794:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000796:	4b23      	ldr	r3, [pc, #140]	; (8000824 <HAL_SPI_MspInit+0x12c>)
 8000798:	2200      	movs	r2, #0
 800079a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800079c:	4b21      	ldr	r3, [pc, #132]	; (8000824 <HAL_SPI_MspInit+0x12c>)
 800079e:	2200      	movs	r2, #0
 80007a0:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80007a2:	4b20      	ldr	r3, [pc, #128]	; (8000824 <HAL_SPI_MspInit+0x12c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80007a8:	481e      	ldr	r0, [pc, #120]	; (8000824 <HAL_SPI_MspInit+0x12c>)
 80007aa:	f001 f86d 	bl	8001888 <HAL_DMA_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <HAL_SPI_MspInit+0xc0>
    {
      Error_Handler();
 80007b4:	f7ff ff00 	bl	80005b8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	4a1a      	ldr	r2, [pc, #104]	; (8000824 <HAL_SPI_MspInit+0x12c>)
 80007bc:	64da      	str	r2, [r3, #76]	; 0x4c
 80007be:	4a19      	ldr	r2, [pc, #100]	; (8000824 <HAL_SPI_MspInit+0x12c>)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80007c4:	4b19      	ldr	r3, [pc, #100]	; (800082c <HAL_SPI_MspInit+0x134>)
 80007c6:	4a1a      	ldr	r2, [pc, #104]	; (8000830 <HAL_SPI_MspInit+0x138>)
 80007c8:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80007ca:	4b18      	ldr	r3, [pc, #96]	; (800082c <HAL_SPI_MspInit+0x134>)
 80007cc:	2210      	movs	r2, #16
 80007ce:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007d0:	4b16      	ldr	r3, [pc, #88]	; (800082c <HAL_SPI_MspInit+0x134>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80007d6:	4b15      	ldr	r3, [pc, #84]	; (800082c <HAL_SPI_MspInit+0x134>)
 80007d8:	2280      	movs	r2, #128	; 0x80
 80007da:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007dc:	4b13      	ldr	r3, [pc, #76]	; (800082c <HAL_SPI_MspInit+0x134>)
 80007de:	2200      	movs	r2, #0
 80007e0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007e2:	4b12      	ldr	r3, [pc, #72]	; (800082c <HAL_SPI_MspInit+0x134>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80007e8:	4b10      	ldr	r3, [pc, #64]	; (800082c <HAL_SPI_MspInit+0x134>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80007ee:	4b0f      	ldr	r3, [pc, #60]	; (800082c <HAL_SPI_MspInit+0x134>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80007f4:	480d      	ldr	r0, [pc, #52]	; (800082c <HAL_SPI_MspInit+0x134>)
 80007f6:	f001 f847 	bl	8001888 <HAL_DMA_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 8000800:	f7ff feda 	bl	80005b8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	4a09      	ldr	r2, [pc, #36]	; (800082c <HAL_SPI_MspInit+0x134>)
 8000808:	649a      	str	r2, [r3, #72]	; 0x48
 800080a:	4a08      	ldr	r2, [pc, #32]	; (800082c <HAL_SPI_MspInit+0x134>)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000810:	bf00      	nop
 8000812:	3720      	adds	r7, #32
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40013000 	.word	0x40013000
 800081c:	40021000 	.word	0x40021000
 8000820:	40010800 	.word	0x40010800
 8000824:	2000010c 	.word	0x2000010c
 8000828:	4002001c 	.word	0x4002001c
 800082c:	20000150 	.word	0x20000150
 8000830:	40020030 	.word	0x40020030

08000834 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b088      	sub	sp, #32
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083c:	f107 0310 	add.w	r3, r7, #16
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4a15      	ldr	r2, [pc, #84]	; (80008a4 <HAL_UART_MspInit+0x70>)
 8000850:	4293      	cmp	r3, r2
 8000852:	d123      	bne.n	800089c <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000854:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <HAL_UART_MspInit+0x74>)
 8000856:	69db      	ldr	r3, [r3, #28]
 8000858:	4a13      	ldr	r2, [pc, #76]	; (80008a8 <HAL_UART_MspInit+0x74>)
 800085a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800085e:	61d3      	str	r3, [r2, #28]
 8000860:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <HAL_UART_MspInit+0x74>)
 8000862:	69db      	ldr	r3, [r3, #28]
 8000864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000868:	60fb      	str	r3, [r7, #12]
 800086a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800086c:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <HAL_UART_MspInit+0x74>)
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	4a0d      	ldr	r2, [pc, #52]	; (80008a8 <HAL_UART_MspInit+0x74>)
 8000872:	f043 0304 	orr.w	r3, r3, #4
 8000876:	6193      	str	r3, [r2, #24]
 8000878:	4b0b      	ldr	r3, [pc, #44]	; (80008a8 <HAL_UART_MspInit+0x74>)
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	f003 0304 	and.w	r3, r3, #4
 8000880:	60bb      	str	r3, [r7, #8]
 8000882:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000884:	230c      	movs	r3, #12
 8000886:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000888:	2302      	movs	r3, #2
 800088a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088c:	2302      	movs	r3, #2
 800088e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000890:	f107 0310 	add.w	r3, r7, #16
 8000894:	4619      	mov	r1, r3
 8000896:	4805      	ldr	r0, [pc, #20]	; (80008ac <HAL_UART_MspInit+0x78>)
 8000898:	f001 f9e4 	bl	8001c64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800089c:	bf00      	nop
 800089e:	3720      	adds	r7, #32
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40004400 	.word	0x40004400
 80008a8:	40021000 	.word	0x40021000
 80008ac:	40010800 	.word	0x40010800

080008b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <NMI_Handler+0x4>
	...

080008b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  static volatile int hardfault_flag;

     hardfault_flag=1;
 80008bc:	4b04      	ldr	r3, [pc, #16]	; (80008d0 <HardFault_Handler+0x18>)
 80008be:	2201      	movs	r2, #1
 80008c0:	601a      	str	r2, [r3, #0]

  while(hardfault_flag==0);
 80008c2:	bf00      	nop
 80008c4:	4b02      	ldr	r3, [pc, #8]	; (80008d0 <HardFault_Handler+0x18>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d0fb      	beq.n	80008c4 <HardFault_Handler+0xc>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008cc:	e7fe      	b.n	80008cc <HardFault_Handler+0x14>
 80008ce:	bf00      	nop
 80008d0:	20000228 	.word	0x20000228

080008d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <MemManage_Handler+0x4>

080008da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008de:	e7fe      	b.n	80008de <BusFault_Handler+0x4>

080008e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <UsageFault_Handler+0x4>

080008e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bc80      	pop	{r7}
 80008f0:	4770      	bx	lr

080008f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bc80      	pop	{r7}
 80008fc:	4770      	bx	lr

080008fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	46bd      	mov	sp, r7
 8000906:	bc80      	pop	{r7}
 8000908:	4770      	bx	lr

0800090a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800090a:	b580      	push	{r7, lr}
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800090e:	f000 f91f 	bl	8000b50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
	...

08000918 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800091c:	4802      	ldr	r0, [pc, #8]	; (8000928 <DMA1_Channel2_IRQHandler+0x10>)
 800091e:	f001 f86d 	bl	80019fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	2000010c 	.word	0x2000010c

0800092c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000930:	4802      	ldr	r0, [pc, #8]	; (800093c <DMA1_Channel3_IRQHandler+0x10>)
 8000932:	f001 f863 	bl	80019fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	20000150 	.word	0x20000150

08000940 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000944:	4802      	ldr	r0, [pc, #8]	; (8000950 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000946:	f000 fc6d 	bl	8001224 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	2000008c 	.word	0x2000008c

08000954 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000958:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800095c:	f001 fb06 	bl	8001f6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}

08000964 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b086      	sub	sp, #24
 8000968:	af00      	add	r7, sp, #0
 800096a:	60f8      	str	r0, [r7, #12]
 800096c:	60b9      	str	r1, [r7, #8]
 800096e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000970:	2300      	movs	r3, #0
 8000972:	617b      	str	r3, [r7, #20]
 8000974:	e00a      	b.n	800098c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000976:	f3af 8000 	nop.w
 800097a:	4601      	mov	r1, r0
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	1c5a      	adds	r2, r3, #1
 8000980:	60ba      	str	r2, [r7, #8]
 8000982:	b2ca      	uxtb	r2, r1
 8000984:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	3301      	adds	r3, #1
 800098a:	617b      	str	r3, [r7, #20]
 800098c:	697a      	ldr	r2, [r7, #20]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	429a      	cmp	r2, r3
 8000992:	dbf0      	blt.n	8000976 <_read+0x12>
  }

  return len;
 8000994:	687b      	ldr	r3, [r7, #4]
}
 8000996:	4618      	mov	r0, r3
 8000998:	3718      	adds	r7, #24
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}

0800099e <_close>:
  }
  return len;
}

int _close(int file)
{
 800099e:	b480      	push	{r7}
 80009a0:	b083      	sub	sp, #12
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bc80      	pop	{r7}
 80009b2:	4770      	bx	lr

080009b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009c4:	605a      	str	r2, [r3, #4]
  return 0;
 80009c6:	2300      	movs	r3, #0
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	370c      	adds	r7, #12
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bc80      	pop	{r7}
 80009d0:	4770      	bx	lr

080009d2 <_isatty>:

int _isatty(int file)
{
 80009d2:	b480      	push	{r7}
 80009d4:	b083      	sub	sp, #12
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009da:	2301      	movs	r3, #1
}
 80009dc:	4618      	mov	r0, r3
 80009de:	370c      	adds	r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bc80      	pop	{r7}
 80009e4:	4770      	bx	lr

080009e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009e6:	b480      	push	{r7}
 80009e8:	b085      	sub	sp, #20
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	60f8      	str	r0, [r7, #12]
 80009ee:	60b9      	str	r1, [r7, #8]
 80009f0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009f2:	2300      	movs	r3, #0
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3714      	adds	r7, #20
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bc80      	pop	{r7}
 80009fc:	4770      	bx	lr
	...

08000a00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b086      	sub	sp, #24
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a08:	4a14      	ldr	r2, [pc, #80]	; (8000a5c <_sbrk+0x5c>)
 8000a0a:	4b15      	ldr	r3, [pc, #84]	; (8000a60 <_sbrk+0x60>)
 8000a0c:	1ad3      	subs	r3, r2, r3
 8000a0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a14:	4b13      	ldr	r3, [pc, #76]	; (8000a64 <_sbrk+0x64>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d102      	bne.n	8000a22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a1c:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <_sbrk+0x64>)
 8000a1e:	4a12      	ldr	r2, [pc, #72]	; (8000a68 <_sbrk+0x68>)
 8000a20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a22:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <_sbrk+0x64>)
 8000a24:	681a      	ldr	r2, [r3, #0]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4413      	add	r3, r2
 8000a2a:	693a      	ldr	r2, [r7, #16]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	d207      	bcs.n	8000a40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a30:	f002 fb0e 	bl	8003050 <__errno>
 8000a34:	4603      	mov	r3, r0
 8000a36:	220c      	movs	r2, #12
 8000a38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a3e:	e009      	b.n	8000a54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a40:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <_sbrk+0x64>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a46:	4b07      	ldr	r3, [pc, #28]	; (8000a64 <_sbrk+0x64>)
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4413      	add	r3, r2
 8000a4e:	4a05      	ldr	r2, [pc, #20]	; (8000a64 <_sbrk+0x64>)
 8000a50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a52:	68fb      	ldr	r3, [r7, #12]
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	3718      	adds	r7, #24
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	20005000 	.word	0x20005000
 8000a60:	00000400 	.word	0x00000400
 8000a64:	2000022c 	.word	0x2000022c
 8000a68:	20000248 	.word	0x20000248

08000a6c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bc80      	pop	{r7}
 8000a76:	4770      	bx	lr

08000a78 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a78:	f7ff fff8 	bl	8000a6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a7c:	480b      	ldr	r0, [pc, #44]	; (8000aac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a7e:	490c      	ldr	r1, [pc, #48]	; (8000ab0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a80:	4a0c      	ldr	r2, [pc, #48]	; (8000ab4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a84:	e002      	b.n	8000a8c <LoopCopyDataInit>

08000a86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a8a:	3304      	adds	r3, #4

08000a8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a90:	d3f9      	bcc.n	8000a86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a92:	4a09      	ldr	r2, [pc, #36]	; (8000ab8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a94:	4c09      	ldr	r4, [pc, #36]	; (8000abc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a98:	e001      	b.n	8000a9e <LoopFillZerobss>

08000a9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a9c:	3204      	adds	r2, #4

08000a9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aa0:	d3fb      	bcc.n	8000a9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aa2:	f002 fadb 	bl	800305c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000aa6:	f7ff fb73 	bl	8000190 <main>
  bx lr
 8000aaa:	4770      	bx	lr
  ldr r0, =_sdata
 8000aac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ab4:	080045a0 	.word	0x080045a0
  ldr r2, =_sbss
 8000ab8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000abc:	20000244 	.word	0x20000244

08000ac0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ac0:	e7fe      	b.n	8000ac0 <ADC1_2_IRQHandler>
	...

08000ac4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ac8:	4b08      	ldr	r3, [pc, #32]	; (8000aec <HAL_Init+0x28>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a07      	ldr	r2, [pc, #28]	; (8000aec <HAL_Init+0x28>)
 8000ace:	f043 0310 	orr.w	r3, r3, #16
 8000ad2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ad4:	2003      	movs	r0, #3
 8000ad6:	f000 fe95 	bl	8001804 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ada:	2000      	movs	r0, #0
 8000adc:	f000 f808 	bl	8000af0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ae0:	f7ff fd70 	bl	80005c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ae4:	2300      	movs	r3, #0
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40022000 	.word	0x40022000

08000af0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000af8:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <HAL_InitTick+0x54>)
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <HAL_InitTick+0x58>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	4619      	mov	r1, r3
 8000b02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f000 fead 	bl	800186e <HAL_SYSTICK_Config>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	e00e      	b.n	8000b3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2b0f      	cmp	r3, #15
 8000b22:	d80a      	bhi.n	8000b3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b24:	2200      	movs	r2, #0
 8000b26:	6879      	ldr	r1, [r7, #4]
 8000b28:	f04f 30ff 	mov.w	r0, #4294967295
 8000b2c:	f000 fe75 	bl	800181a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b30:	4a06      	ldr	r2, [pc, #24]	; (8000b4c <HAL_InitTick+0x5c>)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b36:	2300      	movs	r3, #0
 8000b38:	e000      	b.n	8000b3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20000000 	.word	0x20000000
 8000b48:	20000008 	.word	0x20000008
 8000b4c:	20000004 	.word	0x20000004

08000b50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b54:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <HAL_IncTick+0x1c>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	461a      	mov	r2, r3
 8000b5a:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <HAL_IncTick+0x20>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4413      	add	r3, r2
 8000b60:	4a03      	ldr	r2, [pc, #12]	; (8000b70 <HAL_IncTick+0x20>)
 8000b62:	6013      	str	r3, [r2, #0]
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bc80      	pop	{r7}
 8000b6a:	4770      	bx	lr
 8000b6c:	20000008 	.word	0x20000008
 8000b70:	20000230 	.word	0x20000230

08000b74 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  return uwTick;
 8000b78:	4b02      	ldr	r3, [pc, #8]	; (8000b84 <HAL_GetTick+0x10>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bc80      	pop	{r7}
 8000b82:	4770      	bx	lr
 8000b84:	20000230 	.word	0x20000230

08000b88 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d101      	bne.n	8000b9a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000b96:	2301      	movs	r3, #1
 8000b98:	e0ed      	b.n	8000d76 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d102      	bne.n	8000bac <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000ba6:	6878      	ldr	r0, [r7, #4]
 8000ba8:	f7ff fd3e 	bl	8000628 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f042 0201 	orr.w	r2, r2, #1
 8000bba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000bbc:	f7ff ffda 	bl	8000b74 <HAL_GetTick>
 8000bc0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000bc2:	e012      	b.n	8000bea <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000bc4:	f7ff ffd6 	bl	8000b74 <HAL_GetTick>
 8000bc8:	4602      	mov	r2, r0
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	2b0a      	cmp	r3, #10
 8000bd0:	d90b      	bls.n	8000bea <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bd6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2205      	movs	r2, #5
 8000be2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
 8000be8:	e0c5      	b.n	8000d76 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	f003 0301 	and.w	r3, r3, #1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d0e5      	beq.n	8000bc4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f022 0202 	bic.w	r2, r2, #2
 8000c06:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c08:	f7ff ffb4 	bl	8000b74 <HAL_GetTick>
 8000c0c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c0e:	e012      	b.n	8000c36 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c10:	f7ff ffb0 	bl	8000b74 <HAL_GetTick>
 8000c14:	4602      	mov	r2, r0
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	2b0a      	cmp	r3, #10
 8000c1c:	d90b      	bls.n	8000c36 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c22:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2205      	movs	r2, #5
 8000c2e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	e09f      	b.n	8000d76 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	f003 0302 	and.w	r3, r3, #2
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d1e5      	bne.n	8000c10 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	7e1b      	ldrb	r3, [r3, #24]
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d108      	bne.n	8000c5e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	e007      	b.n	8000c6e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c6c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	7e5b      	ldrb	r3, [r3, #25]
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d108      	bne.n	8000c88 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	e007      	b.n	8000c98 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000c96:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	7e9b      	ldrb	r3, [r3, #26]
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d108      	bne.n	8000cb2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f042 0220 	orr.w	r2, r2, #32
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	e007      	b.n	8000cc2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f022 0220 	bic.w	r2, r2, #32
 8000cc0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	7edb      	ldrb	r3, [r3, #27]
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d108      	bne.n	8000cdc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f022 0210 	bic.w	r2, r2, #16
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	e007      	b.n	8000cec <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f042 0210 	orr.w	r2, r2, #16
 8000cea:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	7f1b      	ldrb	r3, [r3, #28]
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d108      	bne.n	8000d06 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f042 0208 	orr.w	r2, r2, #8
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	e007      	b.n	8000d16 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f022 0208 	bic.w	r2, r2, #8
 8000d14:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	7f5b      	ldrb	r3, [r3, #29]
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d108      	bne.n	8000d30 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f042 0204 	orr.w	r2, r2, #4
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	e007      	b.n	8000d40 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f022 0204 	bic.w	r2, r2, #4
 8000d3e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	689a      	ldr	r2, [r3, #8]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	431a      	orrs	r2, r3
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	691b      	ldr	r3, [r3, #16]
 8000d4e:	431a      	orrs	r2, r3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	695b      	ldr	r3, [r3, #20]
 8000d54:	ea42 0103 	orr.w	r1, r2, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	1e5a      	subs	r2, r3, #1
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	430a      	orrs	r2, r1
 8000d64:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2200      	movs	r2, #0
 8000d6a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2201      	movs	r2, #1
 8000d70:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3710      	adds	r7, #16
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	b087      	sub	sp, #28
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
 8000d86:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d94:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000d96:	7cfb      	ldrb	r3, [r7, #19]
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d003      	beq.n	8000da4 <HAL_CAN_ConfigFilter+0x26>
 8000d9c:	7cfb      	ldrb	r3, [r7, #19]
 8000d9e:	2b02      	cmp	r3, #2
 8000da0:	f040 80aa 	bne.w	8000ef8 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000daa:	f043 0201 	orr.w	r2, r3, #1
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	695b      	ldr	r3, [r3, #20]
 8000db8:	f003 031f 	and.w	r3, r3, #31
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	43db      	mvns	r3, r3
 8000dce:	401a      	ands	r2, r3
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	69db      	ldr	r3, [r3, #28]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d123      	bne.n	8000e26 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	43db      	mvns	r3, r3
 8000de8:	401a      	ands	r2, r3
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000dfc:	683a      	ldr	r2, [r7, #0]
 8000dfe:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000e00:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	3248      	adds	r2, #72	; 0x48
 8000e06:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e1a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e1c:	6979      	ldr	r1, [r7, #20]
 8000e1e:	3348      	adds	r3, #72	; 0x48
 8000e20:	00db      	lsls	r3, r3, #3
 8000e22:	440b      	add	r3, r1
 8000e24:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	69db      	ldr	r3, [r3, #28]
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d122      	bne.n	8000e74 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	431a      	orrs	r2, r3
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e4a:	683a      	ldr	r2, [r7, #0]
 8000e4c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000e4e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	3248      	adds	r2, #72	; 0x48
 8000e54:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	68db      	ldr	r3, [r3, #12]
 8000e62:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e68:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e6a:	6979      	ldr	r1, [r7, #20]
 8000e6c:	3348      	adds	r3, #72	; 0x48
 8000e6e:	00db      	lsls	r3, r3, #3
 8000e70:	440b      	add	r3, r1
 8000e72:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d109      	bne.n	8000e90 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	43db      	mvns	r3, r3
 8000e86:	401a      	ands	r2, r3
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000e8e:	e007      	b.n	8000ea0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	431a      	orrs	r2, r3
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	691b      	ldr	r3, [r3, #16]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d109      	bne.n	8000ebc <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	401a      	ands	r2, r3
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000eba:	e007      	b.n	8000ecc <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	431a      	orrs	r2, r3
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	6a1b      	ldr	r3, [r3, #32]
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d107      	bne.n	8000ee4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	431a      	orrs	r2, r3
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000eea:	f023 0201 	bic.w	r2, r3, #1
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	e006      	b.n	8000f06 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000efc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f04:	2301      	movs	r3, #1
  }
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	371c      	adds	r7, #28
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bc80      	pop	{r7}
 8000f0e:	4770      	bx	lr

08000f10 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d12e      	bne.n	8000f82 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2202      	movs	r2, #2
 8000f28:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f022 0201 	bic.w	r2, r2, #1
 8000f3a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000f3c:	f7ff fe1a 	bl	8000b74 <HAL_GetTick>
 8000f40:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000f42:	e012      	b.n	8000f6a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f44:	f7ff fe16 	bl	8000b74 <HAL_GetTick>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	2b0a      	cmp	r3, #10
 8000f50:	d90b      	bls.n	8000f6a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f56:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2205      	movs	r2, #5
 8000f62:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e012      	b.n	8000f90 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f003 0301 	and.w	r3, r3, #1
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d1e5      	bne.n	8000f44 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	e006      	b.n	8000f90 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f86:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
  }
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3710      	adds	r7, #16
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b087      	sub	sp, #28
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
 8000fa4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fac:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000fae:	7dfb      	ldrb	r3, [r7, #23]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d003      	beq.n	8000fbc <HAL_CAN_GetRxMessage+0x24>
 8000fb4:	7dfb      	ldrb	r3, [r7, #23]
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	f040 8103 	bne.w	80011c2 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d10e      	bne.n	8000fe0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	f003 0303 	and.w	r3, r3, #3
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d116      	bne.n	8000ffe <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e0f7      	b.n	80011d0 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	691b      	ldr	r3, [r3, #16]
 8000fe6:	f003 0303 	and.w	r3, r3, #3
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d107      	bne.n	8000ffe <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e0e8      	b.n	80011d0 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	331b      	adds	r3, #27
 8001006:	011b      	lsls	r3, r3, #4
 8001008:	4413      	add	r3, r2
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f003 0204 	and.w	r2, r3, #4
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d10c      	bne.n	8001036 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	331b      	adds	r3, #27
 8001024:	011b      	lsls	r3, r3, #4
 8001026:	4413      	add	r3, r2
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	0d5b      	lsrs	r3, r3, #21
 800102c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	e00b      	b.n	800104e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	331b      	adds	r3, #27
 800103e:	011b      	lsls	r3, r3, #4
 8001040:	4413      	add	r3, r2
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	08db      	lsrs	r3, r3, #3
 8001046:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	331b      	adds	r3, #27
 8001056:	011b      	lsls	r3, r3, #4
 8001058:	4413      	add	r3, r2
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f003 0202 	and.w	r2, r3, #2
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	331b      	adds	r3, #27
 800106c:	011b      	lsls	r3, r3, #4
 800106e:	4413      	add	r3, r2
 8001070:	3304      	adds	r3, #4
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f003 0308 	and.w	r3, r3, #8
 8001078:	2b00      	cmp	r3, #0
 800107a:	d003      	beq.n	8001084 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2208      	movs	r2, #8
 8001080:	611a      	str	r2, [r3, #16]
 8001082:	e00b      	b.n	800109c <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	331b      	adds	r3, #27
 800108c:	011b      	lsls	r3, r3, #4
 800108e:	4413      	add	r3, r2
 8001090:	3304      	adds	r3, #4
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f003 020f 	and.w	r2, r3, #15
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	331b      	adds	r3, #27
 80010a4:	011b      	lsls	r3, r3, #4
 80010a6:	4413      	add	r3, r2
 80010a8:	3304      	adds	r3, #4
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	0a1b      	lsrs	r3, r3, #8
 80010ae:	b2da      	uxtb	r2, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	331b      	adds	r3, #27
 80010bc:	011b      	lsls	r3, r3, #4
 80010be:	4413      	add	r3, r2
 80010c0:	3304      	adds	r3, #4
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	0c1b      	lsrs	r3, r3, #16
 80010c6:	b29a      	uxth	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	011b      	lsls	r3, r3, #4
 80010d4:	4413      	add	r3, r2
 80010d6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	011b      	lsls	r3, r3, #4
 80010ea:	4413      	add	r3, r2
 80010ec:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	0a1a      	lsrs	r2, r3, #8
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	3301      	adds	r3, #1
 80010f8:	b2d2      	uxtb	r2, r2
 80010fa:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	011b      	lsls	r3, r3, #4
 8001104:	4413      	add	r3, r2
 8001106:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	0c1a      	lsrs	r2, r3, #16
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	3302      	adds	r3, #2
 8001112:	b2d2      	uxtb	r2, r2
 8001114:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	011b      	lsls	r3, r3, #4
 800111e:	4413      	add	r3, r2
 8001120:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	0e1a      	lsrs	r2, r3, #24
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	3303      	adds	r3, #3
 800112c:	b2d2      	uxtb	r2, r2
 800112e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	011b      	lsls	r3, r3, #4
 8001138:	4413      	add	r3, r2
 800113a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	3304      	adds	r3, #4
 8001144:	b2d2      	uxtb	r2, r2
 8001146:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	011b      	lsls	r3, r3, #4
 8001150:	4413      	add	r3, r2
 8001152:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	0a1a      	lsrs	r2, r3, #8
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	3305      	adds	r3, #5
 800115e:	b2d2      	uxtb	r2, r2
 8001160:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	011b      	lsls	r3, r3, #4
 800116a:	4413      	add	r3, r2
 800116c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	0c1a      	lsrs	r2, r3, #16
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	3306      	adds	r3, #6
 8001178:	b2d2      	uxtb	r2, r2
 800117a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	011b      	lsls	r3, r3, #4
 8001184:	4413      	add	r3, r2
 8001186:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	0e1a      	lsrs	r2, r3, #24
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	3307      	adds	r3, #7
 8001192:	b2d2      	uxtb	r2, r2
 8001194:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d108      	bne.n	80011ae <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	68da      	ldr	r2, [r3, #12]
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f042 0220 	orr.w	r2, r2, #32
 80011aa:	60da      	str	r2, [r3, #12]
 80011ac:	e007      	b.n	80011be <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	691a      	ldr	r2, [r3, #16]
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f042 0220 	orr.w	r2, r2, #32
 80011bc:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80011be:	2300      	movs	r3, #0
 80011c0:	e006      	b.n	80011d0 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
  }
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	371c      	adds	r7, #28
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bc80      	pop	{r7}
 80011d8:	4770      	bx	lr

080011da <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80011da:	b480      	push	{r7}
 80011dc:	b085      	sub	sp, #20
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
 80011e2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011ea:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80011ec:	7bfb      	ldrb	r3, [r7, #15]
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d002      	beq.n	80011f8 <HAL_CAN_ActivateNotification+0x1e>
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d109      	bne.n	800120c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	6959      	ldr	r1, [r3, #20]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	683a      	ldr	r2, [r7, #0]
 8001204:	430a      	orrs	r2, r1
 8001206:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001208:	2300      	movs	r3, #0
 800120a:	e006      	b.n	800121a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001210:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001218:	2301      	movs	r3, #1
  }
}
 800121a:	4618      	mov	r0, r3
 800121c:	3714      	adds	r7, #20
 800121e:	46bd      	mov	sp, r7
 8001220:	bc80      	pop	{r7}
 8001222:	4770      	bx	lr

08001224 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08a      	sub	sp, #40	; 0x28
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800122c:	2300      	movs	r3, #0
 800122e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	695b      	ldr	r3, [r3, #20]
 8001236:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	68db      	ldr	r3, [r3, #12]
 800124e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	691b      	ldr	r3, [r3, #16]
 8001256:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	699b      	ldr	r3, [r3, #24]
 800125e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001260:	6a3b      	ldr	r3, [r7, #32]
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	2b00      	cmp	r3, #0
 8001268:	d07c      	beq.n	8001364 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	f003 0301 	and.w	r3, r3, #1
 8001270:	2b00      	cmp	r3, #0
 8001272:	d023      	beq.n	80012bc <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2201      	movs	r2, #1
 800127a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d003      	beq.n	800128e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f000 f983 	bl	8001592 <HAL_CAN_TxMailbox0CompleteCallback>
 800128c:	e016      	b.n	80012bc <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	f003 0304 	and.w	r3, r3, #4
 8001294:	2b00      	cmp	r3, #0
 8001296:	d004      	beq.n	80012a2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800129e:	627b      	str	r3, [r7, #36]	; 0x24
 80012a0:	e00c      	b.n	80012bc <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	f003 0308 	and.w	r3, r3, #8
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d004      	beq.n	80012b6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80012ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012b2:	627b      	str	r3, [r7, #36]	; 0x24
 80012b4:	e002      	b.n	80012bc <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f000 f986 	bl	80015c8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d024      	beq.n	8001310 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012ce:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d003      	beq.n	80012e2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f000 f962 	bl	80015a4 <HAL_CAN_TxMailbox1CompleteCallback>
 80012e0:	e016      	b.n	8001310 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d004      	beq.n	80012f6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80012ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012f2:	627b      	str	r3, [r7, #36]	; 0x24
 80012f4:	e00c      	b.n	8001310 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d004      	beq.n	800130a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001302:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001306:	627b      	str	r3, [r7, #36]	; 0x24
 8001308:	e002      	b.n	8001310 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f000 f965 	bl	80015da <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d024      	beq.n	8001364 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001322:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d003      	beq.n	8001336 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f000 f941 	bl	80015b6 <HAL_CAN_TxMailbox2CompleteCallback>
 8001334:	e016      	b.n	8001364 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d004      	beq.n	800134a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001342:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001346:	627b      	str	r3, [r7, #36]	; 0x24
 8001348:	e00c      	b.n	8001364 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001350:	2b00      	cmp	r3, #0
 8001352:	d004      	beq.n	800135e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001356:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800135a:	627b      	str	r3, [r7, #36]	; 0x24
 800135c:	e002      	b.n	8001364 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f000 f944 	bl	80015ec <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001364:	6a3b      	ldr	r3, [r7, #32]
 8001366:	f003 0308 	and.w	r3, r3, #8
 800136a:	2b00      	cmp	r3, #0
 800136c:	d00c      	beq.n	8001388 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	f003 0310 	and.w	r3, r3, #16
 8001374:	2b00      	cmp	r3, #0
 8001376:	d007      	beq.n	8001388 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800137e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2210      	movs	r2, #16
 8001386:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001388:	6a3b      	ldr	r3, [r7, #32]
 800138a:	f003 0304 	and.w	r3, r3, #4
 800138e:	2b00      	cmp	r3, #0
 8001390:	d00b      	beq.n	80013aa <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	f003 0308 	and.w	r3, r3, #8
 8001398:	2b00      	cmp	r3, #0
 800139a:	d006      	beq.n	80013aa <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2208      	movs	r2, #8
 80013a2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f000 f92a 	bl	80015fe <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80013aa:	6a3b      	ldr	r3, [r7, #32]
 80013ac:	f003 0302 	and.w	r3, r3, #2
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d009      	beq.n	80013c8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	68db      	ldr	r3, [r3, #12]
 80013ba:	f003 0303 	and.w	r3, r3, #3
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d002      	beq.n	80013c8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f7ff f8d6 	bl	8000574 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80013c8:	6a3b      	ldr	r3, [r7, #32]
 80013ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d00c      	beq.n	80013ec <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	f003 0310 	and.w	r3, r3, #16
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d007      	beq.n	80013ec <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80013dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013e2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2210      	movs	r2, #16
 80013ea:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80013ec:	6a3b      	ldr	r3, [r7, #32]
 80013ee:	f003 0320 	and.w	r3, r3, #32
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d00b      	beq.n	800140e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	f003 0308 	and.w	r3, r3, #8
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d006      	beq.n	800140e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2208      	movs	r2, #8
 8001406:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f000 f90a 	bl	8001622 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800140e:	6a3b      	ldr	r3, [r7, #32]
 8001410:	f003 0310 	and.w	r3, r3, #16
 8001414:	2b00      	cmp	r3, #0
 8001416:	d009      	beq.n	800142c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	691b      	ldr	r3, [r3, #16]
 800141e:	f003 0303 	and.w	r3, r3, #3
 8001422:	2b00      	cmp	r3, #0
 8001424:	d002      	beq.n	800142c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f000 f8f2 	bl	8001610 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800142c:	6a3b      	ldr	r3, [r7, #32]
 800142e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d00b      	beq.n	800144e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	f003 0310 	and.w	r3, r3, #16
 800143c:	2b00      	cmp	r3, #0
 800143e:	d006      	beq.n	800144e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2210      	movs	r2, #16
 8001446:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f000 f8f3 	bl	8001634 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800144e:	6a3b      	ldr	r3, [r7, #32]
 8001450:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001454:	2b00      	cmp	r3, #0
 8001456:	d00b      	beq.n	8001470 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	f003 0308 	and.w	r3, r3, #8
 800145e:	2b00      	cmp	r3, #0
 8001460:	d006      	beq.n	8001470 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2208      	movs	r2, #8
 8001468:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f000 f8eb 	bl	8001646 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001470:	6a3b      	ldr	r3, [r7, #32]
 8001472:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d07b      	beq.n	8001572 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	f003 0304 	and.w	r3, r3, #4
 8001480:	2b00      	cmp	r3, #0
 8001482:	d072      	beq.n	800156a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001484:	6a3b      	ldr	r3, [r7, #32]
 8001486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800148a:	2b00      	cmp	r3, #0
 800148c:	d008      	beq.n	80014a0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001494:	2b00      	cmp	r3, #0
 8001496:	d003      	beq.n	80014a0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149a:	f043 0301 	orr.w	r3, r3, #1
 800149e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80014a0:	6a3b      	ldr	r3, [r7, #32]
 80014a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d008      	beq.n	80014bc <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d003      	beq.n	80014bc <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80014b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b6:	f043 0302 	orr.w	r3, r3, #2
 80014ba:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80014bc:	6a3b      	ldr	r3, [r7, #32]
 80014be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d008      	beq.n	80014d8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d003      	beq.n	80014d8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80014d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d2:	f043 0304 	orr.w	r3, r3, #4
 80014d6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80014d8:	6a3b      	ldr	r3, [r7, #32]
 80014da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d043      	beq.n	800156a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d03e      	beq.n	800156a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80014f2:	2b60      	cmp	r3, #96	; 0x60
 80014f4:	d02b      	beq.n	800154e <HAL_CAN_IRQHandler+0x32a>
 80014f6:	2b60      	cmp	r3, #96	; 0x60
 80014f8:	d82e      	bhi.n	8001558 <HAL_CAN_IRQHandler+0x334>
 80014fa:	2b50      	cmp	r3, #80	; 0x50
 80014fc:	d022      	beq.n	8001544 <HAL_CAN_IRQHandler+0x320>
 80014fe:	2b50      	cmp	r3, #80	; 0x50
 8001500:	d82a      	bhi.n	8001558 <HAL_CAN_IRQHandler+0x334>
 8001502:	2b40      	cmp	r3, #64	; 0x40
 8001504:	d019      	beq.n	800153a <HAL_CAN_IRQHandler+0x316>
 8001506:	2b40      	cmp	r3, #64	; 0x40
 8001508:	d826      	bhi.n	8001558 <HAL_CAN_IRQHandler+0x334>
 800150a:	2b30      	cmp	r3, #48	; 0x30
 800150c:	d010      	beq.n	8001530 <HAL_CAN_IRQHandler+0x30c>
 800150e:	2b30      	cmp	r3, #48	; 0x30
 8001510:	d822      	bhi.n	8001558 <HAL_CAN_IRQHandler+0x334>
 8001512:	2b10      	cmp	r3, #16
 8001514:	d002      	beq.n	800151c <HAL_CAN_IRQHandler+0x2f8>
 8001516:	2b20      	cmp	r3, #32
 8001518:	d005      	beq.n	8001526 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800151a:	e01d      	b.n	8001558 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800151c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151e:	f043 0308 	orr.w	r3, r3, #8
 8001522:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001524:	e019      	b.n	800155a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001528:	f043 0310 	orr.w	r3, r3, #16
 800152c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800152e:	e014      	b.n	800155a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001532:	f043 0320 	orr.w	r3, r3, #32
 8001536:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001538:	e00f      	b.n	800155a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800153a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001540:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001542:	e00a      	b.n	800155a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001546:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800154a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800154c:	e005      	b.n	800155a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800154e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001550:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001554:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001556:	e000      	b.n	800155a <HAL_CAN_IRQHandler+0x336>
            break;
 8001558:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	699a      	ldr	r2, [r3, #24]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001568:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2204      	movs	r2, #4
 8001570:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001574:	2b00      	cmp	r3, #0
 8001576:	d008      	beq.n	800158a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800157c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157e:	431a      	orrs	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f000 f867 	bl	8001658 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800158a:	bf00      	nop
 800158c:	3728      	adds	r7, #40	; 0x28
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001592:	b480      	push	{r7}
 8001594:	b083      	sub	sp, #12
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800159a:	bf00      	nop
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	bc80      	pop	{r7}
 80015a2:	4770      	bx	lr

080015a4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bc80      	pop	{r7}
 80015b4:	4770      	bx	lr

080015b6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80015b6:	b480      	push	{r7}
 80015b8:	b083      	sub	sp, #12
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80015be:	bf00      	nop
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bc80      	pop	{r7}
 80015c6:	4770      	bx	lr

080015c8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bc80      	pop	{r7}
 80015d8:	4770      	bx	lr

080015da <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80015da:	b480      	push	{r7}
 80015dc:	b083      	sub	sp, #12
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80015e2:	bf00      	nop
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bc80      	pop	{r7}
 80015ea:	4770      	bx	lr

080015ec <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bc80      	pop	{r7}
 80015fc:	4770      	bx	lr

080015fe <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80015fe:	b480      	push	{r7}
 8001600:	b083      	sub	sp, #12
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001606:	bf00      	nop
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	bc80      	pop	{r7}
 800160e:	4770      	bx	lr

08001610 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	bc80      	pop	{r7}
 8001620:	4770      	bx	lr

08001622 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001622:	b480      	push	{r7}
 8001624:	b083      	sub	sp, #12
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800162a:	bf00      	nop
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr

08001634 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	bc80      	pop	{r7}
 8001644:	4770      	bx	lr

08001646 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001646:	b480      	push	{r7}
 8001648:	b083      	sub	sp, #12
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800164e:	bf00      	nop
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	bc80      	pop	{r7}
 8001656:	4770      	bx	lr

08001658 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	bc80      	pop	{r7}
 8001668:	4770      	bx	lr
	...

0800166c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f003 0307 	and.w	r3, r3, #7
 800167a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800167c:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <__NVIC_SetPriorityGrouping+0x44>)
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001682:	68ba      	ldr	r2, [r7, #8]
 8001684:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001688:	4013      	ands	r3, r2
 800168a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001694:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001698:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800169c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800169e:	4a04      	ldr	r2, [pc, #16]	; (80016b0 <__NVIC_SetPriorityGrouping+0x44>)
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	60d3      	str	r3, [r2, #12]
}
 80016a4:	bf00      	nop
 80016a6:	3714      	adds	r7, #20
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bc80      	pop	{r7}
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	e000ed00 	.word	0xe000ed00

080016b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016b8:	4b04      	ldr	r3, [pc, #16]	; (80016cc <__NVIC_GetPriorityGrouping+0x18>)
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	0a1b      	lsrs	r3, r3, #8
 80016be:	f003 0307 	and.w	r3, r3, #7
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	db0b      	blt.n	80016fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016e2:	79fb      	ldrb	r3, [r7, #7]
 80016e4:	f003 021f 	and.w	r2, r3, #31
 80016e8:	4906      	ldr	r1, [pc, #24]	; (8001704 <__NVIC_EnableIRQ+0x34>)
 80016ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ee:	095b      	lsrs	r3, r3, #5
 80016f0:	2001      	movs	r0, #1
 80016f2:	fa00 f202 	lsl.w	r2, r0, r2
 80016f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016fa:	bf00      	nop
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	bc80      	pop	{r7}
 8001702:	4770      	bx	lr
 8001704:	e000e100 	.word	0xe000e100

08001708 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	6039      	str	r1, [r7, #0]
 8001712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001718:	2b00      	cmp	r3, #0
 800171a:	db0a      	blt.n	8001732 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	b2da      	uxtb	r2, r3
 8001720:	490c      	ldr	r1, [pc, #48]	; (8001754 <__NVIC_SetPriority+0x4c>)
 8001722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001726:	0112      	lsls	r2, r2, #4
 8001728:	b2d2      	uxtb	r2, r2
 800172a:	440b      	add	r3, r1
 800172c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001730:	e00a      	b.n	8001748 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	b2da      	uxtb	r2, r3
 8001736:	4908      	ldr	r1, [pc, #32]	; (8001758 <__NVIC_SetPriority+0x50>)
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	f003 030f 	and.w	r3, r3, #15
 800173e:	3b04      	subs	r3, #4
 8001740:	0112      	lsls	r2, r2, #4
 8001742:	b2d2      	uxtb	r2, r2
 8001744:	440b      	add	r3, r1
 8001746:	761a      	strb	r2, [r3, #24]
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	bc80      	pop	{r7}
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	e000e100 	.word	0xe000e100
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800175c:	b480      	push	{r7}
 800175e:	b089      	sub	sp, #36	; 0x24
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	f1c3 0307 	rsb	r3, r3, #7
 8001776:	2b04      	cmp	r3, #4
 8001778:	bf28      	it	cs
 800177a:	2304      	movcs	r3, #4
 800177c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	3304      	adds	r3, #4
 8001782:	2b06      	cmp	r3, #6
 8001784:	d902      	bls.n	800178c <NVIC_EncodePriority+0x30>
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	3b03      	subs	r3, #3
 800178a:	e000      	b.n	800178e <NVIC_EncodePriority+0x32>
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001790:	f04f 32ff 	mov.w	r2, #4294967295
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	43da      	mvns	r2, r3
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	401a      	ands	r2, r3
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017a4:	f04f 31ff 	mov.w	r1, #4294967295
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	fa01 f303 	lsl.w	r3, r1, r3
 80017ae:	43d9      	mvns	r1, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b4:	4313      	orrs	r3, r2
         );
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3724      	adds	r7, #36	; 0x24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bc80      	pop	{r7}
 80017be:	4770      	bx	lr

080017c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	3b01      	subs	r3, #1
 80017cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017d0:	d301      	bcc.n	80017d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017d2:	2301      	movs	r3, #1
 80017d4:	e00f      	b.n	80017f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017d6:	4a0a      	ldr	r2, [pc, #40]	; (8001800 <SysTick_Config+0x40>)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3b01      	subs	r3, #1
 80017dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017de:	210f      	movs	r1, #15
 80017e0:	f04f 30ff 	mov.w	r0, #4294967295
 80017e4:	f7ff ff90 	bl	8001708 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017e8:	4b05      	ldr	r3, [pc, #20]	; (8001800 <SysTick_Config+0x40>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ee:	4b04      	ldr	r3, [pc, #16]	; (8001800 <SysTick_Config+0x40>)
 80017f0:	2207      	movs	r2, #7
 80017f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	e000e010 	.word	0xe000e010

08001804 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f7ff ff2d 	bl	800166c <__NVIC_SetPriorityGrouping>
}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800181a:	b580      	push	{r7, lr}
 800181c:	b086      	sub	sp, #24
 800181e:	af00      	add	r7, sp, #0
 8001820:	4603      	mov	r3, r0
 8001822:	60b9      	str	r1, [r7, #8]
 8001824:	607a      	str	r2, [r7, #4]
 8001826:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800182c:	f7ff ff42 	bl	80016b4 <__NVIC_GetPriorityGrouping>
 8001830:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	68b9      	ldr	r1, [r7, #8]
 8001836:	6978      	ldr	r0, [r7, #20]
 8001838:	f7ff ff90 	bl	800175c <NVIC_EncodePriority>
 800183c:	4602      	mov	r2, r0
 800183e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001842:	4611      	mov	r1, r2
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff ff5f 	bl	8001708 <__NVIC_SetPriority>
}
 800184a:	bf00      	nop
 800184c:	3718      	adds	r7, #24
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	b082      	sub	sp, #8
 8001856:	af00      	add	r7, sp, #0
 8001858:	4603      	mov	r3, r0
 800185a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800185c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff ff35 	bl	80016d0 <__NVIC_EnableIRQ>
}
 8001866:	bf00      	nop
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b082      	sub	sp, #8
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7ff ffa2 	bl	80017c0 <SysTick_Config>
 800187c:	4603      	mov	r3, r0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
	...

08001888 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001888:	b480      	push	{r7}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001890:	2300      	movs	r3, #0
 8001892:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d101      	bne.n	800189e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e043      	b.n	8001926 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	461a      	mov	r2, r3
 80018a4:	4b22      	ldr	r3, [pc, #136]	; (8001930 <HAL_DMA_Init+0xa8>)
 80018a6:	4413      	add	r3, r2
 80018a8:	4a22      	ldr	r2, [pc, #136]	; (8001934 <HAL_DMA_Init+0xac>)
 80018aa:	fba2 2303 	umull	r2, r3, r2, r3
 80018ae:	091b      	lsrs	r3, r3, #4
 80018b0:	009a      	lsls	r2, r3, #2
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a1f      	ldr	r2, [pc, #124]	; (8001938 <HAL_DMA_Init+0xb0>)
 80018ba:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2202      	movs	r2, #2
 80018c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80018d2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80018d6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80018e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	695b      	ldr	r3, [r3, #20]
 80018f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	69db      	ldr	r3, [r3, #28]
 80018fe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001900:	68fa      	ldr	r2, [r7, #12]
 8001902:	4313      	orrs	r3, r2
 8001904:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	68fa      	ldr	r2, [r7, #12]
 800190c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2201      	movs	r2, #1
 8001918:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3714      	adds	r7, #20
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr
 8001930:	bffdfff8 	.word	0xbffdfff8
 8001934:	cccccccd 	.word	0xcccccccd
 8001938:	40020000 	.word	0x40020000

0800193c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]
 8001948:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800194a:	2300      	movs	r3, #0
 800194c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d101      	bne.n	800195c <HAL_DMA_Start_IT+0x20>
 8001958:	2302      	movs	r3, #2
 800195a:	e04b      	b.n	80019f4 <HAL_DMA_Start_IT+0xb8>
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2201      	movs	r2, #1
 8001960:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800196a:	b2db      	uxtb	r3, r3
 800196c:	2b01      	cmp	r3, #1
 800196e:	d13a      	bne.n	80019e6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2202      	movs	r2, #2
 8001974:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2200      	movs	r2, #0
 800197c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f022 0201 	bic.w	r2, r2, #1
 800198c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	68b9      	ldr	r1, [r7, #8]
 8001994:	68f8      	ldr	r0, [r7, #12]
 8001996:	f000 f937 	bl	8001c08 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d008      	beq.n	80019b4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f042 020e 	orr.w	r2, r2, #14
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	e00f      	b.n	80019d4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f022 0204 	bic.w	r2, r2, #4
 80019c2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f042 020a 	orr.w	r2, r2, #10
 80019d2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f042 0201 	orr.w	r2, r2, #1
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	e005      	b.n	80019f2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80019ee:	2302      	movs	r3, #2
 80019f0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80019f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3718      	adds	r7, #24
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a18:	2204      	movs	r2, #4
 8001a1a:	409a      	lsls	r2, r3
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d04f      	beq.n	8001ac4 <HAL_DMA_IRQHandler+0xc8>
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	f003 0304 	and.w	r3, r3, #4
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d04a      	beq.n	8001ac4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0320 	and.w	r3, r3, #32
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d107      	bne.n	8001a4c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f022 0204 	bic.w	r2, r2, #4
 8001a4a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a66      	ldr	r2, [pc, #408]	; (8001bec <HAL_DMA_IRQHandler+0x1f0>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d029      	beq.n	8001aaa <HAL_DMA_IRQHandler+0xae>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a65      	ldr	r2, [pc, #404]	; (8001bf0 <HAL_DMA_IRQHandler+0x1f4>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d022      	beq.n	8001aa6 <HAL_DMA_IRQHandler+0xaa>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a63      	ldr	r2, [pc, #396]	; (8001bf4 <HAL_DMA_IRQHandler+0x1f8>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d01a      	beq.n	8001aa0 <HAL_DMA_IRQHandler+0xa4>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a62      	ldr	r2, [pc, #392]	; (8001bf8 <HAL_DMA_IRQHandler+0x1fc>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d012      	beq.n	8001a9a <HAL_DMA_IRQHandler+0x9e>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a60      	ldr	r2, [pc, #384]	; (8001bfc <HAL_DMA_IRQHandler+0x200>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d00a      	beq.n	8001a94 <HAL_DMA_IRQHandler+0x98>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a5f      	ldr	r2, [pc, #380]	; (8001c00 <HAL_DMA_IRQHandler+0x204>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d102      	bne.n	8001a8e <HAL_DMA_IRQHandler+0x92>
 8001a88:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a8c:	e00e      	b.n	8001aac <HAL_DMA_IRQHandler+0xb0>
 8001a8e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001a92:	e00b      	b.n	8001aac <HAL_DMA_IRQHandler+0xb0>
 8001a94:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001a98:	e008      	b.n	8001aac <HAL_DMA_IRQHandler+0xb0>
 8001a9a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a9e:	e005      	b.n	8001aac <HAL_DMA_IRQHandler+0xb0>
 8001aa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001aa4:	e002      	b.n	8001aac <HAL_DMA_IRQHandler+0xb0>
 8001aa6:	2340      	movs	r3, #64	; 0x40
 8001aa8:	e000      	b.n	8001aac <HAL_DMA_IRQHandler+0xb0>
 8001aaa:	2304      	movs	r3, #4
 8001aac:	4a55      	ldr	r2, [pc, #340]	; (8001c04 <HAL_DMA_IRQHandler+0x208>)
 8001aae:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	f000 8094 	beq.w	8001be2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001ac2:	e08e      	b.n	8001be2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac8:	2202      	movs	r2, #2
 8001aca:	409a      	lsls	r2, r3
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d056      	beq.n	8001b82 <HAL_DMA_IRQHandler+0x186>
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d051      	beq.n	8001b82 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0320 	and.w	r3, r3, #32
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d10b      	bne.n	8001b04 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f022 020a 	bic.w	r2, r2, #10
 8001afa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a38      	ldr	r2, [pc, #224]	; (8001bec <HAL_DMA_IRQHandler+0x1f0>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d029      	beq.n	8001b62 <HAL_DMA_IRQHandler+0x166>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a37      	ldr	r2, [pc, #220]	; (8001bf0 <HAL_DMA_IRQHandler+0x1f4>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d022      	beq.n	8001b5e <HAL_DMA_IRQHandler+0x162>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a35      	ldr	r2, [pc, #212]	; (8001bf4 <HAL_DMA_IRQHandler+0x1f8>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d01a      	beq.n	8001b58 <HAL_DMA_IRQHandler+0x15c>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a34      	ldr	r2, [pc, #208]	; (8001bf8 <HAL_DMA_IRQHandler+0x1fc>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d012      	beq.n	8001b52 <HAL_DMA_IRQHandler+0x156>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a32      	ldr	r2, [pc, #200]	; (8001bfc <HAL_DMA_IRQHandler+0x200>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d00a      	beq.n	8001b4c <HAL_DMA_IRQHandler+0x150>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a31      	ldr	r2, [pc, #196]	; (8001c00 <HAL_DMA_IRQHandler+0x204>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d102      	bne.n	8001b46 <HAL_DMA_IRQHandler+0x14a>
 8001b40:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001b44:	e00e      	b.n	8001b64 <HAL_DMA_IRQHandler+0x168>
 8001b46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b4a:	e00b      	b.n	8001b64 <HAL_DMA_IRQHandler+0x168>
 8001b4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b50:	e008      	b.n	8001b64 <HAL_DMA_IRQHandler+0x168>
 8001b52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b56:	e005      	b.n	8001b64 <HAL_DMA_IRQHandler+0x168>
 8001b58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b5c:	e002      	b.n	8001b64 <HAL_DMA_IRQHandler+0x168>
 8001b5e:	2320      	movs	r3, #32
 8001b60:	e000      	b.n	8001b64 <HAL_DMA_IRQHandler+0x168>
 8001b62:	2302      	movs	r3, #2
 8001b64:	4a27      	ldr	r2, [pc, #156]	; (8001c04 <HAL_DMA_IRQHandler+0x208>)
 8001b66:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d034      	beq.n	8001be2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001b80:	e02f      	b.n	8001be2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b86:	2208      	movs	r2, #8
 8001b88:	409a      	lsls	r2, r3
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d028      	beq.n	8001be4 <HAL_DMA_IRQHandler+0x1e8>
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	f003 0308 	and.w	r3, r3, #8
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d023      	beq.n	8001be4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f022 020e 	bic.w	r2, r2, #14
 8001baa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bb4:	2101      	movs	r1, #1
 8001bb6:	fa01 f202 	lsl.w	r2, r1, r2
 8001bba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d004      	beq.n	8001be4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	4798      	blx	r3
    }
  }
  return;
 8001be2:	bf00      	nop
 8001be4:	bf00      	nop
}
 8001be6:	3710      	adds	r7, #16
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40020008 	.word	0x40020008
 8001bf0:	4002001c 	.word	0x4002001c
 8001bf4:	40020030 	.word	0x40020030
 8001bf8:	40020044 	.word	0x40020044
 8001bfc:	40020058 	.word	0x40020058
 8001c00:	4002006c 	.word	0x4002006c
 8001c04:	40020000 	.word	0x40020000

08001c08 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
 8001c14:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c1e:	2101      	movs	r1, #1
 8001c20:	fa01 f202 	lsl.w	r2, r1, r2
 8001c24:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	683a      	ldr	r2, [r7, #0]
 8001c2c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	2b10      	cmp	r3, #16
 8001c34:	d108      	bne.n	8001c48 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	68ba      	ldr	r2, [r7, #8]
 8001c44:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001c46:	e007      	b.n	8001c58 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	68ba      	ldr	r2, [r7, #8]
 8001c4e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	60da      	str	r2, [r3, #12]
}
 8001c58:	bf00      	nop
 8001c5a:	3714      	adds	r7, #20
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bc80      	pop	{r7}
 8001c60:	4770      	bx	lr
	...

08001c64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b08b      	sub	sp, #44	; 0x2c
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c72:	2300      	movs	r3, #0
 8001c74:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c76:	e169      	b.n	8001f4c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c78:	2201      	movs	r2, #1
 8001c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	69fa      	ldr	r2, [r7, #28]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	f040 8158 	bne.w	8001f46 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	4a9a      	ldr	r2, [pc, #616]	; (8001f04 <HAL_GPIO_Init+0x2a0>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d05e      	beq.n	8001d5e <HAL_GPIO_Init+0xfa>
 8001ca0:	4a98      	ldr	r2, [pc, #608]	; (8001f04 <HAL_GPIO_Init+0x2a0>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d875      	bhi.n	8001d92 <HAL_GPIO_Init+0x12e>
 8001ca6:	4a98      	ldr	r2, [pc, #608]	; (8001f08 <HAL_GPIO_Init+0x2a4>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d058      	beq.n	8001d5e <HAL_GPIO_Init+0xfa>
 8001cac:	4a96      	ldr	r2, [pc, #600]	; (8001f08 <HAL_GPIO_Init+0x2a4>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d86f      	bhi.n	8001d92 <HAL_GPIO_Init+0x12e>
 8001cb2:	4a96      	ldr	r2, [pc, #600]	; (8001f0c <HAL_GPIO_Init+0x2a8>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d052      	beq.n	8001d5e <HAL_GPIO_Init+0xfa>
 8001cb8:	4a94      	ldr	r2, [pc, #592]	; (8001f0c <HAL_GPIO_Init+0x2a8>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d869      	bhi.n	8001d92 <HAL_GPIO_Init+0x12e>
 8001cbe:	4a94      	ldr	r2, [pc, #592]	; (8001f10 <HAL_GPIO_Init+0x2ac>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d04c      	beq.n	8001d5e <HAL_GPIO_Init+0xfa>
 8001cc4:	4a92      	ldr	r2, [pc, #584]	; (8001f10 <HAL_GPIO_Init+0x2ac>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d863      	bhi.n	8001d92 <HAL_GPIO_Init+0x12e>
 8001cca:	4a92      	ldr	r2, [pc, #584]	; (8001f14 <HAL_GPIO_Init+0x2b0>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d046      	beq.n	8001d5e <HAL_GPIO_Init+0xfa>
 8001cd0:	4a90      	ldr	r2, [pc, #576]	; (8001f14 <HAL_GPIO_Init+0x2b0>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d85d      	bhi.n	8001d92 <HAL_GPIO_Init+0x12e>
 8001cd6:	2b12      	cmp	r3, #18
 8001cd8:	d82a      	bhi.n	8001d30 <HAL_GPIO_Init+0xcc>
 8001cda:	2b12      	cmp	r3, #18
 8001cdc:	d859      	bhi.n	8001d92 <HAL_GPIO_Init+0x12e>
 8001cde:	a201      	add	r2, pc, #4	; (adr r2, 8001ce4 <HAL_GPIO_Init+0x80>)
 8001ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ce4:	08001d5f 	.word	0x08001d5f
 8001ce8:	08001d39 	.word	0x08001d39
 8001cec:	08001d4b 	.word	0x08001d4b
 8001cf0:	08001d8d 	.word	0x08001d8d
 8001cf4:	08001d93 	.word	0x08001d93
 8001cf8:	08001d93 	.word	0x08001d93
 8001cfc:	08001d93 	.word	0x08001d93
 8001d00:	08001d93 	.word	0x08001d93
 8001d04:	08001d93 	.word	0x08001d93
 8001d08:	08001d93 	.word	0x08001d93
 8001d0c:	08001d93 	.word	0x08001d93
 8001d10:	08001d93 	.word	0x08001d93
 8001d14:	08001d93 	.word	0x08001d93
 8001d18:	08001d93 	.word	0x08001d93
 8001d1c:	08001d93 	.word	0x08001d93
 8001d20:	08001d93 	.word	0x08001d93
 8001d24:	08001d93 	.word	0x08001d93
 8001d28:	08001d41 	.word	0x08001d41
 8001d2c:	08001d55 	.word	0x08001d55
 8001d30:	4a79      	ldr	r2, [pc, #484]	; (8001f18 <HAL_GPIO_Init+0x2b4>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d013      	beq.n	8001d5e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d36:	e02c      	b.n	8001d92 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	623b      	str	r3, [r7, #32]
          break;
 8001d3e:	e029      	b.n	8001d94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	3304      	adds	r3, #4
 8001d46:	623b      	str	r3, [r7, #32]
          break;
 8001d48:	e024      	b.n	8001d94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	3308      	adds	r3, #8
 8001d50:	623b      	str	r3, [r7, #32]
          break;
 8001d52:	e01f      	b.n	8001d94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	330c      	adds	r3, #12
 8001d5a:	623b      	str	r3, [r7, #32]
          break;
 8001d5c:	e01a      	b.n	8001d94 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d102      	bne.n	8001d6c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d66:	2304      	movs	r3, #4
 8001d68:	623b      	str	r3, [r7, #32]
          break;
 8001d6a:	e013      	b.n	8001d94 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d105      	bne.n	8001d80 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d74:	2308      	movs	r3, #8
 8001d76:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	69fa      	ldr	r2, [r7, #28]
 8001d7c:	611a      	str	r2, [r3, #16]
          break;
 8001d7e:	e009      	b.n	8001d94 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d80:	2308      	movs	r3, #8
 8001d82:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	69fa      	ldr	r2, [r7, #28]
 8001d88:	615a      	str	r2, [r3, #20]
          break;
 8001d8a:	e003      	b.n	8001d94 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	623b      	str	r3, [r7, #32]
          break;
 8001d90:	e000      	b.n	8001d94 <HAL_GPIO_Init+0x130>
          break;
 8001d92:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	2bff      	cmp	r3, #255	; 0xff
 8001d98:	d801      	bhi.n	8001d9e <HAL_GPIO_Init+0x13a>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	e001      	b.n	8001da2 <HAL_GPIO_Init+0x13e>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	3304      	adds	r3, #4
 8001da2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	2bff      	cmp	r3, #255	; 0xff
 8001da8:	d802      	bhi.n	8001db0 <HAL_GPIO_Init+0x14c>
 8001daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	e002      	b.n	8001db6 <HAL_GPIO_Init+0x152>
 8001db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db2:	3b08      	subs	r3, #8
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	210f      	movs	r1, #15
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	401a      	ands	r2, r3
 8001dc8:	6a39      	ldr	r1, [r7, #32]
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd0:	431a      	orrs	r2, r3
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	f000 80b1 	beq.w	8001f46 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001de4:	4b4d      	ldr	r3, [pc, #308]	; (8001f1c <HAL_GPIO_Init+0x2b8>)
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	4a4c      	ldr	r2, [pc, #304]	; (8001f1c <HAL_GPIO_Init+0x2b8>)
 8001dea:	f043 0301 	orr.w	r3, r3, #1
 8001dee:	6193      	str	r3, [r2, #24]
 8001df0:	4b4a      	ldr	r3, [pc, #296]	; (8001f1c <HAL_GPIO_Init+0x2b8>)
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	f003 0301 	and.w	r3, r3, #1
 8001df8:	60bb      	str	r3, [r7, #8]
 8001dfa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001dfc:	4a48      	ldr	r2, [pc, #288]	; (8001f20 <HAL_GPIO_Init+0x2bc>)
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e00:	089b      	lsrs	r3, r3, #2
 8001e02:	3302      	adds	r3, #2
 8001e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e08:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0c:	f003 0303 	and.w	r3, r3, #3
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	220f      	movs	r2, #15
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	68fa      	ldr	r2, [r7, #12]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a40      	ldr	r2, [pc, #256]	; (8001f24 <HAL_GPIO_Init+0x2c0>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d013      	beq.n	8001e50 <HAL_GPIO_Init+0x1ec>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a3f      	ldr	r2, [pc, #252]	; (8001f28 <HAL_GPIO_Init+0x2c4>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d00d      	beq.n	8001e4c <HAL_GPIO_Init+0x1e8>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	4a3e      	ldr	r2, [pc, #248]	; (8001f2c <HAL_GPIO_Init+0x2c8>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d007      	beq.n	8001e48 <HAL_GPIO_Init+0x1e4>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	4a3d      	ldr	r2, [pc, #244]	; (8001f30 <HAL_GPIO_Init+0x2cc>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d101      	bne.n	8001e44 <HAL_GPIO_Init+0x1e0>
 8001e40:	2303      	movs	r3, #3
 8001e42:	e006      	b.n	8001e52 <HAL_GPIO_Init+0x1ee>
 8001e44:	2304      	movs	r3, #4
 8001e46:	e004      	b.n	8001e52 <HAL_GPIO_Init+0x1ee>
 8001e48:	2302      	movs	r3, #2
 8001e4a:	e002      	b.n	8001e52 <HAL_GPIO_Init+0x1ee>
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e000      	b.n	8001e52 <HAL_GPIO_Init+0x1ee>
 8001e50:	2300      	movs	r3, #0
 8001e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e54:	f002 0203 	and.w	r2, r2, #3
 8001e58:	0092      	lsls	r2, r2, #2
 8001e5a:	4093      	lsls	r3, r2
 8001e5c:	68fa      	ldr	r2, [r7, #12]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e62:	492f      	ldr	r1, [pc, #188]	; (8001f20 <HAL_GPIO_Init+0x2bc>)
 8001e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e66:	089b      	lsrs	r3, r3, #2
 8001e68:	3302      	adds	r3, #2
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d006      	beq.n	8001e8a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e7c:	4b2d      	ldr	r3, [pc, #180]	; (8001f34 <HAL_GPIO_Init+0x2d0>)
 8001e7e:	689a      	ldr	r2, [r3, #8]
 8001e80:	492c      	ldr	r1, [pc, #176]	; (8001f34 <HAL_GPIO_Init+0x2d0>)
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	608b      	str	r3, [r1, #8]
 8001e88:	e006      	b.n	8001e98 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e8a:	4b2a      	ldr	r3, [pc, #168]	; (8001f34 <HAL_GPIO_Init+0x2d0>)
 8001e8c:	689a      	ldr	r2, [r3, #8]
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	43db      	mvns	r3, r3
 8001e92:	4928      	ldr	r1, [pc, #160]	; (8001f34 <HAL_GPIO_Init+0x2d0>)
 8001e94:	4013      	ands	r3, r2
 8001e96:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d006      	beq.n	8001eb2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ea4:	4b23      	ldr	r3, [pc, #140]	; (8001f34 <HAL_GPIO_Init+0x2d0>)
 8001ea6:	68da      	ldr	r2, [r3, #12]
 8001ea8:	4922      	ldr	r1, [pc, #136]	; (8001f34 <HAL_GPIO_Init+0x2d0>)
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	60cb      	str	r3, [r1, #12]
 8001eb0:	e006      	b.n	8001ec0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001eb2:	4b20      	ldr	r3, [pc, #128]	; (8001f34 <HAL_GPIO_Init+0x2d0>)
 8001eb4:	68da      	ldr	r2, [r3, #12]
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	491e      	ldr	r1, [pc, #120]	; (8001f34 <HAL_GPIO_Init+0x2d0>)
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d006      	beq.n	8001eda <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ecc:	4b19      	ldr	r3, [pc, #100]	; (8001f34 <HAL_GPIO_Init+0x2d0>)
 8001ece:	685a      	ldr	r2, [r3, #4]
 8001ed0:	4918      	ldr	r1, [pc, #96]	; (8001f34 <HAL_GPIO_Init+0x2d0>)
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	604b      	str	r3, [r1, #4]
 8001ed8:	e006      	b.n	8001ee8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001eda:	4b16      	ldr	r3, [pc, #88]	; (8001f34 <HAL_GPIO_Init+0x2d0>)
 8001edc:	685a      	ldr	r2, [r3, #4]
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	4914      	ldr	r1, [pc, #80]	; (8001f34 <HAL_GPIO_Init+0x2d0>)
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d021      	beq.n	8001f38 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ef4:	4b0f      	ldr	r3, [pc, #60]	; (8001f34 <HAL_GPIO_Init+0x2d0>)
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	490e      	ldr	r1, [pc, #56]	; (8001f34 <HAL_GPIO_Init+0x2d0>)
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	600b      	str	r3, [r1, #0]
 8001f00:	e021      	b.n	8001f46 <HAL_GPIO_Init+0x2e2>
 8001f02:	bf00      	nop
 8001f04:	10320000 	.word	0x10320000
 8001f08:	10310000 	.word	0x10310000
 8001f0c:	10220000 	.word	0x10220000
 8001f10:	10210000 	.word	0x10210000
 8001f14:	10120000 	.word	0x10120000
 8001f18:	10110000 	.word	0x10110000
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	40010000 	.word	0x40010000
 8001f24:	40010800 	.word	0x40010800
 8001f28:	40010c00 	.word	0x40010c00
 8001f2c:	40011000 	.word	0x40011000
 8001f30:	40011400 	.word	0x40011400
 8001f34:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f38:	4b0b      	ldr	r3, [pc, #44]	; (8001f68 <HAL_GPIO_Init+0x304>)
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	43db      	mvns	r3, r3
 8001f40:	4909      	ldr	r1, [pc, #36]	; (8001f68 <HAL_GPIO_Init+0x304>)
 8001f42:	4013      	ands	r3, r2
 8001f44:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f48:	3301      	adds	r3, #1
 8001f4a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f52:	fa22 f303 	lsr.w	r3, r2, r3
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	f47f ae8e 	bne.w	8001c78 <HAL_GPIO_Init+0x14>
  }
}
 8001f5c:	bf00      	nop
 8001f5e:	bf00      	nop
 8001f60:	372c      	adds	r7, #44	; 0x2c
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bc80      	pop	{r7}
 8001f66:	4770      	bx	lr
 8001f68:	40010400 	.word	0x40010400

08001f6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f76:	4b08      	ldr	r3, [pc, #32]	; (8001f98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f78:	695a      	ldr	r2, [r3, #20]
 8001f7a:	88fb      	ldrh	r3, [r7, #6]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d006      	beq.n	8001f90 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f82:	4a05      	ldr	r2, [pc, #20]	; (8001f98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f84:	88fb      	ldrh	r3, [r7, #6]
 8001f86:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f88:	88fb      	ldrh	r3, [r7, #6]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f000 f806 	bl	8001f9c <HAL_GPIO_EXTI_Callback>
  }
}
 8001f90:	bf00      	nop
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40010400 	.word	0x40010400

08001f9c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001fa6:	bf00      	nop
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bc80      	pop	{r7}
 8001fae:	4770      	bx	lr

08001fb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d101      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e272      	b.n	80024a8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f000 8087 	beq.w	80020de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fd0:	4b92      	ldr	r3, [pc, #584]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f003 030c 	and.w	r3, r3, #12
 8001fd8:	2b04      	cmp	r3, #4
 8001fda:	d00c      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fdc:	4b8f      	ldr	r3, [pc, #572]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f003 030c 	and.w	r3, r3, #12
 8001fe4:	2b08      	cmp	r3, #8
 8001fe6:	d112      	bne.n	800200e <HAL_RCC_OscConfig+0x5e>
 8001fe8:	4b8c      	ldr	r3, [pc, #560]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ff4:	d10b      	bne.n	800200e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ff6:	4b89      	ldr	r3, [pc, #548]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d06c      	beq.n	80020dc <HAL_RCC_OscConfig+0x12c>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d168      	bne.n	80020dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e24c      	b.n	80024a8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002016:	d106      	bne.n	8002026 <HAL_RCC_OscConfig+0x76>
 8002018:	4b80      	ldr	r3, [pc, #512]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a7f      	ldr	r2, [pc, #508]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 800201e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002022:	6013      	str	r3, [r2, #0]
 8002024:	e02e      	b.n	8002084 <HAL_RCC_OscConfig+0xd4>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d10c      	bne.n	8002048 <HAL_RCC_OscConfig+0x98>
 800202e:	4b7b      	ldr	r3, [pc, #492]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a7a      	ldr	r2, [pc, #488]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 8002034:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002038:	6013      	str	r3, [r2, #0]
 800203a:	4b78      	ldr	r3, [pc, #480]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a77      	ldr	r2, [pc, #476]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 8002040:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002044:	6013      	str	r3, [r2, #0]
 8002046:	e01d      	b.n	8002084 <HAL_RCC_OscConfig+0xd4>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002050:	d10c      	bne.n	800206c <HAL_RCC_OscConfig+0xbc>
 8002052:	4b72      	ldr	r3, [pc, #456]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a71      	ldr	r2, [pc, #452]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 8002058:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800205c:	6013      	str	r3, [r2, #0]
 800205e:	4b6f      	ldr	r3, [pc, #444]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a6e      	ldr	r2, [pc, #440]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 8002064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002068:	6013      	str	r3, [r2, #0]
 800206a:	e00b      	b.n	8002084 <HAL_RCC_OscConfig+0xd4>
 800206c:	4b6b      	ldr	r3, [pc, #428]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a6a      	ldr	r2, [pc, #424]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 8002072:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002076:	6013      	str	r3, [r2, #0]
 8002078:	4b68      	ldr	r3, [pc, #416]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a67      	ldr	r2, [pc, #412]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 800207e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002082:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d013      	beq.n	80020b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208c:	f7fe fd72 	bl	8000b74 <HAL_GetTick>
 8002090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002092:	e008      	b.n	80020a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002094:	f7fe fd6e 	bl	8000b74 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b64      	cmp	r3, #100	; 0x64
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e200      	b.n	80024a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020a6:	4b5d      	ldr	r3, [pc, #372]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d0f0      	beq.n	8002094 <HAL_RCC_OscConfig+0xe4>
 80020b2:	e014      	b.n	80020de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b4:	f7fe fd5e 	bl	8000b74 <HAL_GetTick>
 80020b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ba:	e008      	b.n	80020ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020bc:	f7fe fd5a 	bl	8000b74 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b64      	cmp	r3, #100	; 0x64
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e1ec      	b.n	80024a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ce:	4b53      	ldr	r3, [pc, #332]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1f0      	bne.n	80020bc <HAL_RCC_OscConfig+0x10c>
 80020da:	e000      	b.n	80020de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d063      	beq.n	80021b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020ea:	4b4c      	ldr	r3, [pc, #304]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f003 030c 	and.w	r3, r3, #12
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d00b      	beq.n	800210e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020f6:	4b49      	ldr	r3, [pc, #292]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f003 030c 	and.w	r3, r3, #12
 80020fe:	2b08      	cmp	r3, #8
 8002100:	d11c      	bne.n	800213c <HAL_RCC_OscConfig+0x18c>
 8002102:	4b46      	ldr	r3, [pc, #280]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d116      	bne.n	800213c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800210e:	4b43      	ldr	r3, [pc, #268]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d005      	beq.n	8002126 <HAL_RCC_OscConfig+0x176>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d001      	beq.n	8002126 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e1c0      	b.n	80024a8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002126:	4b3d      	ldr	r3, [pc, #244]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	4939      	ldr	r1, [pc, #228]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 8002136:	4313      	orrs	r3, r2
 8002138:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800213a:	e03a      	b.n	80021b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d020      	beq.n	8002186 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002144:	4b36      	ldr	r3, [pc, #216]	; (8002220 <HAL_RCC_OscConfig+0x270>)
 8002146:	2201      	movs	r2, #1
 8002148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800214a:	f7fe fd13 	bl	8000b74 <HAL_GetTick>
 800214e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002150:	e008      	b.n	8002164 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002152:	f7fe fd0f 	bl	8000b74 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d901      	bls.n	8002164 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e1a1      	b.n	80024a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002164:	4b2d      	ldr	r3, [pc, #180]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d0f0      	beq.n	8002152 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002170:	4b2a      	ldr	r3, [pc, #168]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	695b      	ldr	r3, [r3, #20]
 800217c:	00db      	lsls	r3, r3, #3
 800217e:	4927      	ldr	r1, [pc, #156]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 8002180:	4313      	orrs	r3, r2
 8002182:	600b      	str	r3, [r1, #0]
 8002184:	e015      	b.n	80021b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002186:	4b26      	ldr	r3, [pc, #152]	; (8002220 <HAL_RCC_OscConfig+0x270>)
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800218c:	f7fe fcf2 	bl	8000b74 <HAL_GetTick>
 8002190:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002194:	f7fe fcee 	bl	8000b74 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e180      	b.n	80024a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021a6:	4b1d      	ldr	r3, [pc, #116]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1f0      	bne.n	8002194 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0308 	and.w	r3, r3, #8
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d03a      	beq.n	8002234 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d019      	beq.n	80021fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021c6:	4b17      	ldr	r3, [pc, #92]	; (8002224 <HAL_RCC_OscConfig+0x274>)
 80021c8:	2201      	movs	r2, #1
 80021ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021cc:	f7fe fcd2 	bl	8000b74 <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021d2:	e008      	b.n	80021e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021d4:	f7fe fcce 	bl	8000b74 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e160      	b.n	80024a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021e6:	4b0d      	ldr	r3, [pc, #52]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 80021e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d0f0      	beq.n	80021d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80021f2:	2001      	movs	r0, #1
 80021f4:	f000 face 	bl	8002794 <RCC_Delay>
 80021f8:	e01c      	b.n	8002234 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021fa:	4b0a      	ldr	r3, [pc, #40]	; (8002224 <HAL_RCC_OscConfig+0x274>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002200:	f7fe fcb8 	bl	8000b74 <HAL_GetTick>
 8002204:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002206:	e00f      	b.n	8002228 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002208:	f7fe fcb4 	bl	8000b74 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b02      	cmp	r3, #2
 8002214:	d908      	bls.n	8002228 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e146      	b.n	80024a8 <HAL_RCC_OscConfig+0x4f8>
 800221a:	bf00      	nop
 800221c:	40021000 	.word	0x40021000
 8002220:	42420000 	.word	0x42420000
 8002224:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002228:	4b92      	ldr	r3, [pc, #584]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 800222a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d1e9      	bne.n	8002208 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0304 	and.w	r3, r3, #4
 800223c:	2b00      	cmp	r3, #0
 800223e:	f000 80a6 	beq.w	800238e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002242:	2300      	movs	r3, #0
 8002244:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002246:	4b8b      	ldr	r3, [pc, #556]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 8002248:	69db      	ldr	r3, [r3, #28]
 800224a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d10d      	bne.n	800226e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002252:	4b88      	ldr	r3, [pc, #544]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 8002254:	69db      	ldr	r3, [r3, #28]
 8002256:	4a87      	ldr	r2, [pc, #540]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 8002258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800225c:	61d3      	str	r3, [r2, #28]
 800225e:	4b85      	ldr	r3, [pc, #532]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 8002260:	69db      	ldr	r3, [r3, #28]
 8002262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002266:	60bb      	str	r3, [r7, #8]
 8002268:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800226a:	2301      	movs	r3, #1
 800226c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800226e:	4b82      	ldr	r3, [pc, #520]	; (8002478 <HAL_RCC_OscConfig+0x4c8>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002276:	2b00      	cmp	r3, #0
 8002278:	d118      	bne.n	80022ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800227a:	4b7f      	ldr	r3, [pc, #508]	; (8002478 <HAL_RCC_OscConfig+0x4c8>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a7e      	ldr	r2, [pc, #504]	; (8002478 <HAL_RCC_OscConfig+0x4c8>)
 8002280:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002284:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002286:	f7fe fc75 	bl	8000b74 <HAL_GetTick>
 800228a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800228c:	e008      	b.n	80022a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800228e:	f7fe fc71 	bl	8000b74 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b64      	cmp	r3, #100	; 0x64
 800229a:	d901      	bls.n	80022a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e103      	b.n	80024a8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a0:	4b75      	ldr	r3, [pc, #468]	; (8002478 <HAL_RCC_OscConfig+0x4c8>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d0f0      	beq.n	800228e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d106      	bne.n	80022c2 <HAL_RCC_OscConfig+0x312>
 80022b4:	4b6f      	ldr	r3, [pc, #444]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 80022b6:	6a1b      	ldr	r3, [r3, #32]
 80022b8:	4a6e      	ldr	r2, [pc, #440]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 80022ba:	f043 0301 	orr.w	r3, r3, #1
 80022be:	6213      	str	r3, [r2, #32]
 80022c0:	e02d      	b.n	800231e <HAL_RCC_OscConfig+0x36e>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d10c      	bne.n	80022e4 <HAL_RCC_OscConfig+0x334>
 80022ca:	4b6a      	ldr	r3, [pc, #424]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 80022cc:	6a1b      	ldr	r3, [r3, #32]
 80022ce:	4a69      	ldr	r2, [pc, #420]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 80022d0:	f023 0301 	bic.w	r3, r3, #1
 80022d4:	6213      	str	r3, [r2, #32]
 80022d6:	4b67      	ldr	r3, [pc, #412]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 80022d8:	6a1b      	ldr	r3, [r3, #32]
 80022da:	4a66      	ldr	r2, [pc, #408]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 80022dc:	f023 0304 	bic.w	r3, r3, #4
 80022e0:	6213      	str	r3, [r2, #32]
 80022e2:	e01c      	b.n	800231e <HAL_RCC_OscConfig+0x36e>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	2b05      	cmp	r3, #5
 80022ea:	d10c      	bne.n	8002306 <HAL_RCC_OscConfig+0x356>
 80022ec:	4b61      	ldr	r3, [pc, #388]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 80022ee:	6a1b      	ldr	r3, [r3, #32]
 80022f0:	4a60      	ldr	r2, [pc, #384]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 80022f2:	f043 0304 	orr.w	r3, r3, #4
 80022f6:	6213      	str	r3, [r2, #32]
 80022f8:	4b5e      	ldr	r3, [pc, #376]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 80022fa:	6a1b      	ldr	r3, [r3, #32]
 80022fc:	4a5d      	ldr	r2, [pc, #372]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 80022fe:	f043 0301 	orr.w	r3, r3, #1
 8002302:	6213      	str	r3, [r2, #32]
 8002304:	e00b      	b.n	800231e <HAL_RCC_OscConfig+0x36e>
 8002306:	4b5b      	ldr	r3, [pc, #364]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 8002308:	6a1b      	ldr	r3, [r3, #32]
 800230a:	4a5a      	ldr	r2, [pc, #360]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 800230c:	f023 0301 	bic.w	r3, r3, #1
 8002310:	6213      	str	r3, [r2, #32]
 8002312:	4b58      	ldr	r3, [pc, #352]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 8002314:	6a1b      	ldr	r3, [r3, #32]
 8002316:	4a57      	ldr	r2, [pc, #348]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 8002318:	f023 0304 	bic.w	r3, r3, #4
 800231c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d015      	beq.n	8002352 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002326:	f7fe fc25 	bl	8000b74 <HAL_GetTick>
 800232a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800232c:	e00a      	b.n	8002344 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800232e:	f7fe fc21 	bl	8000b74 <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	f241 3288 	movw	r2, #5000	; 0x1388
 800233c:	4293      	cmp	r3, r2
 800233e:	d901      	bls.n	8002344 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e0b1      	b.n	80024a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002344:	4b4b      	ldr	r3, [pc, #300]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 8002346:	6a1b      	ldr	r3, [r3, #32]
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d0ee      	beq.n	800232e <HAL_RCC_OscConfig+0x37e>
 8002350:	e014      	b.n	800237c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002352:	f7fe fc0f 	bl	8000b74 <HAL_GetTick>
 8002356:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002358:	e00a      	b.n	8002370 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800235a:	f7fe fc0b 	bl	8000b74 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	f241 3288 	movw	r2, #5000	; 0x1388
 8002368:	4293      	cmp	r3, r2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e09b      	b.n	80024a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002370:	4b40      	ldr	r3, [pc, #256]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 8002372:	6a1b      	ldr	r3, [r3, #32]
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d1ee      	bne.n	800235a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800237c:	7dfb      	ldrb	r3, [r7, #23]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d105      	bne.n	800238e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002382:	4b3c      	ldr	r3, [pc, #240]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 8002384:	69db      	ldr	r3, [r3, #28]
 8002386:	4a3b      	ldr	r2, [pc, #236]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 8002388:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800238c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	69db      	ldr	r3, [r3, #28]
 8002392:	2b00      	cmp	r3, #0
 8002394:	f000 8087 	beq.w	80024a6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002398:	4b36      	ldr	r3, [pc, #216]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f003 030c 	and.w	r3, r3, #12
 80023a0:	2b08      	cmp	r3, #8
 80023a2:	d061      	beq.n	8002468 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	69db      	ldr	r3, [r3, #28]
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d146      	bne.n	800243a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ac:	4b33      	ldr	r3, [pc, #204]	; (800247c <HAL_RCC_OscConfig+0x4cc>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b2:	f7fe fbdf 	bl	8000b74 <HAL_GetTick>
 80023b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023b8:	e008      	b.n	80023cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ba:	f7fe fbdb 	bl	8000b74 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d901      	bls.n	80023cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e06d      	b.n	80024a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023cc:	4b29      	ldr	r3, [pc, #164]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d1f0      	bne.n	80023ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a1b      	ldr	r3, [r3, #32]
 80023dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023e0:	d108      	bne.n	80023f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023e2:	4b24      	ldr	r3, [pc, #144]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	4921      	ldr	r1, [pc, #132]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023f4:	4b1f      	ldr	r3, [pc, #124]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a19      	ldr	r1, [r3, #32]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002404:	430b      	orrs	r3, r1
 8002406:	491b      	ldr	r1, [pc, #108]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 8002408:	4313      	orrs	r3, r2
 800240a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800240c:	4b1b      	ldr	r3, [pc, #108]	; (800247c <HAL_RCC_OscConfig+0x4cc>)
 800240e:	2201      	movs	r2, #1
 8002410:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002412:	f7fe fbaf 	bl	8000b74 <HAL_GetTick>
 8002416:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002418:	e008      	b.n	800242c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800241a:	f7fe fbab 	bl	8000b74 <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	2b02      	cmp	r3, #2
 8002426:	d901      	bls.n	800242c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e03d      	b.n	80024a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800242c:	4b11      	ldr	r3, [pc, #68]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d0f0      	beq.n	800241a <HAL_RCC_OscConfig+0x46a>
 8002438:	e035      	b.n	80024a6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800243a:	4b10      	ldr	r3, [pc, #64]	; (800247c <HAL_RCC_OscConfig+0x4cc>)
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002440:	f7fe fb98 	bl	8000b74 <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002448:	f7fe fb94 	bl	8000b74 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e026      	b.n	80024a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800245a:	4b06      	ldr	r3, [pc, #24]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1f0      	bne.n	8002448 <HAL_RCC_OscConfig+0x498>
 8002466:	e01e      	b.n	80024a6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	69db      	ldr	r3, [r3, #28]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d107      	bne.n	8002480 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e019      	b.n	80024a8 <HAL_RCC_OscConfig+0x4f8>
 8002474:	40021000 	.word	0x40021000
 8002478:	40007000 	.word	0x40007000
 800247c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002480:	4b0b      	ldr	r3, [pc, #44]	; (80024b0 <HAL_RCC_OscConfig+0x500>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a1b      	ldr	r3, [r3, #32]
 8002490:	429a      	cmp	r2, r3
 8002492:	d106      	bne.n	80024a2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800249e:	429a      	cmp	r2, r3
 80024a0:	d001      	beq.n	80024a6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e000      	b.n	80024a8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3718      	adds	r7, #24
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	40021000 	.word	0x40021000

080024b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d101      	bne.n	80024c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e0d0      	b.n	800266a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024c8:	4b6a      	ldr	r3, [pc, #424]	; (8002674 <HAL_RCC_ClockConfig+0x1c0>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0307 	and.w	r3, r3, #7
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d910      	bls.n	80024f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024d6:	4b67      	ldr	r3, [pc, #412]	; (8002674 <HAL_RCC_ClockConfig+0x1c0>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f023 0207 	bic.w	r2, r3, #7
 80024de:	4965      	ldr	r1, [pc, #404]	; (8002674 <HAL_RCC_ClockConfig+0x1c0>)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024e6:	4b63      	ldr	r3, [pc, #396]	; (8002674 <HAL_RCC_ClockConfig+0x1c0>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0307 	and.w	r3, r3, #7
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d001      	beq.n	80024f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e0b8      	b.n	800266a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d020      	beq.n	8002546 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0304 	and.w	r3, r3, #4
 800250c:	2b00      	cmp	r3, #0
 800250e:	d005      	beq.n	800251c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002510:	4b59      	ldr	r3, [pc, #356]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	4a58      	ldr	r2, [pc, #352]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 8002516:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800251a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0308 	and.w	r3, r3, #8
 8002524:	2b00      	cmp	r3, #0
 8002526:	d005      	beq.n	8002534 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002528:	4b53      	ldr	r3, [pc, #332]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	4a52      	ldr	r2, [pc, #328]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 800252e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002532:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002534:	4b50      	ldr	r3, [pc, #320]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	494d      	ldr	r1, [pc, #308]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 8002542:	4313      	orrs	r3, r2
 8002544:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b00      	cmp	r3, #0
 8002550:	d040      	beq.n	80025d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d107      	bne.n	800256a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800255a:	4b47      	ldr	r3, [pc, #284]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d115      	bne.n	8002592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e07f      	b.n	800266a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	2b02      	cmp	r3, #2
 8002570:	d107      	bne.n	8002582 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002572:	4b41      	ldr	r3, [pc, #260]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d109      	bne.n	8002592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e073      	b.n	800266a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002582:	4b3d      	ldr	r3, [pc, #244]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e06b      	b.n	800266a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002592:	4b39      	ldr	r3, [pc, #228]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f023 0203 	bic.w	r2, r3, #3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	4936      	ldr	r1, [pc, #216]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025a4:	f7fe fae6 	bl	8000b74 <HAL_GetTick>
 80025a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025aa:	e00a      	b.n	80025c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025ac:	f7fe fae2 	bl	8000b74 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e053      	b.n	800266a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025c2:	4b2d      	ldr	r3, [pc, #180]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f003 020c 	and.w	r2, r3, #12
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d1eb      	bne.n	80025ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025d4:	4b27      	ldr	r3, [pc, #156]	; (8002674 <HAL_RCC_ClockConfig+0x1c0>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0307 	and.w	r3, r3, #7
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d210      	bcs.n	8002604 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025e2:	4b24      	ldr	r3, [pc, #144]	; (8002674 <HAL_RCC_ClockConfig+0x1c0>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f023 0207 	bic.w	r2, r3, #7
 80025ea:	4922      	ldr	r1, [pc, #136]	; (8002674 <HAL_RCC_ClockConfig+0x1c0>)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025f2:	4b20      	ldr	r3, [pc, #128]	; (8002674 <HAL_RCC_ClockConfig+0x1c0>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0307 	and.w	r3, r3, #7
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d001      	beq.n	8002604 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e032      	b.n	800266a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0304 	and.w	r3, r3, #4
 800260c:	2b00      	cmp	r3, #0
 800260e:	d008      	beq.n	8002622 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002610:	4b19      	ldr	r3, [pc, #100]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	4916      	ldr	r1, [pc, #88]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 800261e:	4313      	orrs	r3, r2
 8002620:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0308 	and.w	r3, r3, #8
 800262a:	2b00      	cmp	r3, #0
 800262c:	d009      	beq.n	8002642 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800262e:	4b12      	ldr	r3, [pc, #72]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	490e      	ldr	r1, [pc, #56]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 800263e:	4313      	orrs	r3, r2
 8002640:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002642:	f000 f821 	bl	8002688 <HAL_RCC_GetSysClockFreq>
 8002646:	4602      	mov	r2, r0
 8002648:	4b0b      	ldr	r3, [pc, #44]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	091b      	lsrs	r3, r3, #4
 800264e:	f003 030f 	and.w	r3, r3, #15
 8002652:	490a      	ldr	r1, [pc, #40]	; (800267c <HAL_RCC_ClockConfig+0x1c8>)
 8002654:	5ccb      	ldrb	r3, [r1, r3]
 8002656:	fa22 f303 	lsr.w	r3, r2, r3
 800265a:	4a09      	ldr	r2, [pc, #36]	; (8002680 <HAL_RCC_ClockConfig+0x1cc>)
 800265c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800265e:	4b09      	ldr	r3, [pc, #36]	; (8002684 <HAL_RCC_ClockConfig+0x1d0>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4618      	mov	r0, r3
 8002664:	f7fe fa44 	bl	8000af0 <HAL_InitTick>

  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	40022000 	.word	0x40022000
 8002678:	40021000 	.word	0x40021000
 800267c:	080044d4 	.word	0x080044d4
 8002680:	20000000 	.word	0x20000000
 8002684:	20000004 	.word	0x20000004

08002688 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002688:	b480      	push	{r7}
 800268a:	b087      	sub	sp, #28
 800268c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800268e:	2300      	movs	r3, #0
 8002690:	60fb      	str	r3, [r7, #12]
 8002692:	2300      	movs	r3, #0
 8002694:	60bb      	str	r3, [r7, #8]
 8002696:	2300      	movs	r3, #0
 8002698:	617b      	str	r3, [r7, #20]
 800269a:	2300      	movs	r3, #0
 800269c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800269e:	2300      	movs	r3, #0
 80026a0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80026a2:	4b1e      	ldr	r3, [pc, #120]	; (800271c <HAL_RCC_GetSysClockFreq+0x94>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f003 030c 	and.w	r3, r3, #12
 80026ae:	2b04      	cmp	r3, #4
 80026b0:	d002      	beq.n	80026b8 <HAL_RCC_GetSysClockFreq+0x30>
 80026b2:	2b08      	cmp	r3, #8
 80026b4:	d003      	beq.n	80026be <HAL_RCC_GetSysClockFreq+0x36>
 80026b6:	e027      	b.n	8002708 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026b8:	4b19      	ldr	r3, [pc, #100]	; (8002720 <HAL_RCC_GetSysClockFreq+0x98>)
 80026ba:	613b      	str	r3, [r7, #16]
      break;
 80026bc:	e027      	b.n	800270e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	0c9b      	lsrs	r3, r3, #18
 80026c2:	f003 030f 	and.w	r3, r3, #15
 80026c6:	4a17      	ldr	r2, [pc, #92]	; (8002724 <HAL_RCC_GetSysClockFreq+0x9c>)
 80026c8:	5cd3      	ldrb	r3, [r2, r3]
 80026ca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d010      	beq.n	80026f8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80026d6:	4b11      	ldr	r3, [pc, #68]	; (800271c <HAL_RCC_GetSysClockFreq+0x94>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	0c5b      	lsrs	r3, r3, #17
 80026dc:	f003 0301 	and.w	r3, r3, #1
 80026e0:	4a11      	ldr	r2, [pc, #68]	; (8002728 <HAL_RCC_GetSysClockFreq+0xa0>)
 80026e2:	5cd3      	ldrb	r3, [r2, r3]
 80026e4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a0d      	ldr	r2, [pc, #52]	; (8002720 <HAL_RCC_GetSysClockFreq+0x98>)
 80026ea:	fb03 f202 	mul.w	r2, r3, r2
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f4:	617b      	str	r3, [r7, #20]
 80026f6:	e004      	b.n	8002702 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4a0c      	ldr	r2, [pc, #48]	; (800272c <HAL_RCC_GetSysClockFreq+0xa4>)
 80026fc:	fb02 f303 	mul.w	r3, r2, r3
 8002700:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	613b      	str	r3, [r7, #16]
      break;
 8002706:	e002      	b.n	800270e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002708:	4b05      	ldr	r3, [pc, #20]	; (8002720 <HAL_RCC_GetSysClockFreq+0x98>)
 800270a:	613b      	str	r3, [r7, #16]
      break;
 800270c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800270e:	693b      	ldr	r3, [r7, #16]
}
 8002710:	4618      	mov	r0, r3
 8002712:	371c      	adds	r7, #28
 8002714:	46bd      	mov	sp, r7
 8002716:	bc80      	pop	{r7}
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	40021000 	.word	0x40021000
 8002720:	007a1200 	.word	0x007a1200
 8002724:	080044ec 	.word	0x080044ec
 8002728:	080044fc 	.word	0x080044fc
 800272c:	003d0900 	.word	0x003d0900

08002730 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002734:	4b02      	ldr	r3, [pc, #8]	; (8002740 <HAL_RCC_GetHCLKFreq+0x10>)
 8002736:	681b      	ldr	r3, [r3, #0]
}
 8002738:	4618      	mov	r0, r3
 800273a:	46bd      	mov	sp, r7
 800273c:	bc80      	pop	{r7}
 800273e:	4770      	bx	lr
 8002740:	20000000 	.word	0x20000000

08002744 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002748:	f7ff fff2 	bl	8002730 <HAL_RCC_GetHCLKFreq>
 800274c:	4602      	mov	r2, r0
 800274e:	4b05      	ldr	r3, [pc, #20]	; (8002764 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	0a1b      	lsrs	r3, r3, #8
 8002754:	f003 0307 	and.w	r3, r3, #7
 8002758:	4903      	ldr	r1, [pc, #12]	; (8002768 <HAL_RCC_GetPCLK1Freq+0x24>)
 800275a:	5ccb      	ldrb	r3, [r1, r3]
 800275c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002760:	4618      	mov	r0, r3
 8002762:	bd80      	pop	{r7, pc}
 8002764:	40021000 	.word	0x40021000
 8002768:	080044e4 	.word	0x080044e4

0800276c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002770:	f7ff ffde 	bl	8002730 <HAL_RCC_GetHCLKFreq>
 8002774:	4602      	mov	r2, r0
 8002776:	4b05      	ldr	r3, [pc, #20]	; (800278c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	0adb      	lsrs	r3, r3, #11
 800277c:	f003 0307 	and.w	r3, r3, #7
 8002780:	4903      	ldr	r1, [pc, #12]	; (8002790 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002782:	5ccb      	ldrb	r3, [r1, r3]
 8002784:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002788:	4618      	mov	r0, r3
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40021000 	.word	0x40021000
 8002790:	080044e4 	.word	0x080044e4

08002794 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002794:	b480      	push	{r7}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800279c:	4b0a      	ldr	r3, [pc, #40]	; (80027c8 <RCC_Delay+0x34>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a0a      	ldr	r2, [pc, #40]	; (80027cc <RCC_Delay+0x38>)
 80027a2:	fba2 2303 	umull	r2, r3, r2, r3
 80027a6:	0a5b      	lsrs	r3, r3, #9
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	fb02 f303 	mul.w	r3, r2, r3
 80027ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80027b0:	bf00      	nop
  }
  while (Delay --);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	1e5a      	subs	r2, r3, #1
 80027b6:	60fa      	str	r2, [r7, #12]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1f9      	bne.n	80027b0 <RCC_Delay+0x1c>
}
 80027bc:	bf00      	nop
 80027be:	bf00      	nop
 80027c0:	3714      	adds	r7, #20
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bc80      	pop	{r7}
 80027c6:	4770      	bx	lr
 80027c8:	20000000 	.word	0x20000000
 80027cc:	10624dd3 	.word	0x10624dd3

080027d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e076      	b.n	80028d0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d108      	bne.n	80027fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027f2:	d009      	beq.n	8002808 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	61da      	str	r2, [r3, #28]
 80027fa:	e005      	b.n	8002808 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b00      	cmp	r3, #0
 8002818:	d106      	bne.n	8002828 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f7fd ff68 	bl	80006f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2202      	movs	r2, #2
 800282c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800283e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002850:	431a      	orrs	r2, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800285a:	431a      	orrs	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	f003 0302 	and.w	r3, r3, #2
 8002864:	431a      	orrs	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	695b      	ldr	r3, [r3, #20]
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	431a      	orrs	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002878:	431a      	orrs	r2, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	69db      	ldr	r3, [r3, #28]
 800287e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002882:	431a      	orrs	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a1b      	ldr	r3, [r3, #32]
 8002888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800288c:	ea42 0103 	orr.w	r1, r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002894:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	430a      	orrs	r2, r1
 800289e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	0c1a      	lsrs	r2, r3, #16
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f002 0204 	and.w	r2, r2, #4
 80028ae:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	69da      	ldr	r2, [r3, #28]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028be:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2201      	movs	r2, #1
 80028ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3708      	adds	r7, #8
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	4613      	mov	r3, r2
 80028e4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80028e6:	2300      	movs	r3, #0
 80028e8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d101      	bne.n	80028f8 <HAL_SPI_Transmit_DMA+0x20>
 80028f4:	2302      	movs	r3, #2
 80028f6:	e097      	b.n	8002a28 <HAL_SPI_Transmit_DMA+0x150>
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002906:	b2db      	uxtb	r3, r3
 8002908:	2b01      	cmp	r3, #1
 800290a:	d002      	beq.n	8002912 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800290c:	2302      	movs	r3, #2
 800290e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002910:	e085      	b.n	8002a1e <HAL_SPI_Transmit_DMA+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d002      	beq.n	800291e <HAL_SPI_Transmit_DMA+0x46>
 8002918:	88fb      	ldrh	r3, [r7, #6]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d102      	bne.n	8002924 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002922:	e07c      	b.n	8002a1e <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2203      	movs	r2, #3
 8002928:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	68ba      	ldr	r2, [r7, #8]
 8002936:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	88fa      	ldrh	r2, [r7, #6]
 800293c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	88fa      	ldrh	r2, [r7, #6]
 8002942:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2200      	movs	r2, #0
 8002948:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2200      	movs	r2, #0
 800294e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2200      	movs	r2, #0
 8002954:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2200      	movs	r2, #0
 800295a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2200      	movs	r2, #0
 8002960:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800296a:	d10f      	bne.n	800298c <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800297a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800298a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002990:	4a27      	ldr	r2, [pc, #156]	; (8002a30 <HAL_SPI_Transmit_DMA+0x158>)
 8002992:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002998:	4a26      	ldr	r2, [pc, #152]	; (8002a34 <HAL_SPI_Transmit_DMA+0x15c>)
 800299a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029a0:	4a25      	ldr	r2, [pc, #148]	; (8002a38 <HAL_SPI_Transmit_DMA+0x160>)
 80029a2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029a8:	2200      	movs	r2, #0
 80029aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b4:	4619      	mov	r1, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	330c      	adds	r3, #12
 80029bc:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029c2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80029c4:	f7fe ffba 	bl	800193c <HAL_DMA_Start_IT>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d008      	beq.n	80029e0 <HAL_SPI_Transmit_DMA+0x108>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029d2:	f043 0210 	orr.w	r2, r3, #16
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	75fb      	strb	r3, [r7, #23]

    goto error;
 80029de:	e01e      	b.n	8002a1e <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ea:	2b40      	cmp	r3, #64	; 0x40
 80029ec:	d007      	beq.n	80029fe <HAL_SPI_Transmit_DMA+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029fc:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	685a      	ldr	r2, [r3, #4]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f042 0220 	orr.w	r2, r2, #32
 8002a0c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	685a      	ldr	r2, [r3, #4]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f042 0202 	orr.w	r2, r2, #2
 8002a1c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002a26:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3718      	adds	r7, #24
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	08002b07 	.word	0x08002b07
 8002a34:	08002a61 	.word	0x08002a61
 8002a38:	08002b23 	.word	0x08002b23

08002a3c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bc80      	pop	{r7}
 8002a4c:	4770      	bx	lr

08002a4e <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	b083      	sub	sp, #12
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002a56:	bf00      	nop
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bc80      	pop	{r7}
 8002a5e:	4770      	bx	lr

08002a60 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b086      	sub	sp, #24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a6e:	f7fe f881 	bl	8000b74 <HAL_GetTick>
 8002a72:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0320 	and.w	r3, r3, #32
 8002a7e:	2b20      	cmp	r3, #32
 8002a80:	d03b      	beq.n	8002afa <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	685a      	ldr	r2, [r3, #4]
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f022 0220 	bic.w	r2, r2, #32
 8002a90:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	685a      	ldr	r2, [r3, #4]
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f022 0202 	bic.w	r2, r2, #2
 8002aa0:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	2164      	movs	r1, #100	; 0x64
 8002aa6:	6978      	ldr	r0, [r7, #20]
 8002aa8:	f000 f8e4 	bl	8002c74 <SPI_EndRxTxTransaction>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d005      	beq.n	8002abe <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab6:	f043 0220 	orr.w	r2, r3, #32
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d10a      	bne.n	8002adc <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	60fb      	str	r3, [r7, #12]
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	60fb      	str	r3, [r7, #12]
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	60fb      	str	r3, [r7, #12]
 8002ada:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002af2:	6978      	ldr	r0, [r7, #20]
 8002af4:	f7ff ffab 	bl	8002a4e <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002af8:	e002      	b.n	8002b00 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8002afa:	6978      	ldr	r0, [r7, #20]
 8002afc:	f7fd fd28 	bl	8000550 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002b00:	3718      	adds	r7, #24
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b084      	sub	sp, #16
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b12:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f7ff ff91 	bl	8002a3c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002b1a:	bf00      	nop
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b084      	sub	sp, #16
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2e:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	685a      	ldr	r2, [r3, #4]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 0203 	bic.w	r2, r2, #3
 8002b3e:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b44:	f043 0210 	orr.w	r2, r3, #16
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002b54:	68f8      	ldr	r0, [r7, #12]
 8002b56:	f7ff ff7a 	bl	8002a4e <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002b5a:	bf00      	nop
 8002b5c:	3710      	adds	r7, #16
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
	...

08002b64 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b088      	sub	sp, #32
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	603b      	str	r3, [r7, #0]
 8002b70:	4613      	mov	r3, r2
 8002b72:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002b74:	f7fd fffe 	bl	8000b74 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b7c:	1a9b      	subs	r3, r3, r2
 8002b7e:	683a      	ldr	r2, [r7, #0]
 8002b80:	4413      	add	r3, r2
 8002b82:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002b84:	f7fd fff6 	bl	8000b74 <HAL_GetTick>
 8002b88:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002b8a:	4b39      	ldr	r3, [pc, #228]	; (8002c70 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	015b      	lsls	r3, r3, #5
 8002b90:	0d1b      	lsrs	r3, r3, #20
 8002b92:	69fa      	ldr	r2, [r7, #28]
 8002b94:	fb02 f303 	mul.w	r3, r2, r3
 8002b98:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b9a:	e054      	b.n	8002c46 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba2:	d050      	beq.n	8002c46 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ba4:	f7fd ffe6 	bl	8000b74 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	69fa      	ldr	r2, [r7, #28]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d902      	bls.n	8002bba <SPI_WaitFlagStateUntilTimeout+0x56>
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d13d      	bne.n	8002c36 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	685a      	ldr	r2, [r3, #4]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002bc8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bd2:	d111      	bne.n	8002bf8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bdc:	d004      	beq.n	8002be8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002be6:	d107      	bne.n	8002bf8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bf6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c00:	d10f      	bne.n	8002c22 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c10:	601a      	str	r2, [r3, #0]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c20:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2201      	movs	r2, #1
 8002c26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e017      	b.n	8002c66 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d101      	bne.n	8002c40 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	3b01      	subs	r3, #1
 8002c44:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	4013      	ands	r3, r2
 8002c50:	68ba      	ldr	r2, [r7, #8]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	bf0c      	ite	eq
 8002c56:	2301      	moveq	r3, #1
 8002c58:	2300      	movne	r3, #0
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	79fb      	ldrb	r3, [r7, #7]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d19b      	bne.n	8002b9c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3720      	adds	r7, #32
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	20000000 	.word	0x20000000

08002c74 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af02      	add	r7, sp, #8
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	9300      	str	r3, [sp, #0]
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	2200      	movs	r2, #0
 8002c88:	2180      	movs	r1, #128	; 0x80
 8002c8a:	68f8      	ldr	r0, [r7, #12]
 8002c8c:	f7ff ff6a 	bl	8002b64 <SPI_WaitFlagStateUntilTimeout>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d007      	beq.n	8002ca6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c9a:	f043 0220 	orr.w	r2, r3, #32
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e000      	b.n	8002ca8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3710      	adds	r7, #16
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e042      	b.n	8002d48 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d106      	bne.n	8002cdc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f7fd fdac 	bl	8000834 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2224      	movs	r2, #36	; 0x24
 8002ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68da      	ldr	r2, [r3, #12]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002cf2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f000 f91d 	bl	8002f34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	691a      	ldr	r2, [r3, #16]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	695a      	ldr	r2, [r3, #20]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68da      	ldr	r2, [r3, #12]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2220      	movs	r2, #32
 8002d34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2220      	movs	r2, #32
 8002d3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3708      	adds	r7, #8
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b08a      	sub	sp, #40	; 0x28
 8002d54:	af02      	add	r7, sp, #8
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	603b      	str	r3, [r7, #0]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d60:	2300      	movs	r3, #0
 8002d62:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	2b20      	cmp	r3, #32
 8002d6e:	d16d      	bne.n	8002e4c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d002      	beq.n	8002d7c <HAL_UART_Transmit+0x2c>
 8002d76:	88fb      	ldrh	r3, [r7, #6]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d101      	bne.n	8002d80 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e066      	b.n	8002e4e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2221      	movs	r2, #33	; 0x21
 8002d8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d8e:	f7fd fef1 	bl	8000b74 <HAL_GetTick>
 8002d92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	88fa      	ldrh	r2, [r7, #6]
 8002d98:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	88fa      	ldrh	r2, [r7, #6]
 8002d9e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002da8:	d108      	bne.n	8002dbc <HAL_UART_Transmit+0x6c>
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d104      	bne.n	8002dbc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002db2:	2300      	movs	r3, #0
 8002db4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	61bb      	str	r3, [r7, #24]
 8002dba:	e003      	b.n	8002dc4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002dc4:	e02a      	b.n	8002e1c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	9300      	str	r3, [sp, #0]
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	2180      	movs	r1, #128	; 0x80
 8002dd0:	68f8      	ldr	r0, [r7, #12]
 8002dd2:	f000 f840 	bl	8002e56 <UART_WaitOnFlagUntilTimeout>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d001      	beq.n	8002de0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e036      	b.n	8002e4e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d10b      	bne.n	8002dfe <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	881b      	ldrh	r3, [r3, #0]
 8002dea:	461a      	mov	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002df4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	3302      	adds	r3, #2
 8002dfa:	61bb      	str	r3, [r7, #24]
 8002dfc:	e007      	b.n	8002e0e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	781a      	ldrb	r2, [r3, #0]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	3b01      	subs	r3, #1
 8002e16:	b29a      	uxth	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d1cf      	bne.n	8002dc6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	9300      	str	r3, [sp, #0]
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	2140      	movs	r1, #64	; 0x40
 8002e30:	68f8      	ldr	r0, [r7, #12]
 8002e32:	f000 f810 	bl	8002e56 <UART_WaitOnFlagUntilTimeout>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d001      	beq.n	8002e40 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e006      	b.n	8002e4e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2220      	movs	r2, #32
 8002e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	e000      	b.n	8002e4e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002e4c:	2302      	movs	r3, #2
  }
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3720      	adds	r7, #32
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b090      	sub	sp, #64	; 0x40
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	60f8      	str	r0, [r7, #12]
 8002e5e:	60b9      	str	r1, [r7, #8]
 8002e60:	603b      	str	r3, [r7, #0]
 8002e62:	4613      	mov	r3, r2
 8002e64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e66:	e050      	b.n	8002f0a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e6e:	d04c      	beq.n	8002f0a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d007      	beq.n	8002e86 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e76:	f7fd fe7d 	bl	8000b74 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d241      	bcs.n	8002f0a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	330c      	adds	r3, #12
 8002e8c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e90:	e853 3f00 	ldrex	r3, [r3]
 8002e94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e98:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	330c      	adds	r3, #12
 8002ea4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ea6:	637a      	str	r2, [r7, #52]	; 0x34
 8002ea8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eaa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002eac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002eae:	e841 2300 	strex	r3, r2, [r1]
 8002eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d1e5      	bne.n	8002e86 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	3314      	adds	r3, #20
 8002ec0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	e853 3f00 	ldrex	r3, [r3]
 8002ec8:	613b      	str	r3, [r7, #16]
   return(result);
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	f023 0301 	bic.w	r3, r3, #1
 8002ed0:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	3314      	adds	r3, #20
 8002ed8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002eda:	623a      	str	r2, [r7, #32]
 8002edc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ede:	69f9      	ldr	r1, [r7, #28]
 8002ee0:	6a3a      	ldr	r2, [r7, #32]
 8002ee2:	e841 2300 	strex	r3, r2, [r1]
 8002ee6:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1e5      	bne.n	8002eba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2220      	movs	r2, #32
 8002ef2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2220      	movs	r2, #32
 8002efa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e00f      	b.n	8002f2a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	4013      	ands	r3, r2
 8002f14:	68ba      	ldr	r2, [r7, #8]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	bf0c      	ite	eq
 8002f1a:	2301      	moveq	r3, #1
 8002f1c:	2300      	movne	r3, #0
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	461a      	mov	r2, r3
 8002f22:	79fb      	ldrb	r3, [r7, #7]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d09f      	beq.n	8002e68 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3740      	adds	r7, #64	; 0x40
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
	...

08002f34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	68da      	ldr	r2, [r3, #12]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	689a      	ldr	r2, [r3, #8]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	431a      	orrs	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	695b      	ldr	r3, [r3, #20]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002f6e:	f023 030c 	bic.w	r3, r3, #12
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	6812      	ldr	r2, [r2, #0]
 8002f76:	68b9      	ldr	r1, [r7, #8]
 8002f78:	430b      	orrs	r3, r1
 8002f7a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	699a      	ldr	r2, [r3, #24]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a2c      	ldr	r2, [pc, #176]	; (8003048 <UART_SetConfig+0x114>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d103      	bne.n	8002fa4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002f9c:	f7ff fbe6 	bl	800276c <HAL_RCC_GetPCLK2Freq>
 8002fa0:	60f8      	str	r0, [r7, #12]
 8002fa2:	e002      	b.n	8002faa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002fa4:	f7ff fbce 	bl	8002744 <HAL_RCC_GetPCLK1Freq>
 8002fa8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	4613      	mov	r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	4413      	add	r3, r2
 8002fb2:	009a      	lsls	r2, r3, #2
 8002fb4:	441a      	add	r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fc0:	4a22      	ldr	r2, [pc, #136]	; (800304c <UART_SetConfig+0x118>)
 8002fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc6:	095b      	lsrs	r3, r3, #5
 8002fc8:	0119      	lsls	r1, r3, #4
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	4413      	add	r3, r2
 8002fd2:	009a      	lsls	r2, r3, #2
 8002fd4:	441a      	add	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fe0:	4b1a      	ldr	r3, [pc, #104]	; (800304c <UART_SetConfig+0x118>)
 8002fe2:	fba3 0302 	umull	r0, r3, r3, r2
 8002fe6:	095b      	lsrs	r3, r3, #5
 8002fe8:	2064      	movs	r0, #100	; 0x64
 8002fea:	fb00 f303 	mul.w	r3, r0, r3
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	011b      	lsls	r3, r3, #4
 8002ff2:	3332      	adds	r3, #50	; 0x32
 8002ff4:	4a15      	ldr	r2, [pc, #84]	; (800304c <UART_SetConfig+0x118>)
 8002ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffa:	095b      	lsrs	r3, r3, #5
 8002ffc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003000:	4419      	add	r1, r3
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	4613      	mov	r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	4413      	add	r3, r2
 800300a:	009a      	lsls	r2, r3, #2
 800300c:	441a      	add	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	fbb2 f2f3 	udiv	r2, r2, r3
 8003018:	4b0c      	ldr	r3, [pc, #48]	; (800304c <UART_SetConfig+0x118>)
 800301a:	fba3 0302 	umull	r0, r3, r3, r2
 800301e:	095b      	lsrs	r3, r3, #5
 8003020:	2064      	movs	r0, #100	; 0x64
 8003022:	fb00 f303 	mul.w	r3, r0, r3
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	011b      	lsls	r3, r3, #4
 800302a:	3332      	adds	r3, #50	; 0x32
 800302c:	4a07      	ldr	r2, [pc, #28]	; (800304c <UART_SetConfig+0x118>)
 800302e:	fba2 2303 	umull	r2, r3, r2, r3
 8003032:	095b      	lsrs	r3, r3, #5
 8003034:	f003 020f 	and.w	r2, r3, #15
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	440a      	add	r2, r1
 800303e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003040:	bf00      	nop
 8003042:	3710      	adds	r7, #16
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	40013800 	.word	0x40013800
 800304c:	51eb851f 	.word	0x51eb851f

08003050 <__errno>:
 8003050:	4b01      	ldr	r3, [pc, #4]	; (8003058 <__errno+0x8>)
 8003052:	6818      	ldr	r0, [r3, #0]
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	2000000c 	.word	0x2000000c

0800305c <__libc_init_array>:
 800305c:	b570      	push	{r4, r5, r6, lr}
 800305e:	2600      	movs	r6, #0
 8003060:	4d0c      	ldr	r5, [pc, #48]	; (8003094 <__libc_init_array+0x38>)
 8003062:	4c0d      	ldr	r4, [pc, #52]	; (8003098 <__libc_init_array+0x3c>)
 8003064:	1b64      	subs	r4, r4, r5
 8003066:	10a4      	asrs	r4, r4, #2
 8003068:	42a6      	cmp	r6, r4
 800306a:	d109      	bne.n	8003080 <__libc_init_array+0x24>
 800306c:	f001 fa08 	bl	8004480 <_init>
 8003070:	2600      	movs	r6, #0
 8003072:	4d0a      	ldr	r5, [pc, #40]	; (800309c <__libc_init_array+0x40>)
 8003074:	4c0a      	ldr	r4, [pc, #40]	; (80030a0 <__libc_init_array+0x44>)
 8003076:	1b64      	subs	r4, r4, r5
 8003078:	10a4      	asrs	r4, r4, #2
 800307a:	42a6      	cmp	r6, r4
 800307c:	d105      	bne.n	800308a <__libc_init_array+0x2e>
 800307e:	bd70      	pop	{r4, r5, r6, pc}
 8003080:	f855 3b04 	ldr.w	r3, [r5], #4
 8003084:	4798      	blx	r3
 8003086:	3601      	adds	r6, #1
 8003088:	e7ee      	b.n	8003068 <__libc_init_array+0xc>
 800308a:	f855 3b04 	ldr.w	r3, [r5], #4
 800308e:	4798      	blx	r3
 8003090:	3601      	adds	r6, #1
 8003092:	e7f2      	b.n	800307a <__libc_init_array+0x1e>
 8003094:	08004598 	.word	0x08004598
 8003098:	08004598 	.word	0x08004598
 800309c:	08004598 	.word	0x08004598
 80030a0:	0800459c 	.word	0x0800459c

080030a4 <memset>:
 80030a4:	4603      	mov	r3, r0
 80030a6:	4402      	add	r2, r0
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d100      	bne.n	80030ae <memset+0xa>
 80030ac:	4770      	bx	lr
 80030ae:	f803 1b01 	strb.w	r1, [r3], #1
 80030b2:	e7f9      	b.n	80030a8 <memset+0x4>

080030b4 <iprintf>:
 80030b4:	b40f      	push	{r0, r1, r2, r3}
 80030b6:	4b0a      	ldr	r3, [pc, #40]	; (80030e0 <iprintf+0x2c>)
 80030b8:	b513      	push	{r0, r1, r4, lr}
 80030ba:	681c      	ldr	r4, [r3, #0]
 80030bc:	b124      	cbz	r4, 80030c8 <iprintf+0x14>
 80030be:	69a3      	ldr	r3, [r4, #24]
 80030c0:	b913      	cbnz	r3, 80030c8 <iprintf+0x14>
 80030c2:	4620      	mov	r0, r4
 80030c4:	f000 fa7a 	bl	80035bc <__sinit>
 80030c8:	ab05      	add	r3, sp, #20
 80030ca:	4620      	mov	r0, r4
 80030cc:	9a04      	ldr	r2, [sp, #16]
 80030ce:	68a1      	ldr	r1, [r4, #8]
 80030d0:	9301      	str	r3, [sp, #4]
 80030d2:	f000 fdd9 	bl	8003c88 <_vfiprintf_r>
 80030d6:	b002      	add	sp, #8
 80030d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030dc:	b004      	add	sp, #16
 80030de:	4770      	bx	lr
 80030e0:	2000000c 	.word	0x2000000c

080030e4 <_puts_r>:
 80030e4:	b570      	push	{r4, r5, r6, lr}
 80030e6:	460e      	mov	r6, r1
 80030e8:	4605      	mov	r5, r0
 80030ea:	b118      	cbz	r0, 80030f4 <_puts_r+0x10>
 80030ec:	6983      	ldr	r3, [r0, #24]
 80030ee:	b90b      	cbnz	r3, 80030f4 <_puts_r+0x10>
 80030f0:	f000 fa64 	bl	80035bc <__sinit>
 80030f4:	69ab      	ldr	r3, [r5, #24]
 80030f6:	68ac      	ldr	r4, [r5, #8]
 80030f8:	b913      	cbnz	r3, 8003100 <_puts_r+0x1c>
 80030fa:	4628      	mov	r0, r5
 80030fc:	f000 fa5e 	bl	80035bc <__sinit>
 8003100:	4b2c      	ldr	r3, [pc, #176]	; (80031b4 <_puts_r+0xd0>)
 8003102:	429c      	cmp	r4, r3
 8003104:	d120      	bne.n	8003148 <_puts_r+0x64>
 8003106:	686c      	ldr	r4, [r5, #4]
 8003108:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800310a:	07db      	lsls	r3, r3, #31
 800310c:	d405      	bmi.n	800311a <_puts_r+0x36>
 800310e:	89a3      	ldrh	r3, [r4, #12]
 8003110:	0598      	lsls	r0, r3, #22
 8003112:	d402      	bmi.n	800311a <_puts_r+0x36>
 8003114:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003116:	f000 faef 	bl	80036f8 <__retarget_lock_acquire_recursive>
 800311a:	89a3      	ldrh	r3, [r4, #12]
 800311c:	0719      	lsls	r1, r3, #28
 800311e:	d51d      	bpl.n	800315c <_puts_r+0x78>
 8003120:	6923      	ldr	r3, [r4, #16]
 8003122:	b1db      	cbz	r3, 800315c <_puts_r+0x78>
 8003124:	3e01      	subs	r6, #1
 8003126:	68a3      	ldr	r3, [r4, #8]
 8003128:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800312c:	3b01      	subs	r3, #1
 800312e:	60a3      	str	r3, [r4, #8]
 8003130:	bb39      	cbnz	r1, 8003182 <_puts_r+0x9e>
 8003132:	2b00      	cmp	r3, #0
 8003134:	da38      	bge.n	80031a8 <_puts_r+0xc4>
 8003136:	4622      	mov	r2, r4
 8003138:	210a      	movs	r1, #10
 800313a:	4628      	mov	r0, r5
 800313c:	f000 f868 	bl	8003210 <__swbuf_r>
 8003140:	3001      	adds	r0, #1
 8003142:	d011      	beq.n	8003168 <_puts_r+0x84>
 8003144:	250a      	movs	r5, #10
 8003146:	e011      	b.n	800316c <_puts_r+0x88>
 8003148:	4b1b      	ldr	r3, [pc, #108]	; (80031b8 <_puts_r+0xd4>)
 800314a:	429c      	cmp	r4, r3
 800314c:	d101      	bne.n	8003152 <_puts_r+0x6e>
 800314e:	68ac      	ldr	r4, [r5, #8]
 8003150:	e7da      	b.n	8003108 <_puts_r+0x24>
 8003152:	4b1a      	ldr	r3, [pc, #104]	; (80031bc <_puts_r+0xd8>)
 8003154:	429c      	cmp	r4, r3
 8003156:	bf08      	it	eq
 8003158:	68ec      	ldreq	r4, [r5, #12]
 800315a:	e7d5      	b.n	8003108 <_puts_r+0x24>
 800315c:	4621      	mov	r1, r4
 800315e:	4628      	mov	r0, r5
 8003160:	f000 f8a8 	bl	80032b4 <__swsetup_r>
 8003164:	2800      	cmp	r0, #0
 8003166:	d0dd      	beq.n	8003124 <_puts_r+0x40>
 8003168:	f04f 35ff 	mov.w	r5, #4294967295
 800316c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800316e:	07da      	lsls	r2, r3, #31
 8003170:	d405      	bmi.n	800317e <_puts_r+0x9a>
 8003172:	89a3      	ldrh	r3, [r4, #12]
 8003174:	059b      	lsls	r3, r3, #22
 8003176:	d402      	bmi.n	800317e <_puts_r+0x9a>
 8003178:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800317a:	f000 fabe 	bl	80036fa <__retarget_lock_release_recursive>
 800317e:	4628      	mov	r0, r5
 8003180:	bd70      	pop	{r4, r5, r6, pc}
 8003182:	2b00      	cmp	r3, #0
 8003184:	da04      	bge.n	8003190 <_puts_r+0xac>
 8003186:	69a2      	ldr	r2, [r4, #24]
 8003188:	429a      	cmp	r2, r3
 800318a:	dc06      	bgt.n	800319a <_puts_r+0xb6>
 800318c:	290a      	cmp	r1, #10
 800318e:	d004      	beq.n	800319a <_puts_r+0xb6>
 8003190:	6823      	ldr	r3, [r4, #0]
 8003192:	1c5a      	adds	r2, r3, #1
 8003194:	6022      	str	r2, [r4, #0]
 8003196:	7019      	strb	r1, [r3, #0]
 8003198:	e7c5      	b.n	8003126 <_puts_r+0x42>
 800319a:	4622      	mov	r2, r4
 800319c:	4628      	mov	r0, r5
 800319e:	f000 f837 	bl	8003210 <__swbuf_r>
 80031a2:	3001      	adds	r0, #1
 80031a4:	d1bf      	bne.n	8003126 <_puts_r+0x42>
 80031a6:	e7df      	b.n	8003168 <_puts_r+0x84>
 80031a8:	250a      	movs	r5, #10
 80031aa:	6823      	ldr	r3, [r4, #0]
 80031ac:	1c5a      	adds	r2, r3, #1
 80031ae:	6022      	str	r2, [r4, #0]
 80031b0:	701d      	strb	r5, [r3, #0]
 80031b2:	e7db      	b.n	800316c <_puts_r+0x88>
 80031b4:	08004524 	.word	0x08004524
 80031b8:	08004544 	.word	0x08004544
 80031bc:	08004504 	.word	0x08004504

080031c0 <puts>:
 80031c0:	4b02      	ldr	r3, [pc, #8]	; (80031cc <puts+0xc>)
 80031c2:	4601      	mov	r1, r0
 80031c4:	6818      	ldr	r0, [r3, #0]
 80031c6:	f7ff bf8d 	b.w	80030e4 <_puts_r>
 80031ca:	bf00      	nop
 80031cc:	2000000c 	.word	0x2000000c

080031d0 <siprintf>:
 80031d0:	b40e      	push	{r1, r2, r3}
 80031d2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80031d6:	b500      	push	{lr}
 80031d8:	b09c      	sub	sp, #112	; 0x70
 80031da:	ab1d      	add	r3, sp, #116	; 0x74
 80031dc:	9002      	str	r0, [sp, #8]
 80031de:	9006      	str	r0, [sp, #24]
 80031e0:	9107      	str	r1, [sp, #28]
 80031e2:	9104      	str	r1, [sp, #16]
 80031e4:	4808      	ldr	r0, [pc, #32]	; (8003208 <siprintf+0x38>)
 80031e6:	4909      	ldr	r1, [pc, #36]	; (800320c <siprintf+0x3c>)
 80031e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80031ec:	9105      	str	r1, [sp, #20]
 80031ee:	6800      	ldr	r0, [r0, #0]
 80031f0:	a902      	add	r1, sp, #8
 80031f2:	9301      	str	r3, [sp, #4]
 80031f4:	f000 fc20 	bl	8003a38 <_svfiprintf_r>
 80031f8:	2200      	movs	r2, #0
 80031fa:	9b02      	ldr	r3, [sp, #8]
 80031fc:	701a      	strb	r2, [r3, #0]
 80031fe:	b01c      	add	sp, #112	; 0x70
 8003200:	f85d eb04 	ldr.w	lr, [sp], #4
 8003204:	b003      	add	sp, #12
 8003206:	4770      	bx	lr
 8003208:	2000000c 	.word	0x2000000c
 800320c:	ffff0208 	.word	0xffff0208

08003210 <__swbuf_r>:
 8003210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003212:	460e      	mov	r6, r1
 8003214:	4614      	mov	r4, r2
 8003216:	4605      	mov	r5, r0
 8003218:	b118      	cbz	r0, 8003222 <__swbuf_r+0x12>
 800321a:	6983      	ldr	r3, [r0, #24]
 800321c:	b90b      	cbnz	r3, 8003222 <__swbuf_r+0x12>
 800321e:	f000 f9cd 	bl	80035bc <__sinit>
 8003222:	4b21      	ldr	r3, [pc, #132]	; (80032a8 <__swbuf_r+0x98>)
 8003224:	429c      	cmp	r4, r3
 8003226:	d12b      	bne.n	8003280 <__swbuf_r+0x70>
 8003228:	686c      	ldr	r4, [r5, #4]
 800322a:	69a3      	ldr	r3, [r4, #24]
 800322c:	60a3      	str	r3, [r4, #8]
 800322e:	89a3      	ldrh	r3, [r4, #12]
 8003230:	071a      	lsls	r2, r3, #28
 8003232:	d52f      	bpl.n	8003294 <__swbuf_r+0x84>
 8003234:	6923      	ldr	r3, [r4, #16]
 8003236:	b36b      	cbz	r3, 8003294 <__swbuf_r+0x84>
 8003238:	6923      	ldr	r3, [r4, #16]
 800323a:	6820      	ldr	r0, [r4, #0]
 800323c:	b2f6      	uxtb	r6, r6
 800323e:	1ac0      	subs	r0, r0, r3
 8003240:	6963      	ldr	r3, [r4, #20]
 8003242:	4637      	mov	r7, r6
 8003244:	4283      	cmp	r3, r0
 8003246:	dc04      	bgt.n	8003252 <__swbuf_r+0x42>
 8003248:	4621      	mov	r1, r4
 800324a:	4628      	mov	r0, r5
 800324c:	f000 f922 	bl	8003494 <_fflush_r>
 8003250:	bb30      	cbnz	r0, 80032a0 <__swbuf_r+0x90>
 8003252:	68a3      	ldr	r3, [r4, #8]
 8003254:	3001      	adds	r0, #1
 8003256:	3b01      	subs	r3, #1
 8003258:	60a3      	str	r3, [r4, #8]
 800325a:	6823      	ldr	r3, [r4, #0]
 800325c:	1c5a      	adds	r2, r3, #1
 800325e:	6022      	str	r2, [r4, #0]
 8003260:	701e      	strb	r6, [r3, #0]
 8003262:	6963      	ldr	r3, [r4, #20]
 8003264:	4283      	cmp	r3, r0
 8003266:	d004      	beq.n	8003272 <__swbuf_r+0x62>
 8003268:	89a3      	ldrh	r3, [r4, #12]
 800326a:	07db      	lsls	r3, r3, #31
 800326c:	d506      	bpl.n	800327c <__swbuf_r+0x6c>
 800326e:	2e0a      	cmp	r6, #10
 8003270:	d104      	bne.n	800327c <__swbuf_r+0x6c>
 8003272:	4621      	mov	r1, r4
 8003274:	4628      	mov	r0, r5
 8003276:	f000 f90d 	bl	8003494 <_fflush_r>
 800327a:	b988      	cbnz	r0, 80032a0 <__swbuf_r+0x90>
 800327c:	4638      	mov	r0, r7
 800327e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003280:	4b0a      	ldr	r3, [pc, #40]	; (80032ac <__swbuf_r+0x9c>)
 8003282:	429c      	cmp	r4, r3
 8003284:	d101      	bne.n	800328a <__swbuf_r+0x7a>
 8003286:	68ac      	ldr	r4, [r5, #8]
 8003288:	e7cf      	b.n	800322a <__swbuf_r+0x1a>
 800328a:	4b09      	ldr	r3, [pc, #36]	; (80032b0 <__swbuf_r+0xa0>)
 800328c:	429c      	cmp	r4, r3
 800328e:	bf08      	it	eq
 8003290:	68ec      	ldreq	r4, [r5, #12]
 8003292:	e7ca      	b.n	800322a <__swbuf_r+0x1a>
 8003294:	4621      	mov	r1, r4
 8003296:	4628      	mov	r0, r5
 8003298:	f000 f80c 	bl	80032b4 <__swsetup_r>
 800329c:	2800      	cmp	r0, #0
 800329e:	d0cb      	beq.n	8003238 <__swbuf_r+0x28>
 80032a0:	f04f 37ff 	mov.w	r7, #4294967295
 80032a4:	e7ea      	b.n	800327c <__swbuf_r+0x6c>
 80032a6:	bf00      	nop
 80032a8:	08004524 	.word	0x08004524
 80032ac:	08004544 	.word	0x08004544
 80032b0:	08004504 	.word	0x08004504

080032b4 <__swsetup_r>:
 80032b4:	4b32      	ldr	r3, [pc, #200]	; (8003380 <__swsetup_r+0xcc>)
 80032b6:	b570      	push	{r4, r5, r6, lr}
 80032b8:	681d      	ldr	r5, [r3, #0]
 80032ba:	4606      	mov	r6, r0
 80032bc:	460c      	mov	r4, r1
 80032be:	b125      	cbz	r5, 80032ca <__swsetup_r+0x16>
 80032c0:	69ab      	ldr	r3, [r5, #24]
 80032c2:	b913      	cbnz	r3, 80032ca <__swsetup_r+0x16>
 80032c4:	4628      	mov	r0, r5
 80032c6:	f000 f979 	bl	80035bc <__sinit>
 80032ca:	4b2e      	ldr	r3, [pc, #184]	; (8003384 <__swsetup_r+0xd0>)
 80032cc:	429c      	cmp	r4, r3
 80032ce:	d10f      	bne.n	80032f0 <__swsetup_r+0x3c>
 80032d0:	686c      	ldr	r4, [r5, #4]
 80032d2:	89a3      	ldrh	r3, [r4, #12]
 80032d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80032d8:	0719      	lsls	r1, r3, #28
 80032da:	d42c      	bmi.n	8003336 <__swsetup_r+0x82>
 80032dc:	06dd      	lsls	r5, r3, #27
 80032de:	d411      	bmi.n	8003304 <__swsetup_r+0x50>
 80032e0:	2309      	movs	r3, #9
 80032e2:	6033      	str	r3, [r6, #0]
 80032e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80032e8:	f04f 30ff 	mov.w	r0, #4294967295
 80032ec:	81a3      	strh	r3, [r4, #12]
 80032ee:	e03e      	b.n	800336e <__swsetup_r+0xba>
 80032f0:	4b25      	ldr	r3, [pc, #148]	; (8003388 <__swsetup_r+0xd4>)
 80032f2:	429c      	cmp	r4, r3
 80032f4:	d101      	bne.n	80032fa <__swsetup_r+0x46>
 80032f6:	68ac      	ldr	r4, [r5, #8]
 80032f8:	e7eb      	b.n	80032d2 <__swsetup_r+0x1e>
 80032fa:	4b24      	ldr	r3, [pc, #144]	; (800338c <__swsetup_r+0xd8>)
 80032fc:	429c      	cmp	r4, r3
 80032fe:	bf08      	it	eq
 8003300:	68ec      	ldreq	r4, [r5, #12]
 8003302:	e7e6      	b.n	80032d2 <__swsetup_r+0x1e>
 8003304:	0758      	lsls	r0, r3, #29
 8003306:	d512      	bpl.n	800332e <__swsetup_r+0x7a>
 8003308:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800330a:	b141      	cbz	r1, 800331e <__swsetup_r+0x6a>
 800330c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003310:	4299      	cmp	r1, r3
 8003312:	d002      	beq.n	800331a <__swsetup_r+0x66>
 8003314:	4630      	mov	r0, r6
 8003316:	f000 fa57 	bl	80037c8 <_free_r>
 800331a:	2300      	movs	r3, #0
 800331c:	6363      	str	r3, [r4, #52]	; 0x34
 800331e:	89a3      	ldrh	r3, [r4, #12]
 8003320:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003324:	81a3      	strh	r3, [r4, #12]
 8003326:	2300      	movs	r3, #0
 8003328:	6063      	str	r3, [r4, #4]
 800332a:	6923      	ldr	r3, [r4, #16]
 800332c:	6023      	str	r3, [r4, #0]
 800332e:	89a3      	ldrh	r3, [r4, #12]
 8003330:	f043 0308 	orr.w	r3, r3, #8
 8003334:	81a3      	strh	r3, [r4, #12]
 8003336:	6923      	ldr	r3, [r4, #16]
 8003338:	b94b      	cbnz	r3, 800334e <__swsetup_r+0x9a>
 800333a:	89a3      	ldrh	r3, [r4, #12]
 800333c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003340:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003344:	d003      	beq.n	800334e <__swsetup_r+0x9a>
 8003346:	4621      	mov	r1, r4
 8003348:	4630      	mov	r0, r6
 800334a:	f000 f9fd 	bl	8003748 <__smakebuf_r>
 800334e:	89a0      	ldrh	r0, [r4, #12]
 8003350:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003354:	f010 0301 	ands.w	r3, r0, #1
 8003358:	d00a      	beq.n	8003370 <__swsetup_r+0xbc>
 800335a:	2300      	movs	r3, #0
 800335c:	60a3      	str	r3, [r4, #8]
 800335e:	6963      	ldr	r3, [r4, #20]
 8003360:	425b      	negs	r3, r3
 8003362:	61a3      	str	r3, [r4, #24]
 8003364:	6923      	ldr	r3, [r4, #16]
 8003366:	b943      	cbnz	r3, 800337a <__swsetup_r+0xc6>
 8003368:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800336c:	d1ba      	bne.n	80032e4 <__swsetup_r+0x30>
 800336e:	bd70      	pop	{r4, r5, r6, pc}
 8003370:	0781      	lsls	r1, r0, #30
 8003372:	bf58      	it	pl
 8003374:	6963      	ldrpl	r3, [r4, #20]
 8003376:	60a3      	str	r3, [r4, #8]
 8003378:	e7f4      	b.n	8003364 <__swsetup_r+0xb0>
 800337a:	2000      	movs	r0, #0
 800337c:	e7f7      	b.n	800336e <__swsetup_r+0xba>
 800337e:	bf00      	nop
 8003380:	2000000c 	.word	0x2000000c
 8003384:	08004524 	.word	0x08004524
 8003388:	08004544 	.word	0x08004544
 800338c:	08004504 	.word	0x08004504

08003390 <__sflush_r>:
 8003390:	898a      	ldrh	r2, [r1, #12]
 8003392:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003394:	4605      	mov	r5, r0
 8003396:	0710      	lsls	r0, r2, #28
 8003398:	460c      	mov	r4, r1
 800339a:	d457      	bmi.n	800344c <__sflush_r+0xbc>
 800339c:	684b      	ldr	r3, [r1, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	dc04      	bgt.n	80033ac <__sflush_r+0x1c>
 80033a2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	dc01      	bgt.n	80033ac <__sflush_r+0x1c>
 80033a8:	2000      	movs	r0, #0
 80033aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80033ae:	2e00      	cmp	r6, #0
 80033b0:	d0fa      	beq.n	80033a8 <__sflush_r+0x18>
 80033b2:	2300      	movs	r3, #0
 80033b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80033b8:	682f      	ldr	r7, [r5, #0]
 80033ba:	602b      	str	r3, [r5, #0]
 80033bc:	d032      	beq.n	8003424 <__sflush_r+0x94>
 80033be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80033c0:	89a3      	ldrh	r3, [r4, #12]
 80033c2:	075a      	lsls	r2, r3, #29
 80033c4:	d505      	bpl.n	80033d2 <__sflush_r+0x42>
 80033c6:	6863      	ldr	r3, [r4, #4]
 80033c8:	1ac0      	subs	r0, r0, r3
 80033ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80033cc:	b10b      	cbz	r3, 80033d2 <__sflush_r+0x42>
 80033ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80033d0:	1ac0      	subs	r0, r0, r3
 80033d2:	2300      	movs	r3, #0
 80033d4:	4602      	mov	r2, r0
 80033d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80033d8:	4628      	mov	r0, r5
 80033da:	6a21      	ldr	r1, [r4, #32]
 80033dc:	47b0      	blx	r6
 80033de:	1c43      	adds	r3, r0, #1
 80033e0:	89a3      	ldrh	r3, [r4, #12]
 80033e2:	d106      	bne.n	80033f2 <__sflush_r+0x62>
 80033e4:	6829      	ldr	r1, [r5, #0]
 80033e6:	291d      	cmp	r1, #29
 80033e8:	d82c      	bhi.n	8003444 <__sflush_r+0xb4>
 80033ea:	4a29      	ldr	r2, [pc, #164]	; (8003490 <__sflush_r+0x100>)
 80033ec:	40ca      	lsrs	r2, r1
 80033ee:	07d6      	lsls	r6, r2, #31
 80033f0:	d528      	bpl.n	8003444 <__sflush_r+0xb4>
 80033f2:	2200      	movs	r2, #0
 80033f4:	6062      	str	r2, [r4, #4]
 80033f6:	6922      	ldr	r2, [r4, #16]
 80033f8:	04d9      	lsls	r1, r3, #19
 80033fa:	6022      	str	r2, [r4, #0]
 80033fc:	d504      	bpl.n	8003408 <__sflush_r+0x78>
 80033fe:	1c42      	adds	r2, r0, #1
 8003400:	d101      	bne.n	8003406 <__sflush_r+0x76>
 8003402:	682b      	ldr	r3, [r5, #0]
 8003404:	b903      	cbnz	r3, 8003408 <__sflush_r+0x78>
 8003406:	6560      	str	r0, [r4, #84]	; 0x54
 8003408:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800340a:	602f      	str	r7, [r5, #0]
 800340c:	2900      	cmp	r1, #0
 800340e:	d0cb      	beq.n	80033a8 <__sflush_r+0x18>
 8003410:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003414:	4299      	cmp	r1, r3
 8003416:	d002      	beq.n	800341e <__sflush_r+0x8e>
 8003418:	4628      	mov	r0, r5
 800341a:	f000 f9d5 	bl	80037c8 <_free_r>
 800341e:	2000      	movs	r0, #0
 8003420:	6360      	str	r0, [r4, #52]	; 0x34
 8003422:	e7c2      	b.n	80033aa <__sflush_r+0x1a>
 8003424:	6a21      	ldr	r1, [r4, #32]
 8003426:	2301      	movs	r3, #1
 8003428:	4628      	mov	r0, r5
 800342a:	47b0      	blx	r6
 800342c:	1c41      	adds	r1, r0, #1
 800342e:	d1c7      	bne.n	80033c0 <__sflush_r+0x30>
 8003430:	682b      	ldr	r3, [r5, #0]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d0c4      	beq.n	80033c0 <__sflush_r+0x30>
 8003436:	2b1d      	cmp	r3, #29
 8003438:	d001      	beq.n	800343e <__sflush_r+0xae>
 800343a:	2b16      	cmp	r3, #22
 800343c:	d101      	bne.n	8003442 <__sflush_r+0xb2>
 800343e:	602f      	str	r7, [r5, #0]
 8003440:	e7b2      	b.n	80033a8 <__sflush_r+0x18>
 8003442:	89a3      	ldrh	r3, [r4, #12]
 8003444:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003448:	81a3      	strh	r3, [r4, #12]
 800344a:	e7ae      	b.n	80033aa <__sflush_r+0x1a>
 800344c:	690f      	ldr	r7, [r1, #16]
 800344e:	2f00      	cmp	r7, #0
 8003450:	d0aa      	beq.n	80033a8 <__sflush_r+0x18>
 8003452:	0793      	lsls	r3, r2, #30
 8003454:	bf18      	it	ne
 8003456:	2300      	movne	r3, #0
 8003458:	680e      	ldr	r6, [r1, #0]
 800345a:	bf08      	it	eq
 800345c:	694b      	ldreq	r3, [r1, #20]
 800345e:	1bf6      	subs	r6, r6, r7
 8003460:	600f      	str	r7, [r1, #0]
 8003462:	608b      	str	r3, [r1, #8]
 8003464:	2e00      	cmp	r6, #0
 8003466:	dd9f      	ble.n	80033a8 <__sflush_r+0x18>
 8003468:	4633      	mov	r3, r6
 800346a:	463a      	mov	r2, r7
 800346c:	4628      	mov	r0, r5
 800346e:	6a21      	ldr	r1, [r4, #32]
 8003470:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003474:	47e0      	blx	ip
 8003476:	2800      	cmp	r0, #0
 8003478:	dc06      	bgt.n	8003488 <__sflush_r+0xf8>
 800347a:	89a3      	ldrh	r3, [r4, #12]
 800347c:	f04f 30ff 	mov.w	r0, #4294967295
 8003480:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003484:	81a3      	strh	r3, [r4, #12]
 8003486:	e790      	b.n	80033aa <__sflush_r+0x1a>
 8003488:	4407      	add	r7, r0
 800348a:	1a36      	subs	r6, r6, r0
 800348c:	e7ea      	b.n	8003464 <__sflush_r+0xd4>
 800348e:	bf00      	nop
 8003490:	20400001 	.word	0x20400001

08003494 <_fflush_r>:
 8003494:	b538      	push	{r3, r4, r5, lr}
 8003496:	690b      	ldr	r3, [r1, #16]
 8003498:	4605      	mov	r5, r0
 800349a:	460c      	mov	r4, r1
 800349c:	b913      	cbnz	r3, 80034a4 <_fflush_r+0x10>
 800349e:	2500      	movs	r5, #0
 80034a0:	4628      	mov	r0, r5
 80034a2:	bd38      	pop	{r3, r4, r5, pc}
 80034a4:	b118      	cbz	r0, 80034ae <_fflush_r+0x1a>
 80034a6:	6983      	ldr	r3, [r0, #24]
 80034a8:	b90b      	cbnz	r3, 80034ae <_fflush_r+0x1a>
 80034aa:	f000 f887 	bl	80035bc <__sinit>
 80034ae:	4b14      	ldr	r3, [pc, #80]	; (8003500 <_fflush_r+0x6c>)
 80034b0:	429c      	cmp	r4, r3
 80034b2:	d11b      	bne.n	80034ec <_fflush_r+0x58>
 80034b4:	686c      	ldr	r4, [r5, #4]
 80034b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d0ef      	beq.n	800349e <_fflush_r+0xa>
 80034be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80034c0:	07d0      	lsls	r0, r2, #31
 80034c2:	d404      	bmi.n	80034ce <_fflush_r+0x3a>
 80034c4:	0599      	lsls	r1, r3, #22
 80034c6:	d402      	bmi.n	80034ce <_fflush_r+0x3a>
 80034c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80034ca:	f000 f915 	bl	80036f8 <__retarget_lock_acquire_recursive>
 80034ce:	4628      	mov	r0, r5
 80034d0:	4621      	mov	r1, r4
 80034d2:	f7ff ff5d 	bl	8003390 <__sflush_r>
 80034d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80034d8:	4605      	mov	r5, r0
 80034da:	07da      	lsls	r2, r3, #31
 80034dc:	d4e0      	bmi.n	80034a0 <_fflush_r+0xc>
 80034de:	89a3      	ldrh	r3, [r4, #12]
 80034e0:	059b      	lsls	r3, r3, #22
 80034e2:	d4dd      	bmi.n	80034a0 <_fflush_r+0xc>
 80034e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80034e6:	f000 f908 	bl	80036fa <__retarget_lock_release_recursive>
 80034ea:	e7d9      	b.n	80034a0 <_fflush_r+0xc>
 80034ec:	4b05      	ldr	r3, [pc, #20]	; (8003504 <_fflush_r+0x70>)
 80034ee:	429c      	cmp	r4, r3
 80034f0:	d101      	bne.n	80034f6 <_fflush_r+0x62>
 80034f2:	68ac      	ldr	r4, [r5, #8]
 80034f4:	e7df      	b.n	80034b6 <_fflush_r+0x22>
 80034f6:	4b04      	ldr	r3, [pc, #16]	; (8003508 <_fflush_r+0x74>)
 80034f8:	429c      	cmp	r4, r3
 80034fa:	bf08      	it	eq
 80034fc:	68ec      	ldreq	r4, [r5, #12]
 80034fe:	e7da      	b.n	80034b6 <_fflush_r+0x22>
 8003500:	08004524 	.word	0x08004524
 8003504:	08004544 	.word	0x08004544
 8003508:	08004504 	.word	0x08004504

0800350c <std>:
 800350c:	2300      	movs	r3, #0
 800350e:	b510      	push	{r4, lr}
 8003510:	4604      	mov	r4, r0
 8003512:	e9c0 3300 	strd	r3, r3, [r0]
 8003516:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800351a:	6083      	str	r3, [r0, #8]
 800351c:	8181      	strh	r1, [r0, #12]
 800351e:	6643      	str	r3, [r0, #100]	; 0x64
 8003520:	81c2      	strh	r2, [r0, #14]
 8003522:	6183      	str	r3, [r0, #24]
 8003524:	4619      	mov	r1, r3
 8003526:	2208      	movs	r2, #8
 8003528:	305c      	adds	r0, #92	; 0x5c
 800352a:	f7ff fdbb 	bl	80030a4 <memset>
 800352e:	4b05      	ldr	r3, [pc, #20]	; (8003544 <std+0x38>)
 8003530:	6224      	str	r4, [r4, #32]
 8003532:	6263      	str	r3, [r4, #36]	; 0x24
 8003534:	4b04      	ldr	r3, [pc, #16]	; (8003548 <std+0x3c>)
 8003536:	62a3      	str	r3, [r4, #40]	; 0x28
 8003538:	4b04      	ldr	r3, [pc, #16]	; (800354c <std+0x40>)
 800353a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800353c:	4b04      	ldr	r3, [pc, #16]	; (8003550 <std+0x44>)
 800353e:	6323      	str	r3, [r4, #48]	; 0x30
 8003540:	bd10      	pop	{r4, pc}
 8003542:	bf00      	nop
 8003544:	08004235 	.word	0x08004235
 8003548:	08004257 	.word	0x08004257
 800354c:	0800428f 	.word	0x0800428f
 8003550:	080042b3 	.word	0x080042b3

08003554 <_cleanup_r>:
 8003554:	4901      	ldr	r1, [pc, #4]	; (800355c <_cleanup_r+0x8>)
 8003556:	f000 b8af 	b.w	80036b8 <_fwalk_reent>
 800355a:	bf00      	nop
 800355c:	08003495 	.word	0x08003495

08003560 <__sfmoreglue>:
 8003560:	2268      	movs	r2, #104	; 0x68
 8003562:	b570      	push	{r4, r5, r6, lr}
 8003564:	1e4d      	subs	r5, r1, #1
 8003566:	4355      	muls	r5, r2
 8003568:	460e      	mov	r6, r1
 800356a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800356e:	f000 f993 	bl	8003898 <_malloc_r>
 8003572:	4604      	mov	r4, r0
 8003574:	b140      	cbz	r0, 8003588 <__sfmoreglue+0x28>
 8003576:	2100      	movs	r1, #0
 8003578:	e9c0 1600 	strd	r1, r6, [r0]
 800357c:	300c      	adds	r0, #12
 800357e:	60a0      	str	r0, [r4, #8]
 8003580:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003584:	f7ff fd8e 	bl	80030a4 <memset>
 8003588:	4620      	mov	r0, r4
 800358a:	bd70      	pop	{r4, r5, r6, pc}

0800358c <__sfp_lock_acquire>:
 800358c:	4801      	ldr	r0, [pc, #4]	; (8003594 <__sfp_lock_acquire+0x8>)
 800358e:	f000 b8b3 	b.w	80036f8 <__retarget_lock_acquire_recursive>
 8003592:	bf00      	nop
 8003594:	20000235 	.word	0x20000235

08003598 <__sfp_lock_release>:
 8003598:	4801      	ldr	r0, [pc, #4]	; (80035a0 <__sfp_lock_release+0x8>)
 800359a:	f000 b8ae 	b.w	80036fa <__retarget_lock_release_recursive>
 800359e:	bf00      	nop
 80035a0:	20000235 	.word	0x20000235

080035a4 <__sinit_lock_acquire>:
 80035a4:	4801      	ldr	r0, [pc, #4]	; (80035ac <__sinit_lock_acquire+0x8>)
 80035a6:	f000 b8a7 	b.w	80036f8 <__retarget_lock_acquire_recursive>
 80035aa:	bf00      	nop
 80035ac:	20000236 	.word	0x20000236

080035b0 <__sinit_lock_release>:
 80035b0:	4801      	ldr	r0, [pc, #4]	; (80035b8 <__sinit_lock_release+0x8>)
 80035b2:	f000 b8a2 	b.w	80036fa <__retarget_lock_release_recursive>
 80035b6:	bf00      	nop
 80035b8:	20000236 	.word	0x20000236

080035bc <__sinit>:
 80035bc:	b510      	push	{r4, lr}
 80035be:	4604      	mov	r4, r0
 80035c0:	f7ff fff0 	bl	80035a4 <__sinit_lock_acquire>
 80035c4:	69a3      	ldr	r3, [r4, #24]
 80035c6:	b11b      	cbz	r3, 80035d0 <__sinit+0x14>
 80035c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035cc:	f7ff bff0 	b.w	80035b0 <__sinit_lock_release>
 80035d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80035d4:	6523      	str	r3, [r4, #80]	; 0x50
 80035d6:	4b13      	ldr	r3, [pc, #76]	; (8003624 <__sinit+0x68>)
 80035d8:	4a13      	ldr	r2, [pc, #76]	; (8003628 <__sinit+0x6c>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	62a2      	str	r2, [r4, #40]	; 0x28
 80035de:	42a3      	cmp	r3, r4
 80035e0:	bf08      	it	eq
 80035e2:	2301      	moveq	r3, #1
 80035e4:	4620      	mov	r0, r4
 80035e6:	bf08      	it	eq
 80035e8:	61a3      	streq	r3, [r4, #24]
 80035ea:	f000 f81f 	bl	800362c <__sfp>
 80035ee:	6060      	str	r0, [r4, #4]
 80035f0:	4620      	mov	r0, r4
 80035f2:	f000 f81b 	bl	800362c <__sfp>
 80035f6:	60a0      	str	r0, [r4, #8]
 80035f8:	4620      	mov	r0, r4
 80035fa:	f000 f817 	bl	800362c <__sfp>
 80035fe:	2200      	movs	r2, #0
 8003600:	2104      	movs	r1, #4
 8003602:	60e0      	str	r0, [r4, #12]
 8003604:	6860      	ldr	r0, [r4, #4]
 8003606:	f7ff ff81 	bl	800350c <std>
 800360a:	2201      	movs	r2, #1
 800360c:	2109      	movs	r1, #9
 800360e:	68a0      	ldr	r0, [r4, #8]
 8003610:	f7ff ff7c 	bl	800350c <std>
 8003614:	2202      	movs	r2, #2
 8003616:	2112      	movs	r1, #18
 8003618:	68e0      	ldr	r0, [r4, #12]
 800361a:	f7ff ff77 	bl	800350c <std>
 800361e:	2301      	movs	r3, #1
 8003620:	61a3      	str	r3, [r4, #24]
 8003622:	e7d1      	b.n	80035c8 <__sinit+0xc>
 8003624:	08004500 	.word	0x08004500
 8003628:	08003555 	.word	0x08003555

0800362c <__sfp>:
 800362c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800362e:	4607      	mov	r7, r0
 8003630:	f7ff ffac 	bl	800358c <__sfp_lock_acquire>
 8003634:	4b1e      	ldr	r3, [pc, #120]	; (80036b0 <__sfp+0x84>)
 8003636:	681e      	ldr	r6, [r3, #0]
 8003638:	69b3      	ldr	r3, [r6, #24]
 800363a:	b913      	cbnz	r3, 8003642 <__sfp+0x16>
 800363c:	4630      	mov	r0, r6
 800363e:	f7ff ffbd 	bl	80035bc <__sinit>
 8003642:	3648      	adds	r6, #72	; 0x48
 8003644:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003648:	3b01      	subs	r3, #1
 800364a:	d503      	bpl.n	8003654 <__sfp+0x28>
 800364c:	6833      	ldr	r3, [r6, #0]
 800364e:	b30b      	cbz	r3, 8003694 <__sfp+0x68>
 8003650:	6836      	ldr	r6, [r6, #0]
 8003652:	e7f7      	b.n	8003644 <__sfp+0x18>
 8003654:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003658:	b9d5      	cbnz	r5, 8003690 <__sfp+0x64>
 800365a:	4b16      	ldr	r3, [pc, #88]	; (80036b4 <__sfp+0x88>)
 800365c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003660:	60e3      	str	r3, [r4, #12]
 8003662:	6665      	str	r5, [r4, #100]	; 0x64
 8003664:	f000 f847 	bl	80036f6 <__retarget_lock_init_recursive>
 8003668:	f7ff ff96 	bl	8003598 <__sfp_lock_release>
 800366c:	2208      	movs	r2, #8
 800366e:	4629      	mov	r1, r5
 8003670:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003674:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003678:	6025      	str	r5, [r4, #0]
 800367a:	61a5      	str	r5, [r4, #24]
 800367c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003680:	f7ff fd10 	bl	80030a4 <memset>
 8003684:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003688:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800368c:	4620      	mov	r0, r4
 800368e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003690:	3468      	adds	r4, #104	; 0x68
 8003692:	e7d9      	b.n	8003648 <__sfp+0x1c>
 8003694:	2104      	movs	r1, #4
 8003696:	4638      	mov	r0, r7
 8003698:	f7ff ff62 	bl	8003560 <__sfmoreglue>
 800369c:	4604      	mov	r4, r0
 800369e:	6030      	str	r0, [r6, #0]
 80036a0:	2800      	cmp	r0, #0
 80036a2:	d1d5      	bne.n	8003650 <__sfp+0x24>
 80036a4:	f7ff ff78 	bl	8003598 <__sfp_lock_release>
 80036a8:	230c      	movs	r3, #12
 80036aa:	603b      	str	r3, [r7, #0]
 80036ac:	e7ee      	b.n	800368c <__sfp+0x60>
 80036ae:	bf00      	nop
 80036b0:	08004500 	.word	0x08004500
 80036b4:	ffff0001 	.word	0xffff0001

080036b8 <_fwalk_reent>:
 80036b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036bc:	4606      	mov	r6, r0
 80036be:	4688      	mov	r8, r1
 80036c0:	2700      	movs	r7, #0
 80036c2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80036c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80036ca:	f1b9 0901 	subs.w	r9, r9, #1
 80036ce:	d505      	bpl.n	80036dc <_fwalk_reent+0x24>
 80036d0:	6824      	ldr	r4, [r4, #0]
 80036d2:	2c00      	cmp	r4, #0
 80036d4:	d1f7      	bne.n	80036c6 <_fwalk_reent+0xe>
 80036d6:	4638      	mov	r0, r7
 80036d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036dc:	89ab      	ldrh	r3, [r5, #12]
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d907      	bls.n	80036f2 <_fwalk_reent+0x3a>
 80036e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80036e6:	3301      	adds	r3, #1
 80036e8:	d003      	beq.n	80036f2 <_fwalk_reent+0x3a>
 80036ea:	4629      	mov	r1, r5
 80036ec:	4630      	mov	r0, r6
 80036ee:	47c0      	blx	r8
 80036f0:	4307      	orrs	r7, r0
 80036f2:	3568      	adds	r5, #104	; 0x68
 80036f4:	e7e9      	b.n	80036ca <_fwalk_reent+0x12>

080036f6 <__retarget_lock_init_recursive>:
 80036f6:	4770      	bx	lr

080036f8 <__retarget_lock_acquire_recursive>:
 80036f8:	4770      	bx	lr

080036fa <__retarget_lock_release_recursive>:
 80036fa:	4770      	bx	lr

080036fc <__swhatbuf_r>:
 80036fc:	b570      	push	{r4, r5, r6, lr}
 80036fe:	460e      	mov	r6, r1
 8003700:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003704:	4614      	mov	r4, r2
 8003706:	2900      	cmp	r1, #0
 8003708:	461d      	mov	r5, r3
 800370a:	b096      	sub	sp, #88	; 0x58
 800370c:	da08      	bge.n	8003720 <__swhatbuf_r+0x24>
 800370e:	2200      	movs	r2, #0
 8003710:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003714:	602a      	str	r2, [r5, #0]
 8003716:	061a      	lsls	r2, r3, #24
 8003718:	d410      	bmi.n	800373c <__swhatbuf_r+0x40>
 800371a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800371e:	e00e      	b.n	800373e <__swhatbuf_r+0x42>
 8003720:	466a      	mov	r2, sp
 8003722:	f000 fded 	bl	8004300 <_fstat_r>
 8003726:	2800      	cmp	r0, #0
 8003728:	dbf1      	blt.n	800370e <__swhatbuf_r+0x12>
 800372a:	9a01      	ldr	r2, [sp, #4]
 800372c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003730:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003734:	425a      	negs	r2, r3
 8003736:	415a      	adcs	r2, r3
 8003738:	602a      	str	r2, [r5, #0]
 800373a:	e7ee      	b.n	800371a <__swhatbuf_r+0x1e>
 800373c:	2340      	movs	r3, #64	; 0x40
 800373e:	2000      	movs	r0, #0
 8003740:	6023      	str	r3, [r4, #0]
 8003742:	b016      	add	sp, #88	; 0x58
 8003744:	bd70      	pop	{r4, r5, r6, pc}
	...

08003748 <__smakebuf_r>:
 8003748:	898b      	ldrh	r3, [r1, #12]
 800374a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800374c:	079d      	lsls	r5, r3, #30
 800374e:	4606      	mov	r6, r0
 8003750:	460c      	mov	r4, r1
 8003752:	d507      	bpl.n	8003764 <__smakebuf_r+0x1c>
 8003754:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003758:	6023      	str	r3, [r4, #0]
 800375a:	6123      	str	r3, [r4, #16]
 800375c:	2301      	movs	r3, #1
 800375e:	6163      	str	r3, [r4, #20]
 8003760:	b002      	add	sp, #8
 8003762:	bd70      	pop	{r4, r5, r6, pc}
 8003764:	466a      	mov	r2, sp
 8003766:	ab01      	add	r3, sp, #4
 8003768:	f7ff ffc8 	bl	80036fc <__swhatbuf_r>
 800376c:	9900      	ldr	r1, [sp, #0]
 800376e:	4605      	mov	r5, r0
 8003770:	4630      	mov	r0, r6
 8003772:	f000 f891 	bl	8003898 <_malloc_r>
 8003776:	b948      	cbnz	r0, 800378c <__smakebuf_r+0x44>
 8003778:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800377c:	059a      	lsls	r2, r3, #22
 800377e:	d4ef      	bmi.n	8003760 <__smakebuf_r+0x18>
 8003780:	f023 0303 	bic.w	r3, r3, #3
 8003784:	f043 0302 	orr.w	r3, r3, #2
 8003788:	81a3      	strh	r3, [r4, #12]
 800378a:	e7e3      	b.n	8003754 <__smakebuf_r+0xc>
 800378c:	4b0d      	ldr	r3, [pc, #52]	; (80037c4 <__smakebuf_r+0x7c>)
 800378e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003790:	89a3      	ldrh	r3, [r4, #12]
 8003792:	6020      	str	r0, [r4, #0]
 8003794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003798:	81a3      	strh	r3, [r4, #12]
 800379a:	9b00      	ldr	r3, [sp, #0]
 800379c:	6120      	str	r0, [r4, #16]
 800379e:	6163      	str	r3, [r4, #20]
 80037a0:	9b01      	ldr	r3, [sp, #4]
 80037a2:	b15b      	cbz	r3, 80037bc <__smakebuf_r+0x74>
 80037a4:	4630      	mov	r0, r6
 80037a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80037aa:	f000 fdbb 	bl	8004324 <_isatty_r>
 80037ae:	b128      	cbz	r0, 80037bc <__smakebuf_r+0x74>
 80037b0:	89a3      	ldrh	r3, [r4, #12]
 80037b2:	f023 0303 	bic.w	r3, r3, #3
 80037b6:	f043 0301 	orr.w	r3, r3, #1
 80037ba:	81a3      	strh	r3, [r4, #12]
 80037bc:	89a0      	ldrh	r0, [r4, #12]
 80037be:	4305      	orrs	r5, r0
 80037c0:	81a5      	strh	r5, [r4, #12]
 80037c2:	e7cd      	b.n	8003760 <__smakebuf_r+0x18>
 80037c4:	08003555 	.word	0x08003555

080037c8 <_free_r>:
 80037c8:	b538      	push	{r3, r4, r5, lr}
 80037ca:	4605      	mov	r5, r0
 80037cc:	2900      	cmp	r1, #0
 80037ce:	d040      	beq.n	8003852 <_free_r+0x8a>
 80037d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037d4:	1f0c      	subs	r4, r1, #4
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	bfb8      	it	lt
 80037da:	18e4      	addlt	r4, r4, r3
 80037dc:	f000 fdfa 	bl	80043d4 <__malloc_lock>
 80037e0:	4a1c      	ldr	r2, [pc, #112]	; (8003854 <_free_r+0x8c>)
 80037e2:	6813      	ldr	r3, [r2, #0]
 80037e4:	b933      	cbnz	r3, 80037f4 <_free_r+0x2c>
 80037e6:	6063      	str	r3, [r4, #4]
 80037e8:	6014      	str	r4, [r2, #0]
 80037ea:	4628      	mov	r0, r5
 80037ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80037f0:	f000 bdf6 	b.w	80043e0 <__malloc_unlock>
 80037f4:	42a3      	cmp	r3, r4
 80037f6:	d908      	bls.n	800380a <_free_r+0x42>
 80037f8:	6820      	ldr	r0, [r4, #0]
 80037fa:	1821      	adds	r1, r4, r0
 80037fc:	428b      	cmp	r3, r1
 80037fe:	bf01      	itttt	eq
 8003800:	6819      	ldreq	r1, [r3, #0]
 8003802:	685b      	ldreq	r3, [r3, #4]
 8003804:	1809      	addeq	r1, r1, r0
 8003806:	6021      	streq	r1, [r4, #0]
 8003808:	e7ed      	b.n	80037e6 <_free_r+0x1e>
 800380a:	461a      	mov	r2, r3
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	b10b      	cbz	r3, 8003814 <_free_r+0x4c>
 8003810:	42a3      	cmp	r3, r4
 8003812:	d9fa      	bls.n	800380a <_free_r+0x42>
 8003814:	6811      	ldr	r1, [r2, #0]
 8003816:	1850      	adds	r0, r2, r1
 8003818:	42a0      	cmp	r0, r4
 800381a:	d10b      	bne.n	8003834 <_free_r+0x6c>
 800381c:	6820      	ldr	r0, [r4, #0]
 800381e:	4401      	add	r1, r0
 8003820:	1850      	adds	r0, r2, r1
 8003822:	4283      	cmp	r3, r0
 8003824:	6011      	str	r1, [r2, #0]
 8003826:	d1e0      	bne.n	80037ea <_free_r+0x22>
 8003828:	6818      	ldr	r0, [r3, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	4401      	add	r1, r0
 800382e:	6011      	str	r1, [r2, #0]
 8003830:	6053      	str	r3, [r2, #4]
 8003832:	e7da      	b.n	80037ea <_free_r+0x22>
 8003834:	d902      	bls.n	800383c <_free_r+0x74>
 8003836:	230c      	movs	r3, #12
 8003838:	602b      	str	r3, [r5, #0]
 800383a:	e7d6      	b.n	80037ea <_free_r+0x22>
 800383c:	6820      	ldr	r0, [r4, #0]
 800383e:	1821      	adds	r1, r4, r0
 8003840:	428b      	cmp	r3, r1
 8003842:	bf01      	itttt	eq
 8003844:	6819      	ldreq	r1, [r3, #0]
 8003846:	685b      	ldreq	r3, [r3, #4]
 8003848:	1809      	addeq	r1, r1, r0
 800384a:	6021      	streq	r1, [r4, #0]
 800384c:	6063      	str	r3, [r4, #4]
 800384e:	6054      	str	r4, [r2, #4]
 8003850:	e7cb      	b.n	80037ea <_free_r+0x22>
 8003852:	bd38      	pop	{r3, r4, r5, pc}
 8003854:	20000238 	.word	0x20000238

08003858 <sbrk_aligned>:
 8003858:	b570      	push	{r4, r5, r6, lr}
 800385a:	4e0e      	ldr	r6, [pc, #56]	; (8003894 <sbrk_aligned+0x3c>)
 800385c:	460c      	mov	r4, r1
 800385e:	6831      	ldr	r1, [r6, #0]
 8003860:	4605      	mov	r5, r0
 8003862:	b911      	cbnz	r1, 800386a <sbrk_aligned+0x12>
 8003864:	f000 fcd6 	bl	8004214 <_sbrk_r>
 8003868:	6030      	str	r0, [r6, #0]
 800386a:	4621      	mov	r1, r4
 800386c:	4628      	mov	r0, r5
 800386e:	f000 fcd1 	bl	8004214 <_sbrk_r>
 8003872:	1c43      	adds	r3, r0, #1
 8003874:	d00a      	beq.n	800388c <sbrk_aligned+0x34>
 8003876:	1cc4      	adds	r4, r0, #3
 8003878:	f024 0403 	bic.w	r4, r4, #3
 800387c:	42a0      	cmp	r0, r4
 800387e:	d007      	beq.n	8003890 <sbrk_aligned+0x38>
 8003880:	1a21      	subs	r1, r4, r0
 8003882:	4628      	mov	r0, r5
 8003884:	f000 fcc6 	bl	8004214 <_sbrk_r>
 8003888:	3001      	adds	r0, #1
 800388a:	d101      	bne.n	8003890 <sbrk_aligned+0x38>
 800388c:	f04f 34ff 	mov.w	r4, #4294967295
 8003890:	4620      	mov	r0, r4
 8003892:	bd70      	pop	{r4, r5, r6, pc}
 8003894:	2000023c 	.word	0x2000023c

08003898 <_malloc_r>:
 8003898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800389c:	1ccd      	adds	r5, r1, #3
 800389e:	f025 0503 	bic.w	r5, r5, #3
 80038a2:	3508      	adds	r5, #8
 80038a4:	2d0c      	cmp	r5, #12
 80038a6:	bf38      	it	cc
 80038a8:	250c      	movcc	r5, #12
 80038aa:	2d00      	cmp	r5, #0
 80038ac:	4607      	mov	r7, r0
 80038ae:	db01      	blt.n	80038b4 <_malloc_r+0x1c>
 80038b0:	42a9      	cmp	r1, r5
 80038b2:	d905      	bls.n	80038c0 <_malloc_r+0x28>
 80038b4:	230c      	movs	r3, #12
 80038b6:	2600      	movs	r6, #0
 80038b8:	603b      	str	r3, [r7, #0]
 80038ba:	4630      	mov	r0, r6
 80038bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038c0:	4e2e      	ldr	r6, [pc, #184]	; (800397c <_malloc_r+0xe4>)
 80038c2:	f000 fd87 	bl	80043d4 <__malloc_lock>
 80038c6:	6833      	ldr	r3, [r6, #0]
 80038c8:	461c      	mov	r4, r3
 80038ca:	bb34      	cbnz	r4, 800391a <_malloc_r+0x82>
 80038cc:	4629      	mov	r1, r5
 80038ce:	4638      	mov	r0, r7
 80038d0:	f7ff ffc2 	bl	8003858 <sbrk_aligned>
 80038d4:	1c43      	adds	r3, r0, #1
 80038d6:	4604      	mov	r4, r0
 80038d8:	d14d      	bne.n	8003976 <_malloc_r+0xde>
 80038da:	6834      	ldr	r4, [r6, #0]
 80038dc:	4626      	mov	r6, r4
 80038de:	2e00      	cmp	r6, #0
 80038e0:	d140      	bne.n	8003964 <_malloc_r+0xcc>
 80038e2:	6823      	ldr	r3, [r4, #0]
 80038e4:	4631      	mov	r1, r6
 80038e6:	4638      	mov	r0, r7
 80038e8:	eb04 0803 	add.w	r8, r4, r3
 80038ec:	f000 fc92 	bl	8004214 <_sbrk_r>
 80038f0:	4580      	cmp	r8, r0
 80038f2:	d13a      	bne.n	800396a <_malloc_r+0xd2>
 80038f4:	6821      	ldr	r1, [r4, #0]
 80038f6:	3503      	adds	r5, #3
 80038f8:	1a6d      	subs	r5, r5, r1
 80038fa:	f025 0503 	bic.w	r5, r5, #3
 80038fe:	3508      	adds	r5, #8
 8003900:	2d0c      	cmp	r5, #12
 8003902:	bf38      	it	cc
 8003904:	250c      	movcc	r5, #12
 8003906:	4638      	mov	r0, r7
 8003908:	4629      	mov	r1, r5
 800390a:	f7ff ffa5 	bl	8003858 <sbrk_aligned>
 800390e:	3001      	adds	r0, #1
 8003910:	d02b      	beq.n	800396a <_malloc_r+0xd2>
 8003912:	6823      	ldr	r3, [r4, #0]
 8003914:	442b      	add	r3, r5
 8003916:	6023      	str	r3, [r4, #0]
 8003918:	e00e      	b.n	8003938 <_malloc_r+0xa0>
 800391a:	6822      	ldr	r2, [r4, #0]
 800391c:	1b52      	subs	r2, r2, r5
 800391e:	d41e      	bmi.n	800395e <_malloc_r+0xc6>
 8003920:	2a0b      	cmp	r2, #11
 8003922:	d916      	bls.n	8003952 <_malloc_r+0xba>
 8003924:	1961      	adds	r1, r4, r5
 8003926:	42a3      	cmp	r3, r4
 8003928:	6025      	str	r5, [r4, #0]
 800392a:	bf18      	it	ne
 800392c:	6059      	strne	r1, [r3, #4]
 800392e:	6863      	ldr	r3, [r4, #4]
 8003930:	bf08      	it	eq
 8003932:	6031      	streq	r1, [r6, #0]
 8003934:	5162      	str	r2, [r4, r5]
 8003936:	604b      	str	r3, [r1, #4]
 8003938:	4638      	mov	r0, r7
 800393a:	f104 060b 	add.w	r6, r4, #11
 800393e:	f000 fd4f 	bl	80043e0 <__malloc_unlock>
 8003942:	f026 0607 	bic.w	r6, r6, #7
 8003946:	1d23      	adds	r3, r4, #4
 8003948:	1af2      	subs	r2, r6, r3
 800394a:	d0b6      	beq.n	80038ba <_malloc_r+0x22>
 800394c:	1b9b      	subs	r3, r3, r6
 800394e:	50a3      	str	r3, [r4, r2]
 8003950:	e7b3      	b.n	80038ba <_malloc_r+0x22>
 8003952:	6862      	ldr	r2, [r4, #4]
 8003954:	42a3      	cmp	r3, r4
 8003956:	bf0c      	ite	eq
 8003958:	6032      	streq	r2, [r6, #0]
 800395a:	605a      	strne	r2, [r3, #4]
 800395c:	e7ec      	b.n	8003938 <_malloc_r+0xa0>
 800395e:	4623      	mov	r3, r4
 8003960:	6864      	ldr	r4, [r4, #4]
 8003962:	e7b2      	b.n	80038ca <_malloc_r+0x32>
 8003964:	4634      	mov	r4, r6
 8003966:	6876      	ldr	r6, [r6, #4]
 8003968:	e7b9      	b.n	80038de <_malloc_r+0x46>
 800396a:	230c      	movs	r3, #12
 800396c:	4638      	mov	r0, r7
 800396e:	603b      	str	r3, [r7, #0]
 8003970:	f000 fd36 	bl	80043e0 <__malloc_unlock>
 8003974:	e7a1      	b.n	80038ba <_malloc_r+0x22>
 8003976:	6025      	str	r5, [r4, #0]
 8003978:	e7de      	b.n	8003938 <_malloc_r+0xa0>
 800397a:	bf00      	nop
 800397c:	20000238 	.word	0x20000238

08003980 <__ssputs_r>:
 8003980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003984:	688e      	ldr	r6, [r1, #8]
 8003986:	4682      	mov	sl, r0
 8003988:	429e      	cmp	r6, r3
 800398a:	460c      	mov	r4, r1
 800398c:	4690      	mov	r8, r2
 800398e:	461f      	mov	r7, r3
 8003990:	d838      	bhi.n	8003a04 <__ssputs_r+0x84>
 8003992:	898a      	ldrh	r2, [r1, #12]
 8003994:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003998:	d032      	beq.n	8003a00 <__ssputs_r+0x80>
 800399a:	6825      	ldr	r5, [r4, #0]
 800399c:	6909      	ldr	r1, [r1, #16]
 800399e:	3301      	adds	r3, #1
 80039a0:	eba5 0901 	sub.w	r9, r5, r1
 80039a4:	6965      	ldr	r5, [r4, #20]
 80039a6:	444b      	add	r3, r9
 80039a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80039ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80039b0:	106d      	asrs	r5, r5, #1
 80039b2:	429d      	cmp	r5, r3
 80039b4:	bf38      	it	cc
 80039b6:	461d      	movcc	r5, r3
 80039b8:	0553      	lsls	r3, r2, #21
 80039ba:	d531      	bpl.n	8003a20 <__ssputs_r+0xa0>
 80039bc:	4629      	mov	r1, r5
 80039be:	f7ff ff6b 	bl	8003898 <_malloc_r>
 80039c2:	4606      	mov	r6, r0
 80039c4:	b950      	cbnz	r0, 80039dc <__ssputs_r+0x5c>
 80039c6:	230c      	movs	r3, #12
 80039c8:	f04f 30ff 	mov.w	r0, #4294967295
 80039cc:	f8ca 3000 	str.w	r3, [sl]
 80039d0:	89a3      	ldrh	r3, [r4, #12]
 80039d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039d6:	81a3      	strh	r3, [r4, #12]
 80039d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039dc:	464a      	mov	r2, r9
 80039de:	6921      	ldr	r1, [r4, #16]
 80039e0:	f000 fcd0 	bl	8004384 <memcpy>
 80039e4:	89a3      	ldrh	r3, [r4, #12]
 80039e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80039ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039ee:	81a3      	strh	r3, [r4, #12]
 80039f0:	6126      	str	r6, [r4, #16]
 80039f2:	444e      	add	r6, r9
 80039f4:	6026      	str	r6, [r4, #0]
 80039f6:	463e      	mov	r6, r7
 80039f8:	6165      	str	r5, [r4, #20]
 80039fa:	eba5 0509 	sub.w	r5, r5, r9
 80039fe:	60a5      	str	r5, [r4, #8]
 8003a00:	42be      	cmp	r6, r7
 8003a02:	d900      	bls.n	8003a06 <__ssputs_r+0x86>
 8003a04:	463e      	mov	r6, r7
 8003a06:	4632      	mov	r2, r6
 8003a08:	4641      	mov	r1, r8
 8003a0a:	6820      	ldr	r0, [r4, #0]
 8003a0c:	f000 fcc8 	bl	80043a0 <memmove>
 8003a10:	68a3      	ldr	r3, [r4, #8]
 8003a12:	2000      	movs	r0, #0
 8003a14:	1b9b      	subs	r3, r3, r6
 8003a16:	60a3      	str	r3, [r4, #8]
 8003a18:	6823      	ldr	r3, [r4, #0]
 8003a1a:	4433      	add	r3, r6
 8003a1c:	6023      	str	r3, [r4, #0]
 8003a1e:	e7db      	b.n	80039d8 <__ssputs_r+0x58>
 8003a20:	462a      	mov	r2, r5
 8003a22:	f000 fce3 	bl	80043ec <_realloc_r>
 8003a26:	4606      	mov	r6, r0
 8003a28:	2800      	cmp	r0, #0
 8003a2a:	d1e1      	bne.n	80039f0 <__ssputs_r+0x70>
 8003a2c:	4650      	mov	r0, sl
 8003a2e:	6921      	ldr	r1, [r4, #16]
 8003a30:	f7ff feca 	bl	80037c8 <_free_r>
 8003a34:	e7c7      	b.n	80039c6 <__ssputs_r+0x46>
	...

08003a38 <_svfiprintf_r>:
 8003a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a3c:	4698      	mov	r8, r3
 8003a3e:	898b      	ldrh	r3, [r1, #12]
 8003a40:	4607      	mov	r7, r0
 8003a42:	061b      	lsls	r3, r3, #24
 8003a44:	460d      	mov	r5, r1
 8003a46:	4614      	mov	r4, r2
 8003a48:	b09d      	sub	sp, #116	; 0x74
 8003a4a:	d50e      	bpl.n	8003a6a <_svfiprintf_r+0x32>
 8003a4c:	690b      	ldr	r3, [r1, #16]
 8003a4e:	b963      	cbnz	r3, 8003a6a <_svfiprintf_r+0x32>
 8003a50:	2140      	movs	r1, #64	; 0x40
 8003a52:	f7ff ff21 	bl	8003898 <_malloc_r>
 8003a56:	6028      	str	r0, [r5, #0]
 8003a58:	6128      	str	r0, [r5, #16]
 8003a5a:	b920      	cbnz	r0, 8003a66 <_svfiprintf_r+0x2e>
 8003a5c:	230c      	movs	r3, #12
 8003a5e:	603b      	str	r3, [r7, #0]
 8003a60:	f04f 30ff 	mov.w	r0, #4294967295
 8003a64:	e0d1      	b.n	8003c0a <_svfiprintf_r+0x1d2>
 8003a66:	2340      	movs	r3, #64	; 0x40
 8003a68:	616b      	str	r3, [r5, #20]
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	9309      	str	r3, [sp, #36]	; 0x24
 8003a6e:	2320      	movs	r3, #32
 8003a70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003a74:	2330      	movs	r3, #48	; 0x30
 8003a76:	f04f 0901 	mov.w	r9, #1
 8003a7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a7e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003c24 <_svfiprintf_r+0x1ec>
 8003a82:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003a86:	4623      	mov	r3, r4
 8003a88:	469a      	mov	sl, r3
 8003a8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a8e:	b10a      	cbz	r2, 8003a94 <_svfiprintf_r+0x5c>
 8003a90:	2a25      	cmp	r2, #37	; 0x25
 8003a92:	d1f9      	bne.n	8003a88 <_svfiprintf_r+0x50>
 8003a94:	ebba 0b04 	subs.w	fp, sl, r4
 8003a98:	d00b      	beq.n	8003ab2 <_svfiprintf_r+0x7a>
 8003a9a:	465b      	mov	r3, fp
 8003a9c:	4622      	mov	r2, r4
 8003a9e:	4629      	mov	r1, r5
 8003aa0:	4638      	mov	r0, r7
 8003aa2:	f7ff ff6d 	bl	8003980 <__ssputs_r>
 8003aa6:	3001      	adds	r0, #1
 8003aa8:	f000 80aa 	beq.w	8003c00 <_svfiprintf_r+0x1c8>
 8003aac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003aae:	445a      	add	r2, fp
 8003ab0:	9209      	str	r2, [sp, #36]	; 0x24
 8003ab2:	f89a 3000 	ldrb.w	r3, [sl]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	f000 80a2 	beq.w	8003c00 <_svfiprintf_r+0x1c8>
 8003abc:	2300      	movs	r3, #0
 8003abe:	f04f 32ff 	mov.w	r2, #4294967295
 8003ac2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ac6:	f10a 0a01 	add.w	sl, sl, #1
 8003aca:	9304      	str	r3, [sp, #16]
 8003acc:	9307      	str	r3, [sp, #28]
 8003ace:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003ad2:	931a      	str	r3, [sp, #104]	; 0x68
 8003ad4:	4654      	mov	r4, sl
 8003ad6:	2205      	movs	r2, #5
 8003ad8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003adc:	4851      	ldr	r0, [pc, #324]	; (8003c24 <_svfiprintf_r+0x1ec>)
 8003ade:	f000 fc43 	bl	8004368 <memchr>
 8003ae2:	9a04      	ldr	r2, [sp, #16]
 8003ae4:	b9d8      	cbnz	r0, 8003b1e <_svfiprintf_r+0xe6>
 8003ae6:	06d0      	lsls	r0, r2, #27
 8003ae8:	bf44      	itt	mi
 8003aea:	2320      	movmi	r3, #32
 8003aec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003af0:	0711      	lsls	r1, r2, #28
 8003af2:	bf44      	itt	mi
 8003af4:	232b      	movmi	r3, #43	; 0x2b
 8003af6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003afa:	f89a 3000 	ldrb.w	r3, [sl]
 8003afe:	2b2a      	cmp	r3, #42	; 0x2a
 8003b00:	d015      	beq.n	8003b2e <_svfiprintf_r+0xf6>
 8003b02:	4654      	mov	r4, sl
 8003b04:	2000      	movs	r0, #0
 8003b06:	f04f 0c0a 	mov.w	ip, #10
 8003b0a:	9a07      	ldr	r2, [sp, #28]
 8003b0c:	4621      	mov	r1, r4
 8003b0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b12:	3b30      	subs	r3, #48	; 0x30
 8003b14:	2b09      	cmp	r3, #9
 8003b16:	d94e      	bls.n	8003bb6 <_svfiprintf_r+0x17e>
 8003b18:	b1b0      	cbz	r0, 8003b48 <_svfiprintf_r+0x110>
 8003b1a:	9207      	str	r2, [sp, #28]
 8003b1c:	e014      	b.n	8003b48 <_svfiprintf_r+0x110>
 8003b1e:	eba0 0308 	sub.w	r3, r0, r8
 8003b22:	fa09 f303 	lsl.w	r3, r9, r3
 8003b26:	4313      	orrs	r3, r2
 8003b28:	46a2      	mov	sl, r4
 8003b2a:	9304      	str	r3, [sp, #16]
 8003b2c:	e7d2      	b.n	8003ad4 <_svfiprintf_r+0x9c>
 8003b2e:	9b03      	ldr	r3, [sp, #12]
 8003b30:	1d19      	adds	r1, r3, #4
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	9103      	str	r1, [sp, #12]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	bfbb      	ittet	lt
 8003b3a:	425b      	neglt	r3, r3
 8003b3c:	f042 0202 	orrlt.w	r2, r2, #2
 8003b40:	9307      	strge	r3, [sp, #28]
 8003b42:	9307      	strlt	r3, [sp, #28]
 8003b44:	bfb8      	it	lt
 8003b46:	9204      	strlt	r2, [sp, #16]
 8003b48:	7823      	ldrb	r3, [r4, #0]
 8003b4a:	2b2e      	cmp	r3, #46	; 0x2e
 8003b4c:	d10c      	bne.n	8003b68 <_svfiprintf_r+0x130>
 8003b4e:	7863      	ldrb	r3, [r4, #1]
 8003b50:	2b2a      	cmp	r3, #42	; 0x2a
 8003b52:	d135      	bne.n	8003bc0 <_svfiprintf_r+0x188>
 8003b54:	9b03      	ldr	r3, [sp, #12]
 8003b56:	3402      	adds	r4, #2
 8003b58:	1d1a      	adds	r2, r3, #4
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	9203      	str	r2, [sp, #12]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	bfb8      	it	lt
 8003b62:	f04f 33ff 	movlt.w	r3, #4294967295
 8003b66:	9305      	str	r3, [sp, #20]
 8003b68:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003c28 <_svfiprintf_r+0x1f0>
 8003b6c:	2203      	movs	r2, #3
 8003b6e:	4650      	mov	r0, sl
 8003b70:	7821      	ldrb	r1, [r4, #0]
 8003b72:	f000 fbf9 	bl	8004368 <memchr>
 8003b76:	b140      	cbz	r0, 8003b8a <_svfiprintf_r+0x152>
 8003b78:	2340      	movs	r3, #64	; 0x40
 8003b7a:	eba0 000a 	sub.w	r0, r0, sl
 8003b7e:	fa03 f000 	lsl.w	r0, r3, r0
 8003b82:	9b04      	ldr	r3, [sp, #16]
 8003b84:	3401      	adds	r4, #1
 8003b86:	4303      	orrs	r3, r0
 8003b88:	9304      	str	r3, [sp, #16]
 8003b8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b8e:	2206      	movs	r2, #6
 8003b90:	4826      	ldr	r0, [pc, #152]	; (8003c2c <_svfiprintf_r+0x1f4>)
 8003b92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003b96:	f000 fbe7 	bl	8004368 <memchr>
 8003b9a:	2800      	cmp	r0, #0
 8003b9c:	d038      	beq.n	8003c10 <_svfiprintf_r+0x1d8>
 8003b9e:	4b24      	ldr	r3, [pc, #144]	; (8003c30 <_svfiprintf_r+0x1f8>)
 8003ba0:	bb1b      	cbnz	r3, 8003bea <_svfiprintf_r+0x1b2>
 8003ba2:	9b03      	ldr	r3, [sp, #12]
 8003ba4:	3307      	adds	r3, #7
 8003ba6:	f023 0307 	bic.w	r3, r3, #7
 8003baa:	3308      	adds	r3, #8
 8003bac:	9303      	str	r3, [sp, #12]
 8003bae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bb0:	4433      	add	r3, r6
 8003bb2:	9309      	str	r3, [sp, #36]	; 0x24
 8003bb4:	e767      	b.n	8003a86 <_svfiprintf_r+0x4e>
 8003bb6:	460c      	mov	r4, r1
 8003bb8:	2001      	movs	r0, #1
 8003bba:	fb0c 3202 	mla	r2, ip, r2, r3
 8003bbe:	e7a5      	b.n	8003b0c <_svfiprintf_r+0xd4>
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	f04f 0c0a 	mov.w	ip, #10
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	3401      	adds	r4, #1
 8003bca:	9305      	str	r3, [sp, #20]
 8003bcc:	4620      	mov	r0, r4
 8003bce:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003bd2:	3a30      	subs	r2, #48	; 0x30
 8003bd4:	2a09      	cmp	r2, #9
 8003bd6:	d903      	bls.n	8003be0 <_svfiprintf_r+0x1a8>
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d0c5      	beq.n	8003b68 <_svfiprintf_r+0x130>
 8003bdc:	9105      	str	r1, [sp, #20]
 8003bde:	e7c3      	b.n	8003b68 <_svfiprintf_r+0x130>
 8003be0:	4604      	mov	r4, r0
 8003be2:	2301      	movs	r3, #1
 8003be4:	fb0c 2101 	mla	r1, ip, r1, r2
 8003be8:	e7f0      	b.n	8003bcc <_svfiprintf_r+0x194>
 8003bea:	ab03      	add	r3, sp, #12
 8003bec:	9300      	str	r3, [sp, #0]
 8003bee:	462a      	mov	r2, r5
 8003bf0:	4638      	mov	r0, r7
 8003bf2:	4b10      	ldr	r3, [pc, #64]	; (8003c34 <_svfiprintf_r+0x1fc>)
 8003bf4:	a904      	add	r1, sp, #16
 8003bf6:	f3af 8000 	nop.w
 8003bfa:	1c42      	adds	r2, r0, #1
 8003bfc:	4606      	mov	r6, r0
 8003bfe:	d1d6      	bne.n	8003bae <_svfiprintf_r+0x176>
 8003c00:	89ab      	ldrh	r3, [r5, #12]
 8003c02:	065b      	lsls	r3, r3, #25
 8003c04:	f53f af2c 	bmi.w	8003a60 <_svfiprintf_r+0x28>
 8003c08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c0a:	b01d      	add	sp, #116	; 0x74
 8003c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c10:	ab03      	add	r3, sp, #12
 8003c12:	9300      	str	r3, [sp, #0]
 8003c14:	462a      	mov	r2, r5
 8003c16:	4638      	mov	r0, r7
 8003c18:	4b06      	ldr	r3, [pc, #24]	; (8003c34 <_svfiprintf_r+0x1fc>)
 8003c1a:	a904      	add	r1, sp, #16
 8003c1c:	f000 f9d4 	bl	8003fc8 <_printf_i>
 8003c20:	e7eb      	b.n	8003bfa <_svfiprintf_r+0x1c2>
 8003c22:	bf00      	nop
 8003c24:	08004564 	.word	0x08004564
 8003c28:	0800456a 	.word	0x0800456a
 8003c2c:	0800456e 	.word	0x0800456e
 8003c30:	00000000 	.word	0x00000000
 8003c34:	08003981 	.word	0x08003981

08003c38 <__sfputc_r>:
 8003c38:	6893      	ldr	r3, [r2, #8]
 8003c3a:	b410      	push	{r4}
 8003c3c:	3b01      	subs	r3, #1
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	6093      	str	r3, [r2, #8]
 8003c42:	da07      	bge.n	8003c54 <__sfputc_r+0x1c>
 8003c44:	6994      	ldr	r4, [r2, #24]
 8003c46:	42a3      	cmp	r3, r4
 8003c48:	db01      	blt.n	8003c4e <__sfputc_r+0x16>
 8003c4a:	290a      	cmp	r1, #10
 8003c4c:	d102      	bne.n	8003c54 <__sfputc_r+0x1c>
 8003c4e:	bc10      	pop	{r4}
 8003c50:	f7ff bade 	b.w	8003210 <__swbuf_r>
 8003c54:	6813      	ldr	r3, [r2, #0]
 8003c56:	1c58      	adds	r0, r3, #1
 8003c58:	6010      	str	r0, [r2, #0]
 8003c5a:	7019      	strb	r1, [r3, #0]
 8003c5c:	4608      	mov	r0, r1
 8003c5e:	bc10      	pop	{r4}
 8003c60:	4770      	bx	lr

08003c62 <__sfputs_r>:
 8003c62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c64:	4606      	mov	r6, r0
 8003c66:	460f      	mov	r7, r1
 8003c68:	4614      	mov	r4, r2
 8003c6a:	18d5      	adds	r5, r2, r3
 8003c6c:	42ac      	cmp	r4, r5
 8003c6e:	d101      	bne.n	8003c74 <__sfputs_r+0x12>
 8003c70:	2000      	movs	r0, #0
 8003c72:	e007      	b.n	8003c84 <__sfputs_r+0x22>
 8003c74:	463a      	mov	r2, r7
 8003c76:	4630      	mov	r0, r6
 8003c78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c7c:	f7ff ffdc 	bl	8003c38 <__sfputc_r>
 8003c80:	1c43      	adds	r3, r0, #1
 8003c82:	d1f3      	bne.n	8003c6c <__sfputs_r+0xa>
 8003c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003c88 <_vfiprintf_r>:
 8003c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c8c:	460d      	mov	r5, r1
 8003c8e:	4614      	mov	r4, r2
 8003c90:	4698      	mov	r8, r3
 8003c92:	4606      	mov	r6, r0
 8003c94:	b09d      	sub	sp, #116	; 0x74
 8003c96:	b118      	cbz	r0, 8003ca0 <_vfiprintf_r+0x18>
 8003c98:	6983      	ldr	r3, [r0, #24]
 8003c9a:	b90b      	cbnz	r3, 8003ca0 <_vfiprintf_r+0x18>
 8003c9c:	f7ff fc8e 	bl	80035bc <__sinit>
 8003ca0:	4b89      	ldr	r3, [pc, #548]	; (8003ec8 <_vfiprintf_r+0x240>)
 8003ca2:	429d      	cmp	r5, r3
 8003ca4:	d11b      	bne.n	8003cde <_vfiprintf_r+0x56>
 8003ca6:	6875      	ldr	r5, [r6, #4]
 8003ca8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003caa:	07d9      	lsls	r1, r3, #31
 8003cac:	d405      	bmi.n	8003cba <_vfiprintf_r+0x32>
 8003cae:	89ab      	ldrh	r3, [r5, #12]
 8003cb0:	059a      	lsls	r2, r3, #22
 8003cb2:	d402      	bmi.n	8003cba <_vfiprintf_r+0x32>
 8003cb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003cb6:	f7ff fd1f 	bl	80036f8 <__retarget_lock_acquire_recursive>
 8003cba:	89ab      	ldrh	r3, [r5, #12]
 8003cbc:	071b      	lsls	r3, r3, #28
 8003cbe:	d501      	bpl.n	8003cc4 <_vfiprintf_r+0x3c>
 8003cc0:	692b      	ldr	r3, [r5, #16]
 8003cc2:	b9eb      	cbnz	r3, 8003d00 <_vfiprintf_r+0x78>
 8003cc4:	4629      	mov	r1, r5
 8003cc6:	4630      	mov	r0, r6
 8003cc8:	f7ff faf4 	bl	80032b4 <__swsetup_r>
 8003ccc:	b1c0      	cbz	r0, 8003d00 <_vfiprintf_r+0x78>
 8003cce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003cd0:	07dc      	lsls	r4, r3, #31
 8003cd2:	d50e      	bpl.n	8003cf2 <_vfiprintf_r+0x6a>
 8003cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8003cd8:	b01d      	add	sp, #116	; 0x74
 8003cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cde:	4b7b      	ldr	r3, [pc, #492]	; (8003ecc <_vfiprintf_r+0x244>)
 8003ce0:	429d      	cmp	r5, r3
 8003ce2:	d101      	bne.n	8003ce8 <_vfiprintf_r+0x60>
 8003ce4:	68b5      	ldr	r5, [r6, #8]
 8003ce6:	e7df      	b.n	8003ca8 <_vfiprintf_r+0x20>
 8003ce8:	4b79      	ldr	r3, [pc, #484]	; (8003ed0 <_vfiprintf_r+0x248>)
 8003cea:	429d      	cmp	r5, r3
 8003cec:	bf08      	it	eq
 8003cee:	68f5      	ldreq	r5, [r6, #12]
 8003cf0:	e7da      	b.n	8003ca8 <_vfiprintf_r+0x20>
 8003cf2:	89ab      	ldrh	r3, [r5, #12]
 8003cf4:	0598      	lsls	r0, r3, #22
 8003cf6:	d4ed      	bmi.n	8003cd4 <_vfiprintf_r+0x4c>
 8003cf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003cfa:	f7ff fcfe 	bl	80036fa <__retarget_lock_release_recursive>
 8003cfe:	e7e9      	b.n	8003cd4 <_vfiprintf_r+0x4c>
 8003d00:	2300      	movs	r3, #0
 8003d02:	9309      	str	r3, [sp, #36]	; 0x24
 8003d04:	2320      	movs	r3, #32
 8003d06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d0a:	2330      	movs	r3, #48	; 0x30
 8003d0c:	f04f 0901 	mov.w	r9, #1
 8003d10:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d14:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003ed4 <_vfiprintf_r+0x24c>
 8003d18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d1c:	4623      	mov	r3, r4
 8003d1e:	469a      	mov	sl, r3
 8003d20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d24:	b10a      	cbz	r2, 8003d2a <_vfiprintf_r+0xa2>
 8003d26:	2a25      	cmp	r2, #37	; 0x25
 8003d28:	d1f9      	bne.n	8003d1e <_vfiprintf_r+0x96>
 8003d2a:	ebba 0b04 	subs.w	fp, sl, r4
 8003d2e:	d00b      	beq.n	8003d48 <_vfiprintf_r+0xc0>
 8003d30:	465b      	mov	r3, fp
 8003d32:	4622      	mov	r2, r4
 8003d34:	4629      	mov	r1, r5
 8003d36:	4630      	mov	r0, r6
 8003d38:	f7ff ff93 	bl	8003c62 <__sfputs_r>
 8003d3c:	3001      	adds	r0, #1
 8003d3e:	f000 80aa 	beq.w	8003e96 <_vfiprintf_r+0x20e>
 8003d42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d44:	445a      	add	r2, fp
 8003d46:	9209      	str	r2, [sp, #36]	; 0x24
 8003d48:	f89a 3000 	ldrb.w	r3, [sl]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 80a2 	beq.w	8003e96 <_vfiprintf_r+0x20e>
 8003d52:	2300      	movs	r3, #0
 8003d54:	f04f 32ff 	mov.w	r2, #4294967295
 8003d58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d5c:	f10a 0a01 	add.w	sl, sl, #1
 8003d60:	9304      	str	r3, [sp, #16]
 8003d62:	9307      	str	r3, [sp, #28]
 8003d64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d68:	931a      	str	r3, [sp, #104]	; 0x68
 8003d6a:	4654      	mov	r4, sl
 8003d6c:	2205      	movs	r2, #5
 8003d6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d72:	4858      	ldr	r0, [pc, #352]	; (8003ed4 <_vfiprintf_r+0x24c>)
 8003d74:	f000 faf8 	bl	8004368 <memchr>
 8003d78:	9a04      	ldr	r2, [sp, #16]
 8003d7a:	b9d8      	cbnz	r0, 8003db4 <_vfiprintf_r+0x12c>
 8003d7c:	06d1      	lsls	r1, r2, #27
 8003d7e:	bf44      	itt	mi
 8003d80:	2320      	movmi	r3, #32
 8003d82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d86:	0713      	lsls	r3, r2, #28
 8003d88:	bf44      	itt	mi
 8003d8a:	232b      	movmi	r3, #43	; 0x2b
 8003d8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d90:	f89a 3000 	ldrb.w	r3, [sl]
 8003d94:	2b2a      	cmp	r3, #42	; 0x2a
 8003d96:	d015      	beq.n	8003dc4 <_vfiprintf_r+0x13c>
 8003d98:	4654      	mov	r4, sl
 8003d9a:	2000      	movs	r0, #0
 8003d9c:	f04f 0c0a 	mov.w	ip, #10
 8003da0:	9a07      	ldr	r2, [sp, #28]
 8003da2:	4621      	mov	r1, r4
 8003da4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003da8:	3b30      	subs	r3, #48	; 0x30
 8003daa:	2b09      	cmp	r3, #9
 8003dac:	d94e      	bls.n	8003e4c <_vfiprintf_r+0x1c4>
 8003dae:	b1b0      	cbz	r0, 8003dde <_vfiprintf_r+0x156>
 8003db0:	9207      	str	r2, [sp, #28]
 8003db2:	e014      	b.n	8003dde <_vfiprintf_r+0x156>
 8003db4:	eba0 0308 	sub.w	r3, r0, r8
 8003db8:	fa09 f303 	lsl.w	r3, r9, r3
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	46a2      	mov	sl, r4
 8003dc0:	9304      	str	r3, [sp, #16]
 8003dc2:	e7d2      	b.n	8003d6a <_vfiprintf_r+0xe2>
 8003dc4:	9b03      	ldr	r3, [sp, #12]
 8003dc6:	1d19      	adds	r1, r3, #4
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	9103      	str	r1, [sp, #12]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	bfbb      	ittet	lt
 8003dd0:	425b      	neglt	r3, r3
 8003dd2:	f042 0202 	orrlt.w	r2, r2, #2
 8003dd6:	9307      	strge	r3, [sp, #28]
 8003dd8:	9307      	strlt	r3, [sp, #28]
 8003dda:	bfb8      	it	lt
 8003ddc:	9204      	strlt	r2, [sp, #16]
 8003dde:	7823      	ldrb	r3, [r4, #0]
 8003de0:	2b2e      	cmp	r3, #46	; 0x2e
 8003de2:	d10c      	bne.n	8003dfe <_vfiprintf_r+0x176>
 8003de4:	7863      	ldrb	r3, [r4, #1]
 8003de6:	2b2a      	cmp	r3, #42	; 0x2a
 8003de8:	d135      	bne.n	8003e56 <_vfiprintf_r+0x1ce>
 8003dea:	9b03      	ldr	r3, [sp, #12]
 8003dec:	3402      	adds	r4, #2
 8003dee:	1d1a      	adds	r2, r3, #4
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	9203      	str	r2, [sp, #12]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	bfb8      	it	lt
 8003df8:	f04f 33ff 	movlt.w	r3, #4294967295
 8003dfc:	9305      	str	r3, [sp, #20]
 8003dfe:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8003ed8 <_vfiprintf_r+0x250>
 8003e02:	2203      	movs	r2, #3
 8003e04:	4650      	mov	r0, sl
 8003e06:	7821      	ldrb	r1, [r4, #0]
 8003e08:	f000 faae 	bl	8004368 <memchr>
 8003e0c:	b140      	cbz	r0, 8003e20 <_vfiprintf_r+0x198>
 8003e0e:	2340      	movs	r3, #64	; 0x40
 8003e10:	eba0 000a 	sub.w	r0, r0, sl
 8003e14:	fa03 f000 	lsl.w	r0, r3, r0
 8003e18:	9b04      	ldr	r3, [sp, #16]
 8003e1a:	3401      	adds	r4, #1
 8003e1c:	4303      	orrs	r3, r0
 8003e1e:	9304      	str	r3, [sp, #16]
 8003e20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e24:	2206      	movs	r2, #6
 8003e26:	482d      	ldr	r0, [pc, #180]	; (8003edc <_vfiprintf_r+0x254>)
 8003e28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e2c:	f000 fa9c 	bl	8004368 <memchr>
 8003e30:	2800      	cmp	r0, #0
 8003e32:	d03f      	beq.n	8003eb4 <_vfiprintf_r+0x22c>
 8003e34:	4b2a      	ldr	r3, [pc, #168]	; (8003ee0 <_vfiprintf_r+0x258>)
 8003e36:	bb1b      	cbnz	r3, 8003e80 <_vfiprintf_r+0x1f8>
 8003e38:	9b03      	ldr	r3, [sp, #12]
 8003e3a:	3307      	adds	r3, #7
 8003e3c:	f023 0307 	bic.w	r3, r3, #7
 8003e40:	3308      	adds	r3, #8
 8003e42:	9303      	str	r3, [sp, #12]
 8003e44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e46:	443b      	add	r3, r7
 8003e48:	9309      	str	r3, [sp, #36]	; 0x24
 8003e4a:	e767      	b.n	8003d1c <_vfiprintf_r+0x94>
 8003e4c:	460c      	mov	r4, r1
 8003e4e:	2001      	movs	r0, #1
 8003e50:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e54:	e7a5      	b.n	8003da2 <_vfiprintf_r+0x11a>
 8003e56:	2300      	movs	r3, #0
 8003e58:	f04f 0c0a 	mov.w	ip, #10
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	3401      	adds	r4, #1
 8003e60:	9305      	str	r3, [sp, #20]
 8003e62:	4620      	mov	r0, r4
 8003e64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e68:	3a30      	subs	r2, #48	; 0x30
 8003e6a:	2a09      	cmp	r2, #9
 8003e6c:	d903      	bls.n	8003e76 <_vfiprintf_r+0x1ee>
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d0c5      	beq.n	8003dfe <_vfiprintf_r+0x176>
 8003e72:	9105      	str	r1, [sp, #20]
 8003e74:	e7c3      	b.n	8003dfe <_vfiprintf_r+0x176>
 8003e76:	4604      	mov	r4, r0
 8003e78:	2301      	movs	r3, #1
 8003e7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e7e:	e7f0      	b.n	8003e62 <_vfiprintf_r+0x1da>
 8003e80:	ab03      	add	r3, sp, #12
 8003e82:	9300      	str	r3, [sp, #0]
 8003e84:	462a      	mov	r2, r5
 8003e86:	4630      	mov	r0, r6
 8003e88:	4b16      	ldr	r3, [pc, #88]	; (8003ee4 <_vfiprintf_r+0x25c>)
 8003e8a:	a904      	add	r1, sp, #16
 8003e8c:	f3af 8000 	nop.w
 8003e90:	4607      	mov	r7, r0
 8003e92:	1c78      	adds	r0, r7, #1
 8003e94:	d1d6      	bne.n	8003e44 <_vfiprintf_r+0x1bc>
 8003e96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003e98:	07d9      	lsls	r1, r3, #31
 8003e9a:	d405      	bmi.n	8003ea8 <_vfiprintf_r+0x220>
 8003e9c:	89ab      	ldrh	r3, [r5, #12]
 8003e9e:	059a      	lsls	r2, r3, #22
 8003ea0:	d402      	bmi.n	8003ea8 <_vfiprintf_r+0x220>
 8003ea2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003ea4:	f7ff fc29 	bl	80036fa <__retarget_lock_release_recursive>
 8003ea8:	89ab      	ldrh	r3, [r5, #12]
 8003eaa:	065b      	lsls	r3, r3, #25
 8003eac:	f53f af12 	bmi.w	8003cd4 <_vfiprintf_r+0x4c>
 8003eb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003eb2:	e711      	b.n	8003cd8 <_vfiprintf_r+0x50>
 8003eb4:	ab03      	add	r3, sp, #12
 8003eb6:	9300      	str	r3, [sp, #0]
 8003eb8:	462a      	mov	r2, r5
 8003eba:	4630      	mov	r0, r6
 8003ebc:	4b09      	ldr	r3, [pc, #36]	; (8003ee4 <_vfiprintf_r+0x25c>)
 8003ebe:	a904      	add	r1, sp, #16
 8003ec0:	f000 f882 	bl	8003fc8 <_printf_i>
 8003ec4:	e7e4      	b.n	8003e90 <_vfiprintf_r+0x208>
 8003ec6:	bf00      	nop
 8003ec8:	08004524 	.word	0x08004524
 8003ecc:	08004544 	.word	0x08004544
 8003ed0:	08004504 	.word	0x08004504
 8003ed4:	08004564 	.word	0x08004564
 8003ed8:	0800456a 	.word	0x0800456a
 8003edc:	0800456e 	.word	0x0800456e
 8003ee0:	00000000 	.word	0x00000000
 8003ee4:	08003c63 	.word	0x08003c63

08003ee8 <_printf_common>:
 8003ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003eec:	4616      	mov	r6, r2
 8003eee:	4699      	mov	r9, r3
 8003ef0:	688a      	ldr	r2, [r1, #8]
 8003ef2:	690b      	ldr	r3, [r1, #16]
 8003ef4:	4607      	mov	r7, r0
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	bfb8      	it	lt
 8003efa:	4613      	movlt	r3, r2
 8003efc:	6033      	str	r3, [r6, #0]
 8003efe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f02:	460c      	mov	r4, r1
 8003f04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f08:	b10a      	cbz	r2, 8003f0e <_printf_common+0x26>
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	6033      	str	r3, [r6, #0]
 8003f0e:	6823      	ldr	r3, [r4, #0]
 8003f10:	0699      	lsls	r1, r3, #26
 8003f12:	bf42      	ittt	mi
 8003f14:	6833      	ldrmi	r3, [r6, #0]
 8003f16:	3302      	addmi	r3, #2
 8003f18:	6033      	strmi	r3, [r6, #0]
 8003f1a:	6825      	ldr	r5, [r4, #0]
 8003f1c:	f015 0506 	ands.w	r5, r5, #6
 8003f20:	d106      	bne.n	8003f30 <_printf_common+0x48>
 8003f22:	f104 0a19 	add.w	sl, r4, #25
 8003f26:	68e3      	ldr	r3, [r4, #12]
 8003f28:	6832      	ldr	r2, [r6, #0]
 8003f2a:	1a9b      	subs	r3, r3, r2
 8003f2c:	42ab      	cmp	r3, r5
 8003f2e:	dc28      	bgt.n	8003f82 <_printf_common+0x9a>
 8003f30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f34:	1e13      	subs	r3, r2, #0
 8003f36:	6822      	ldr	r2, [r4, #0]
 8003f38:	bf18      	it	ne
 8003f3a:	2301      	movne	r3, #1
 8003f3c:	0692      	lsls	r2, r2, #26
 8003f3e:	d42d      	bmi.n	8003f9c <_printf_common+0xb4>
 8003f40:	4649      	mov	r1, r9
 8003f42:	4638      	mov	r0, r7
 8003f44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f48:	47c0      	blx	r8
 8003f4a:	3001      	adds	r0, #1
 8003f4c:	d020      	beq.n	8003f90 <_printf_common+0xa8>
 8003f4e:	6823      	ldr	r3, [r4, #0]
 8003f50:	68e5      	ldr	r5, [r4, #12]
 8003f52:	f003 0306 	and.w	r3, r3, #6
 8003f56:	2b04      	cmp	r3, #4
 8003f58:	bf18      	it	ne
 8003f5a:	2500      	movne	r5, #0
 8003f5c:	6832      	ldr	r2, [r6, #0]
 8003f5e:	f04f 0600 	mov.w	r6, #0
 8003f62:	68a3      	ldr	r3, [r4, #8]
 8003f64:	bf08      	it	eq
 8003f66:	1aad      	subeq	r5, r5, r2
 8003f68:	6922      	ldr	r2, [r4, #16]
 8003f6a:	bf08      	it	eq
 8003f6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f70:	4293      	cmp	r3, r2
 8003f72:	bfc4      	itt	gt
 8003f74:	1a9b      	subgt	r3, r3, r2
 8003f76:	18ed      	addgt	r5, r5, r3
 8003f78:	341a      	adds	r4, #26
 8003f7a:	42b5      	cmp	r5, r6
 8003f7c:	d11a      	bne.n	8003fb4 <_printf_common+0xcc>
 8003f7e:	2000      	movs	r0, #0
 8003f80:	e008      	b.n	8003f94 <_printf_common+0xac>
 8003f82:	2301      	movs	r3, #1
 8003f84:	4652      	mov	r2, sl
 8003f86:	4649      	mov	r1, r9
 8003f88:	4638      	mov	r0, r7
 8003f8a:	47c0      	blx	r8
 8003f8c:	3001      	adds	r0, #1
 8003f8e:	d103      	bne.n	8003f98 <_printf_common+0xb0>
 8003f90:	f04f 30ff 	mov.w	r0, #4294967295
 8003f94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f98:	3501      	adds	r5, #1
 8003f9a:	e7c4      	b.n	8003f26 <_printf_common+0x3e>
 8003f9c:	2030      	movs	r0, #48	; 0x30
 8003f9e:	18e1      	adds	r1, r4, r3
 8003fa0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003fa4:	1c5a      	adds	r2, r3, #1
 8003fa6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003faa:	4422      	add	r2, r4
 8003fac:	3302      	adds	r3, #2
 8003fae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003fb2:	e7c5      	b.n	8003f40 <_printf_common+0x58>
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	4622      	mov	r2, r4
 8003fb8:	4649      	mov	r1, r9
 8003fba:	4638      	mov	r0, r7
 8003fbc:	47c0      	blx	r8
 8003fbe:	3001      	adds	r0, #1
 8003fc0:	d0e6      	beq.n	8003f90 <_printf_common+0xa8>
 8003fc2:	3601      	adds	r6, #1
 8003fc4:	e7d9      	b.n	8003f7a <_printf_common+0x92>
	...

08003fc8 <_printf_i>:
 8003fc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fcc:	7e0f      	ldrb	r7, [r1, #24]
 8003fce:	4691      	mov	r9, r2
 8003fd0:	2f78      	cmp	r7, #120	; 0x78
 8003fd2:	4680      	mov	r8, r0
 8003fd4:	460c      	mov	r4, r1
 8003fd6:	469a      	mov	sl, r3
 8003fd8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003fda:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003fde:	d807      	bhi.n	8003ff0 <_printf_i+0x28>
 8003fe0:	2f62      	cmp	r7, #98	; 0x62
 8003fe2:	d80a      	bhi.n	8003ffa <_printf_i+0x32>
 8003fe4:	2f00      	cmp	r7, #0
 8003fe6:	f000 80d9 	beq.w	800419c <_printf_i+0x1d4>
 8003fea:	2f58      	cmp	r7, #88	; 0x58
 8003fec:	f000 80a4 	beq.w	8004138 <_printf_i+0x170>
 8003ff0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ff4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ff8:	e03a      	b.n	8004070 <_printf_i+0xa8>
 8003ffa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003ffe:	2b15      	cmp	r3, #21
 8004000:	d8f6      	bhi.n	8003ff0 <_printf_i+0x28>
 8004002:	a101      	add	r1, pc, #4	; (adr r1, 8004008 <_printf_i+0x40>)
 8004004:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004008:	08004061 	.word	0x08004061
 800400c:	08004075 	.word	0x08004075
 8004010:	08003ff1 	.word	0x08003ff1
 8004014:	08003ff1 	.word	0x08003ff1
 8004018:	08003ff1 	.word	0x08003ff1
 800401c:	08003ff1 	.word	0x08003ff1
 8004020:	08004075 	.word	0x08004075
 8004024:	08003ff1 	.word	0x08003ff1
 8004028:	08003ff1 	.word	0x08003ff1
 800402c:	08003ff1 	.word	0x08003ff1
 8004030:	08003ff1 	.word	0x08003ff1
 8004034:	08004183 	.word	0x08004183
 8004038:	080040a5 	.word	0x080040a5
 800403c:	08004165 	.word	0x08004165
 8004040:	08003ff1 	.word	0x08003ff1
 8004044:	08003ff1 	.word	0x08003ff1
 8004048:	080041a5 	.word	0x080041a5
 800404c:	08003ff1 	.word	0x08003ff1
 8004050:	080040a5 	.word	0x080040a5
 8004054:	08003ff1 	.word	0x08003ff1
 8004058:	08003ff1 	.word	0x08003ff1
 800405c:	0800416d 	.word	0x0800416d
 8004060:	682b      	ldr	r3, [r5, #0]
 8004062:	1d1a      	adds	r2, r3, #4
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	602a      	str	r2, [r5, #0]
 8004068:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800406c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004070:	2301      	movs	r3, #1
 8004072:	e0a4      	b.n	80041be <_printf_i+0x1f6>
 8004074:	6820      	ldr	r0, [r4, #0]
 8004076:	6829      	ldr	r1, [r5, #0]
 8004078:	0606      	lsls	r6, r0, #24
 800407a:	f101 0304 	add.w	r3, r1, #4
 800407e:	d50a      	bpl.n	8004096 <_printf_i+0xce>
 8004080:	680e      	ldr	r6, [r1, #0]
 8004082:	602b      	str	r3, [r5, #0]
 8004084:	2e00      	cmp	r6, #0
 8004086:	da03      	bge.n	8004090 <_printf_i+0xc8>
 8004088:	232d      	movs	r3, #45	; 0x2d
 800408a:	4276      	negs	r6, r6
 800408c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004090:	230a      	movs	r3, #10
 8004092:	485e      	ldr	r0, [pc, #376]	; (800420c <_printf_i+0x244>)
 8004094:	e019      	b.n	80040ca <_printf_i+0x102>
 8004096:	680e      	ldr	r6, [r1, #0]
 8004098:	f010 0f40 	tst.w	r0, #64	; 0x40
 800409c:	602b      	str	r3, [r5, #0]
 800409e:	bf18      	it	ne
 80040a0:	b236      	sxthne	r6, r6
 80040a2:	e7ef      	b.n	8004084 <_printf_i+0xbc>
 80040a4:	682b      	ldr	r3, [r5, #0]
 80040a6:	6820      	ldr	r0, [r4, #0]
 80040a8:	1d19      	adds	r1, r3, #4
 80040aa:	6029      	str	r1, [r5, #0]
 80040ac:	0601      	lsls	r1, r0, #24
 80040ae:	d501      	bpl.n	80040b4 <_printf_i+0xec>
 80040b0:	681e      	ldr	r6, [r3, #0]
 80040b2:	e002      	b.n	80040ba <_printf_i+0xf2>
 80040b4:	0646      	lsls	r6, r0, #25
 80040b6:	d5fb      	bpl.n	80040b0 <_printf_i+0xe8>
 80040b8:	881e      	ldrh	r6, [r3, #0]
 80040ba:	2f6f      	cmp	r7, #111	; 0x6f
 80040bc:	bf0c      	ite	eq
 80040be:	2308      	moveq	r3, #8
 80040c0:	230a      	movne	r3, #10
 80040c2:	4852      	ldr	r0, [pc, #328]	; (800420c <_printf_i+0x244>)
 80040c4:	2100      	movs	r1, #0
 80040c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80040ca:	6865      	ldr	r5, [r4, #4]
 80040cc:	2d00      	cmp	r5, #0
 80040ce:	bfa8      	it	ge
 80040d0:	6821      	ldrge	r1, [r4, #0]
 80040d2:	60a5      	str	r5, [r4, #8]
 80040d4:	bfa4      	itt	ge
 80040d6:	f021 0104 	bicge.w	r1, r1, #4
 80040da:	6021      	strge	r1, [r4, #0]
 80040dc:	b90e      	cbnz	r6, 80040e2 <_printf_i+0x11a>
 80040de:	2d00      	cmp	r5, #0
 80040e0:	d04d      	beq.n	800417e <_printf_i+0x1b6>
 80040e2:	4615      	mov	r5, r2
 80040e4:	fbb6 f1f3 	udiv	r1, r6, r3
 80040e8:	fb03 6711 	mls	r7, r3, r1, r6
 80040ec:	5dc7      	ldrb	r7, [r0, r7]
 80040ee:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80040f2:	4637      	mov	r7, r6
 80040f4:	42bb      	cmp	r3, r7
 80040f6:	460e      	mov	r6, r1
 80040f8:	d9f4      	bls.n	80040e4 <_printf_i+0x11c>
 80040fa:	2b08      	cmp	r3, #8
 80040fc:	d10b      	bne.n	8004116 <_printf_i+0x14e>
 80040fe:	6823      	ldr	r3, [r4, #0]
 8004100:	07de      	lsls	r6, r3, #31
 8004102:	d508      	bpl.n	8004116 <_printf_i+0x14e>
 8004104:	6923      	ldr	r3, [r4, #16]
 8004106:	6861      	ldr	r1, [r4, #4]
 8004108:	4299      	cmp	r1, r3
 800410a:	bfde      	ittt	le
 800410c:	2330      	movle	r3, #48	; 0x30
 800410e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004112:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004116:	1b52      	subs	r2, r2, r5
 8004118:	6122      	str	r2, [r4, #16]
 800411a:	464b      	mov	r3, r9
 800411c:	4621      	mov	r1, r4
 800411e:	4640      	mov	r0, r8
 8004120:	f8cd a000 	str.w	sl, [sp]
 8004124:	aa03      	add	r2, sp, #12
 8004126:	f7ff fedf 	bl	8003ee8 <_printf_common>
 800412a:	3001      	adds	r0, #1
 800412c:	d14c      	bne.n	80041c8 <_printf_i+0x200>
 800412e:	f04f 30ff 	mov.w	r0, #4294967295
 8004132:	b004      	add	sp, #16
 8004134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004138:	4834      	ldr	r0, [pc, #208]	; (800420c <_printf_i+0x244>)
 800413a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800413e:	6829      	ldr	r1, [r5, #0]
 8004140:	6823      	ldr	r3, [r4, #0]
 8004142:	f851 6b04 	ldr.w	r6, [r1], #4
 8004146:	6029      	str	r1, [r5, #0]
 8004148:	061d      	lsls	r5, r3, #24
 800414a:	d514      	bpl.n	8004176 <_printf_i+0x1ae>
 800414c:	07df      	lsls	r7, r3, #31
 800414e:	bf44      	itt	mi
 8004150:	f043 0320 	orrmi.w	r3, r3, #32
 8004154:	6023      	strmi	r3, [r4, #0]
 8004156:	b91e      	cbnz	r6, 8004160 <_printf_i+0x198>
 8004158:	6823      	ldr	r3, [r4, #0]
 800415a:	f023 0320 	bic.w	r3, r3, #32
 800415e:	6023      	str	r3, [r4, #0]
 8004160:	2310      	movs	r3, #16
 8004162:	e7af      	b.n	80040c4 <_printf_i+0xfc>
 8004164:	6823      	ldr	r3, [r4, #0]
 8004166:	f043 0320 	orr.w	r3, r3, #32
 800416a:	6023      	str	r3, [r4, #0]
 800416c:	2378      	movs	r3, #120	; 0x78
 800416e:	4828      	ldr	r0, [pc, #160]	; (8004210 <_printf_i+0x248>)
 8004170:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004174:	e7e3      	b.n	800413e <_printf_i+0x176>
 8004176:	0659      	lsls	r1, r3, #25
 8004178:	bf48      	it	mi
 800417a:	b2b6      	uxthmi	r6, r6
 800417c:	e7e6      	b.n	800414c <_printf_i+0x184>
 800417e:	4615      	mov	r5, r2
 8004180:	e7bb      	b.n	80040fa <_printf_i+0x132>
 8004182:	682b      	ldr	r3, [r5, #0]
 8004184:	6826      	ldr	r6, [r4, #0]
 8004186:	1d18      	adds	r0, r3, #4
 8004188:	6961      	ldr	r1, [r4, #20]
 800418a:	6028      	str	r0, [r5, #0]
 800418c:	0635      	lsls	r5, r6, #24
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	d501      	bpl.n	8004196 <_printf_i+0x1ce>
 8004192:	6019      	str	r1, [r3, #0]
 8004194:	e002      	b.n	800419c <_printf_i+0x1d4>
 8004196:	0670      	lsls	r0, r6, #25
 8004198:	d5fb      	bpl.n	8004192 <_printf_i+0x1ca>
 800419a:	8019      	strh	r1, [r3, #0]
 800419c:	2300      	movs	r3, #0
 800419e:	4615      	mov	r5, r2
 80041a0:	6123      	str	r3, [r4, #16]
 80041a2:	e7ba      	b.n	800411a <_printf_i+0x152>
 80041a4:	682b      	ldr	r3, [r5, #0]
 80041a6:	2100      	movs	r1, #0
 80041a8:	1d1a      	adds	r2, r3, #4
 80041aa:	602a      	str	r2, [r5, #0]
 80041ac:	681d      	ldr	r5, [r3, #0]
 80041ae:	6862      	ldr	r2, [r4, #4]
 80041b0:	4628      	mov	r0, r5
 80041b2:	f000 f8d9 	bl	8004368 <memchr>
 80041b6:	b108      	cbz	r0, 80041bc <_printf_i+0x1f4>
 80041b8:	1b40      	subs	r0, r0, r5
 80041ba:	6060      	str	r0, [r4, #4]
 80041bc:	6863      	ldr	r3, [r4, #4]
 80041be:	6123      	str	r3, [r4, #16]
 80041c0:	2300      	movs	r3, #0
 80041c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041c6:	e7a8      	b.n	800411a <_printf_i+0x152>
 80041c8:	462a      	mov	r2, r5
 80041ca:	4649      	mov	r1, r9
 80041cc:	4640      	mov	r0, r8
 80041ce:	6923      	ldr	r3, [r4, #16]
 80041d0:	47d0      	blx	sl
 80041d2:	3001      	adds	r0, #1
 80041d4:	d0ab      	beq.n	800412e <_printf_i+0x166>
 80041d6:	6823      	ldr	r3, [r4, #0]
 80041d8:	079b      	lsls	r3, r3, #30
 80041da:	d413      	bmi.n	8004204 <_printf_i+0x23c>
 80041dc:	68e0      	ldr	r0, [r4, #12]
 80041de:	9b03      	ldr	r3, [sp, #12]
 80041e0:	4298      	cmp	r0, r3
 80041e2:	bfb8      	it	lt
 80041e4:	4618      	movlt	r0, r3
 80041e6:	e7a4      	b.n	8004132 <_printf_i+0x16a>
 80041e8:	2301      	movs	r3, #1
 80041ea:	4632      	mov	r2, r6
 80041ec:	4649      	mov	r1, r9
 80041ee:	4640      	mov	r0, r8
 80041f0:	47d0      	blx	sl
 80041f2:	3001      	adds	r0, #1
 80041f4:	d09b      	beq.n	800412e <_printf_i+0x166>
 80041f6:	3501      	adds	r5, #1
 80041f8:	68e3      	ldr	r3, [r4, #12]
 80041fa:	9903      	ldr	r1, [sp, #12]
 80041fc:	1a5b      	subs	r3, r3, r1
 80041fe:	42ab      	cmp	r3, r5
 8004200:	dcf2      	bgt.n	80041e8 <_printf_i+0x220>
 8004202:	e7eb      	b.n	80041dc <_printf_i+0x214>
 8004204:	2500      	movs	r5, #0
 8004206:	f104 0619 	add.w	r6, r4, #25
 800420a:	e7f5      	b.n	80041f8 <_printf_i+0x230>
 800420c:	08004575 	.word	0x08004575
 8004210:	08004586 	.word	0x08004586

08004214 <_sbrk_r>:
 8004214:	b538      	push	{r3, r4, r5, lr}
 8004216:	2300      	movs	r3, #0
 8004218:	4d05      	ldr	r5, [pc, #20]	; (8004230 <_sbrk_r+0x1c>)
 800421a:	4604      	mov	r4, r0
 800421c:	4608      	mov	r0, r1
 800421e:	602b      	str	r3, [r5, #0]
 8004220:	f7fc fbee 	bl	8000a00 <_sbrk>
 8004224:	1c43      	adds	r3, r0, #1
 8004226:	d102      	bne.n	800422e <_sbrk_r+0x1a>
 8004228:	682b      	ldr	r3, [r5, #0]
 800422a:	b103      	cbz	r3, 800422e <_sbrk_r+0x1a>
 800422c:	6023      	str	r3, [r4, #0]
 800422e:	bd38      	pop	{r3, r4, r5, pc}
 8004230:	20000240 	.word	0x20000240

08004234 <__sread>:
 8004234:	b510      	push	{r4, lr}
 8004236:	460c      	mov	r4, r1
 8004238:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800423c:	f000 f906 	bl	800444c <_read_r>
 8004240:	2800      	cmp	r0, #0
 8004242:	bfab      	itete	ge
 8004244:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004246:	89a3      	ldrhlt	r3, [r4, #12]
 8004248:	181b      	addge	r3, r3, r0
 800424a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800424e:	bfac      	ite	ge
 8004250:	6563      	strge	r3, [r4, #84]	; 0x54
 8004252:	81a3      	strhlt	r3, [r4, #12]
 8004254:	bd10      	pop	{r4, pc}

08004256 <__swrite>:
 8004256:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800425a:	461f      	mov	r7, r3
 800425c:	898b      	ldrh	r3, [r1, #12]
 800425e:	4605      	mov	r5, r0
 8004260:	05db      	lsls	r3, r3, #23
 8004262:	460c      	mov	r4, r1
 8004264:	4616      	mov	r6, r2
 8004266:	d505      	bpl.n	8004274 <__swrite+0x1e>
 8004268:	2302      	movs	r3, #2
 800426a:	2200      	movs	r2, #0
 800426c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004270:	f000 f868 	bl	8004344 <_lseek_r>
 8004274:	89a3      	ldrh	r3, [r4, #12]
 8004276:	4632      	mov	r2, r6
 8004278:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800427c:	81a3      	strh	r3, [r4, #12]
 800427e:	4628      	mov	r0, r5
 8004280:	463b      	mov	r3, r7
 8004282:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004286:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800428a:	f000 b817 	b.w	80042bc <_write_r>

0800428e <__sseek>:
 800428e:	b510      	push	{r4, lr}
 8004290:	460c      	mov	r4, r1
 8004292:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004296:	f000 f855 	bl	8004344 <_lseek_r>
 800429a:	1c43      	adds	r3, r0, #1
 800429c:	89a3      	ldrh	r3, [r4, #12]
 800429e:	bf15      	itete	ne
 80042a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80042a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80042a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80042aa:	81a3      	strheq	r3, [r4, #12]
 80042ac:	bf18      	it	ne
 80042ae:	81a3      	strhne	r3, [r4, #12]
 80042b0:	bd10      	pop	{r4, pc}

080042b2 <__sclose>:
 80042b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042b6:	f000 b813 	b.w	80042e0 <_close_r>
	...

080042bc <_write_r>:
 80042bc:	b538      	push	{r3, r4, r5, lr}
 80042be:	4604      	mov	r4, r0
 80042c0:	4608      	mov	r0, r1
 80042c2:	4611      	mov	r1, r2
 80042c4:	2200      	movs	r2, #0
 80042c6:	4d05      	ldr	r5, [pc, #20]	; (80042dc <_write_r+0x20>)
 80042c8:	602a      	str	r2, [r5, #0]
 80042ca:	461a      	mov	r2, r3
 80042cc:	f7fb ff3e 	bl	800014c <_write>
 80042d0:	1c43      	adds	r3, r0, #1
 80042d2:	d102      	bne.n	80042da <_write_r+0x1e>
 80042d4:	682b      	ldr	r3, [r5, #0]
 80042d6:	b103      	cbz	r3, 80042da <_write_r+0x1e>
 80042d8:	6023      	str	r3, [r4, #0]
 80042da:	bd38      	pop	{r3, r4, r5, pc}
 80042dc:	20000240 	.word	0x20000240

080042e0 <_close_r>:
 80042e0:	b538      	push	{r3, r4, r5, lr}
 80042e2:	2300      	movs	r3, #0
 80042e4:	4d05      	ldr	r5, [pc, #20]	; (80042fc <_close_r+0x1c>)
 80042e6:	4604      	mov	r4, r0
 80042e8:	4608      	mov	r0, r1
 80042ea:	602b      	str	r3, [r5, #0]
 80042ec:	f7fc fb57 	bl	800099e <_close>
 80042f0:	1c43      	adds	r3, r0, #1
 80042f2:	d102      	bne.n	80042fa <_close_r+0x1a>
 80042f4:	682b      	ldr	r3, [r5, #0]
 80042f6:	b103      	cbz	r3, 80042fa <_close_r+0x1a>
 80042f8:	6023      	str	r3, [r4, #0]
 80042fa:	bd38      	pop	{r3, r4, r5, pc}
 80042fc:	20000240 	.word	0x20000240

08004300 <_fstat_r>:
 8004300:	b538      	push	{r3, r4, r5, lr}
 8004302:	2300      	movs	r3, #0
 8004304:	4d06      	ldr	r5, [pc, #24]	; (8004320 <_fstat_r+0x20>)
 8004306:	4604      	mov	r4, r0
 8004308:	4608      	mov	r0, r1
 800430a:	4611      	mov	r1, r2
 800430c:	602b      	str	r3, [r5, #0]
 800430e:	f7fc fb51 	bl	80009b4 <_fstat>
 8004312:	1c43      	adds	r3, r0, #1
 8004314:	d102      	bne.n	800431c <_fstat_r+0x1c>
 8004316:	682b      	ldr	r3, [r5, #0]
 8004318:	b103      	cbz	r3, 800431c <_fstat_r+0x1c>
 800431a:	6023      	str	r3, [r4, #0]
 800431c:	bd38      	pop	{r3, r4, r5, pc}
 800431e:	bf00      	nop
 8004320:	20000240 	.word	0x20000240

08004324 <_isatty_r>:
 8004324:	b538      	push	{r3, r4, r5, lr}
 8004326:	2300      	movs	r3, #0
 8004328:	4d05      	ldr	r5, [pc, #20]	; (8004340 <_isatty_r+0x1c>)
 800432a:	4604      	mov	r4, r0
 800432c:	4608      	mov	r0, r1
 800432e:	602b      	str	r3, [r5, #0]
 8004330:	f7fc fb4f 	bl	80009d2 <_isatty>
 8004334:	1c43      	adds	r3, r0, #1
 8004336:	d102      	bne.n	800433e <_isatty_r+0x1a>
 8004338:	682b      	ldr	r3, [r5, #0]
 800433a:	b103      	cbz	r3, 800433e <_isatty_r+0x1a>
 800433c:	6023      	str	r3, [r4, #0]
 800433e:	bd38      	pop	{r3, r4, r5, pc}
 8004340:	20000240 	.word	0x20000240

08004344 <_lseek_r>:
 8004344:	b538      	push	{r3, r4, r5, lr}
 8004346:	4604      	mov	r4, r0
 8004348:	4608      	mov	r0, r1
 800434a:	4611      	mov	r1, r2
 800434c:	2200      	movs	r2, #0
 800434e:	4d05      	ldr	r5, [pc, #20]	; (8004364 <_lseek_r+0x20>)
 8004350:	602a      	str	r2, [r5, #0]
 8004352:	461a      	mov	r2, r3
 8004354:	f7fc fb47 	bl	80009e6 <_lseek>
 8004358:	1c43      	adds	r3, r0, #1
 800435a:	d102      	bne.n	8004362 <_lseek_r+0x1e>
 800435c:	682b      	ldr	r3, [r5, #0]
 800435e:	b103      	cbz	r3, 8004362 <_lseek_r+0x1e>
 8004360:	6023      	str	r3, [r4, #0]
 8004362:	bd38      	pop	{r3, r4, r5, pc}
 8004364:	20000240 	.word	0x20000240

08004368 <memchr>:
 8004368:	4603      	mov	r3, r0
 800436a:	b510      	push	{r4, lr}
 800436c:	b2c9      	uxtb	r1, r1
 800436e:	4402      	add	r2, r0
 8004370:	4293      	cmp	r3, r2
 8004372:	4618      	mov	r0, r3
 8004374:	d101      	bne.n	800437a <memchr+0x12>
 8004376:	2000      	movs	r0, #0
 8004378:	e003      	b.n	8004382 <memchr+0x1a>
 800437a:	7804      	ldrb	r4, [r0, #0]
 800437c:	3301      	adds	r3, #1
 800437e:	428c      	cmp	r4, r1
 8004380:	d1f6      	bne.n	8004370 <memchr+0x8>
 8004382:	bd10      	pop	{r4, pc}

08004384 <memcpy>:
 8004384:	440a      	add	r2, r1
 8004386:	4291      	cmp	r1, r2
 8004388:	f100 33ff 	add.w	r3, r0, #4294967295
 800438c:	d100      	bne.n	8004390 <memcpy+0xc>
 800438e:	4770      	bx	lr
 8004390:	b510      	push	{r4, lr}
 8004392:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004396:	4291      	cmp	r1, r2
 8004398:	f803 4f01 	strb.w	r4, [r3, #1]!
 800439c:	d1f9      	bne.n	8004392 <memcpy+0xe>
 800439e:	bd10      	pop	{r4, pc}

080043a0 <memmove>:
 80043a0:	4288      	cmp	r0, r1
 80043a2:	b510      	push	{r4, lr}
 80043a4:	eb01 0402 	add.w	r4, r1, r2
 80043a8:	d902      	bls.n	80043b0 <memmove+0x10>
 80043aa:	4284      	cmp	r4, r0
 80043ac:	4623      	mov	r3, r4
 80043ae:	d807      	bhi.n	80043c0 <memmove+0x20>
 80043b0:	1e43      	subs	r3, r0, #1
 80043b2:	42a1      	cmp	r1, r4
 80043b4:	d008      	beq.n	80043c8 <memmove+0x28>
 80043b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80043ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80043be:	e7f8      	b.n	80043b2 <memmove+0x12>
 80043c0:	4601      	mov	r1, r0
 80043c2:	4402      	add	r2, r0
 80043c4:	428a      	cmp	r2, r1
 80043c6:	d100      	bne.n	80043ca <memmove+0x2a>
 80043c8:	bd10      	pop	{r4, pc}
 80043ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80043ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80043d2:	e7f7      	b.n	80043c4 <memmove+0x24>

080043d4 <__malloc_lock>:
 80043d4:	4801      	ldr	r0, [pc, #4]	; (80043dc <__malloc_lock+0x8>)
 80043d6:	f7ff b98f 	b.w	80036f8 <__retarget_lock_acquire_recursive>
 80043da:	bf00      	nop
 80043dc:	20000234 	.word	0x20000234

080043e0 <__malloc_unlock>:
 80043e0:	4801      	ldr	r0, [pc, #4]	; (80043e8 <__malloc_unlock+0x8>)
 80043e2:	f7ff b98a 	b.w	80036fa <__retarget_lock_release_recursive>
 80043e6:	bf00      	nop
 80043e8:	20000234 	.word	0x20000234

080043ec <_realloc_r>:
 80043ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043f0:	4680      	mov	r8, r0
 80043f2:	4614      	mov	r4, r2
 80043f4:	460e      	mov	r6, r1
 80043f6:	b921      	cbnz	r1, 8004402 <_realloc_r+0x16>
 80043f8:	4611      	mov	r1, r2
 80043fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043fe:	f7ff ba4b 	b.w	8003898 <_malloc_r>
 8004402:	b92a      	cbnz	r2, 8004410 <_realloc_r+0x24>
 8004404:	f7ff f9e0 	bl	80037c8 <_free_r>
 8004408:	4625      	mov	r5, r4
 800440a:	4628      	mov	r0, r5
 800440c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004410:	f000 f82e 	bl	8004470 <_malloc_usable_size_r>
 8004414:	4284      	cmp	r4, r0
 8004416:	4607      	mov	r7, r0
 8004418:	d802      	bhi.n	8004420 <_realloc_r+0x34>
 800441a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800441e:	d812      	bhi.n	8004446 <_realloc_r+0x5a>
 8004420:	4621      	mov	r1, r4
 8004422:	4640      	mov	r0, r8
 8004424:	f7ff fa38 	bl	8003898 <_malloc_r>
 8004428:	4605      	mov	r5, r0
 800442a:	2800      	cmp	r0, #0
 800442c:	d0ed      	beq.n	800440a <_realloc_r+0x1e>
 800442e:	42bc      	cmp	r4, r7
 8004430:	4622      	mov	r2, r4
 8004432:	4631      	mov	r1, r6
 8004434:	bf28      	it	cs
 8004436:	463a      	movcs	r2, r7
 8004438:	f7ff ffa4 	bl	8004384 <memcpy>
 800443c:	4631      	mov	r1, r6
 800443e:	4640      	mov	r0, r8
 8004440:	f7ff f9c2 	bl	80037c8 <_free_r>
 8004444:	e7e1      	b.n	800440a <_realloc_r+0x1e>
 8004446:	4635      	mov	r5, r6
 8004448:	e7df      	b.n	800440a <_realloc_r+0x1e>
	...

0800444c <_read_r>:
 800444c:	b538      	push	{r3, r4, r5, lr}
 800444e:	4604      	mov	r4, r0
 8004450:	4608      	mov	r0, r1
 8004452:	4611      	mov	r1, r2
 8004454:	2200      	movs	r2, #0
 8004456:	4d05      	ldr	r5, [pc, #20]	; (800446c <_read_r+0x20>)
 8004458:	602a      	str	r2, [r5, #0]
 800445a:	461a      	mov	r2, r3
 800445c:	f7fc fa82 	bl	8000964 <_read>
 8004460:	1c43      	adds	r3, r0, #1
 8004462:	d102      	bne.n	800446a <_read_r+0x1e>
 8004464:	682b      	ldr	r3, [r5, #0]
 8004466:	b103      	cbz	r3, 800446a <_read_r+0x1e>
 8004468:	6023      	str	r3, [r4, #0]
 800446a:	bd38      	pop	{r3, r4, r5, pc}
 800446c:	20000240 	.word	0x20000240

08004470 <_malloc_usable_size_r>:
 8004470:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004474:	1f18      	subs	r0, r3, #4
 8004476:	2b00      	cmp	r3, #0
 8004478:	bfbc      	itt	lt
 800447a:	580b      	ldrlt	r3, [r1, r0]
 800447c:	18c0      	addlt	r0, r0, r3
 800447e:	4770      	bx	lr

08004480 <_init>:
 8004480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004482:	bf00      	nop
 8004484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004486:	bc08      	pop	{r3}
 8004488:	469e      	mov	lr, r3
 800448a:	4770      	bx	lr

0800448c <_fini>:
 800448c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800448e:	bf00      	nop
 8004490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004492:	bc08      	pop	{r3}
 8004494:	469e      	mov	lr, r3
 8004496:	4770      	bx	lr
